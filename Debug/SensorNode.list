
SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000590c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aac  08005aac  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005aac  08005aac  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aac  08005aac  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000068  08005b1c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005b1c  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000faad  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002670  00000000  00000000  0002fb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  000321f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc7  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a90  00000000  00000000  00033cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bfa  00000000  00000000  0003777f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009035d  00000000  00000000  0004a379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047b8  00000000  00000000  000da6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000dee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a04 	.word	0x08005a04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005a04 	.word	0x08005a04

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af04      	add	r7, sp, #16
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2302      	movs	r3, #2
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	f002 f9fc 	bl	8002d50 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000958:	7b3b      	ldrb	r3, [r7, #12]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b21a      	sxth	r2, r3
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	b21b      	sxth	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	b21b      	sxth	r3, r3
 8000966:	b29b      	uxth	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af04      	add	r7, sp, #16
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
 800097c:	4613      	mov	r3, r2
 800097e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000980:	883b      	ldrh	r3, [r7, #0]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800098a:	883b      	ldrh	r3, [r7, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	b29a      	uxth	r2, r3
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2302      	movs	r3, #2
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	f002 f8d6 	bl	8002b5c <HAL_I2C_Mem_Write>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80009c0:	2102      	movs	r1, #2
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffb2 	bl	800092c <Read16>
 80009c8:	4603      	mov	r3, r0
 80009ca:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	b29b      	uxth	r3, r3

}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80009e6:	2104      	movs	r1, #4
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff9f 	bl	800092c <Read16>
 80009ee:	4603      	mov	r3, r0
 80009f0:	81fb      	strh	r3, [r7, #14]

	return (result );
 80009f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffe8 	bl	80009de <INA219_ReadCurrent_raw>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <INA219_ReadCurrent+0x2c>)
 8000a18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a20:	b21b      	sxth	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000086 	.word	0x20000086

08000a30 <INA219_Reset>:

	return (result * 0.01 );
}

void INA219_Reset(INA219_t *ina219)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000a38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ff96 	bl	8000970 <Write16>
	HAL_Delay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fe85 	bl	8001754 <HAL_Delay>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	461a      	mov	r2, r3
 8000a62:	2105      	movs	r1, #5
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff83 	bl	8000970 <Write16>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	461a      	mov	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff73 	bl	8000970 <Write16>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8000a9c:	f240 139f 	movw	r3, #415	; 0x19f
 8000aa0:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 8192;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <INA219_setCalibration_16V_400mA+0x40>)
 8000aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <INA219_setCalibration_16V_400mA+0x44>)
 8000aac:	2214      	movs	r2, #20
 8000aae:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <INA219_setCalibration_16V_400mA+0x48>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <INA219_setCalibration_16V_400mA+0x40>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffc8 	bl	8000a52 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffd3 	bl	8000a72 <INA219_setConfig>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000084 	.word	0x20000084
 8000ad8:	20000086 	.word	0x20000086
 8000adc:	20000088 	.word	0x20000088

08000ae0 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <INA219_Init+0x5c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <INA219_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	2302      	movs	r3, #2
 8000b10:	2203      	movs	r2, #3
 8000b12:	68b8      	ldr	r0, [r7, #8]
 8000b14:	f002 fb84 	bl	8003220 <HAL_I2C_IsDeviceReady>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d107      	bne.n	8000b32 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff ff84 	bl	8000a30 <INA219_Reset>
		INA219_setCalibration_16V_400mA(ina219);
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff ffb3 	bl	8000a94 <INA219_setCalibration_16V_400mA>

		return 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000b32:	2300      	movs	r3, #0
	}
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000086 	.word	0x20000086
 8000b40:	20000088 	.word	0x20000088

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f000 fda1 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f863 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 f9db 	bl	8000f0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b56:	f000 f8af 	bl	8000cb8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000b5a:	f000 f8eb 	bl	8000d34 <MX_CAN_Init>
  MX_I2C1_Init();
 8000b5e:	f000 f91d 	bl	8000d9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b62:	f000 f949 	bl	8000df8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b66:	f000 f97d 	bl	8000e64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b6a:	f000 f9a5 	bl	8000eb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000b6e:	e00b      	b.n	8000b88 <main+0x44>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <main+0xb0>)
 8000b78:	f001 fe7a 	bl	8002870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <main+0xb0>)
 8000b84:	f001 fe74 	bl	8002870 <HAL_GPIO_WritePin>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	491b      	ldr	r1, [pc, #108]	; (8000bf8 <main+0xb4>)
 8000b8c:	481b      	ldr	r0, [pc, #108]	; (8000bfc <main+0xb8>)
 8000b8e:	f7ff ffa7 	bl	8000ae0 <INA219_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0eb      	beq.n	8000b70 <main+0x2c>
  }
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000b98:	4819      	ldr	r0, [pc, #100]	; (8000c00 <main+0xbc>)
 8000b9a:	f001 fa57 	bl	800204c <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t temp = GetTemperature();
 8000b9e:	f000 fa5f 	bl	8001060 <GetTemperature>
 8000ba2:	6078      	str	r0, [r7, #4]
//	  uint32_t tempRAW = GetTemperature2();
	  vbus = INA219_ReadBusVoltage(&ina219);
 8000ba4:	4815      	ldr	r0, [pc, #84]	; (8000bfc <main+0xb8>)
 8000ba6:	f7ff ff07 	bl	80009b8 <INA219_ReadBusVoltage>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <main+0xc0>)
 8000bb0:	801a      	strh	r2, [r3, #0]
//	  vshunt = INA219_ReadShuntVolage(&ina219);
	  current = INA219_ReadCurrent(&ina219);
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <main+0xb8>)
 8000bb4:	f7ff ff24 	bl	8000a00 <INA219_ReadCurrent>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <main+0xc4>)
 8000bbe:	801a      	strh	r2, [r3, #0]
	  printf("B: %d\n", vbus);
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <main+0xc0>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <main+0xc8>)
 8000bc8:	f004 f89e 	bl	8004d08 <iprintf>
//	  printf("S: %d\n", vshunt);
	  printf("C: %d\n", current);
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <main+0xc4>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <main+0xcc>)
 8000bd4:	f004 f898 	bl	8004d08 <iprintf>
//	  printf("T: %ld.%02ld\n", temp / 100, temp % 100);
//	  printf("T: %ld\n", temp );
//	  printf("Tr: %d\n", tempRAW );
	  printf("ADC: %ld\n", temp);
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <main+0xd0>)
 8000bdc:	f004 f894 	bl	8004d08 <iprintf>

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <main+0xb0>)
 8000be6:	f001 fe5b 	bl	80028a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bee:	f000 fdb1 	bl	8001754 <HAL_Delay>
  {
 8000bf2:	e7d4      	b.n	8000b9e <main+0x5a>
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	200000e4 	.word	0x200000e4
 8000bfc:	20000220 	.word	0x20000220
 8000c00:	2000008c 	.word	0x2000008c
 8000c04:	20000228 	.word	0x20000228
 8000c08:	2000022a 	.word	0x2000022a
 8000c0c:	08005a1c 	.word	0x08005a1c
 8000c10:	08005a24 	.word	0x08005a24
 8000c14:	08005a2c 	.word	0x08005a2c

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f004 f8c3 	bl	8004db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c50:	2310      	movs	r3, #16
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 ffc1 	bl	8003be4 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c68:	f000 fa42 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fa2e 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c92:	f000 fa2d 	bl	80010f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c96:	2302      	movs	r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fbaf 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cac:	f000 fa20 	bl	80010f0 <Error_Handler>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3750      	adds	r7, #80	; 0x50
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cca:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <MX_ADC1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000ce2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ce6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000cf6:	f000 fd51 	bl	800179c <HAL_ADC_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 f9f6 	bl	80010f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_ADC1_Init+0x74>)
 8000d16:	f001 f805 	bl	8001d24 <HAL_ADC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d20:	f000 f9e6 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000008c 	.word	0x2000008c
 8000d30:	40012400 	.word	0x40012400

08000d34 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_CAN_Init+0x64>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d40:	2210      	movs	r2, #16
 8000d42:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_CAN_Init+0x60>)
 8000d82:	f001 fa11 	bl	80021a8 <HAL_CAN_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 f9b0 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000bc 	.word	0x200000bc
 8000d98:	40006400 	.word	0x40006400

08000d9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <MX_I2C1_Init+0x54>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x58>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dda:	f001 fd7b 	bl	80028d4 <HAL_I2C_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 f984 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000e4 	.word	0x200000e4
 8000df0:	40005400 	.word	0x40005400
 8000df4:	000186a0 	.word	0x000186a0

08000df8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000dfe:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <MX_SPI1_Init+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e44:	220a      	movs	r2, #10
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_SPI1_Init+0x64>)
 8000e4a:	f003 fc47 	bl	80046dc <HAL_SPI_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e54:	f000 f94c 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000138 	.word	0x20000138
 8000e60:	40013000 	.word	0x40013000

08000e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART1_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	f003 fca2 	bl	80047e4 <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f923 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000190 	.word	0x20000190
 8000eb4:	40013800 	.word	0x40013800

08000eb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_USART2_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f003 fc78 	bl	80047e4 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000efa:	f000 f8f9 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001d8 	.word	0x200001d8
 8000f08:	40004400 	.word	0x40004400

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b46      	ldr	r3, [pc, #280]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b43      	ldr	r3, [pc, #268]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a42      	ldr	r2, [pc, #264]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <MX_GPIO_Init+0x13c>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_MCU1_0_GPIO_Port, XSHUT_MCU1_0_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	4837      	ldr	r0, [pc, #220]	; (800104c <MX_GPIO_Init+0x140>)
 8000f70:	f001 fc7e 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f641 4108 	movw	r1, #7176	; 0x1c08
 8000f7a:	4835      	ldr	r0, [pc, #212]	; (8001050 <MX_GPIO_Init+0x144>)
 8000f7c:	f001 fc78 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_BOOT_Pin|MPU_RST_Pin|XSHUT_MCU1_1_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 8000f86:	4832      	ldr	r0, [pc, #200]	; (8001050 <MX_GPIO_Init+0x144>)
 8000f88:	f001 fc72 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f92:	4830      	ldr	r0, [pc, #192]	; (8001054 <MX_GPIO_Init+0x148>)
 8000f94:	f001 fc6c 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO1_MCU1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_MCU1_0_Pin;
 8000f98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_GPIO_Init+0x140>)
 8000fae:	f001 fadb 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : XSHUT_MCU1_0_Pin */
  GPIO_InitStruct.Pin = XSHUT_MCU1_0_Pin;
 8000fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSHUT_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4820      	ldr	r0, [pc, #128]	; (800104c <MX_GPIO_Init+0x140>)
 8000fcc:	f001 facc 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481b      	ldr	r0, [pc, #108]	; (8001050 <MX_GPIO_Init+0x144>)
 8000fe4:	f001 fac0 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin MPU_BOOT_Pin
                           MPU_RST_Pin PB3 XSHUT_MCU1_1_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin|MPU_BOOT_Pin
 8000fe8:	f64d 5308 	movw	r3, #56584	; 0xdd08
 8000fec:	613b      	str	r3, [r7, #16]
                          |MPU_RST_Pin|GPIO_PIN_3|XSHUT_MCU1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4619      	mov	r1, r3
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <MX_GPIO_Init+0x144>)
 8001002:	f001 fab1 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU_INT_Pin GPIO1_MCU1_1_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin|GPIO1_MCU1_1_Pin;
 8001006:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_GPIO_Init+0x14c>)
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_GPIO_Init+0x144>)
 800101c:	f001 faa4 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_GPIO_Init+0x148>)
 800103a:	f001 fa95 	bl	8002568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	40011000 	.word	0x40011000
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40010800 	.word	0x40010800
 8001058:	10110000 	.word	0x10110000
 800105c:	00000000 	.word	0x00000000

08001060 <GetTemperature>:

/* USER CODE BEGIN 4 */
uint32_t GetTemperature(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	uint32_t ADC_val;

  HAL_ADC_Start(&hadc1);
 8001066:	4820      	ldr	r0, [pc, #128]	; (80010e8 <GetTemperature+0x88>)
 8001068:	f000 fc70 	bl	800194c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 800106c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001070:	481d      	ldr	r0, [pc, #116]	; (80010e8 <GetTemperature+0x88>)
 8001072:	f000 fd45 	bl	8001b00 <HAL_ADC_PollForConversion>
  ADC_val = HAL_ADC_GetValue(&hadc1);
 8001076:	481c      	ldr	r0, [pc, #112]	; (80010e8 <GetTemperature+0x88>)
 8001078:	f000 fe48 	bl	8001d0c <HAL_ADC_GetValue>
 800107c:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 800107e:	481a      	ldr	r0, [pc, #104]	; (80010e8 <GetTemperature+0x88>)
 8001080:	f000 fd12 	bl	8001aa8 <HAL_ADC_Stop>

  uint32_t temp = (ADC_val * 3.3 * 100) / 4095;
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff f9a5 	bl	80003d4 <__aeabi_ui2d>
 800108a:	a313      	add	r3, pc, #76	; (adr r3, 80010d8 <GetTemperature+0x78>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fa1a 	bl	80004c8 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <GetTemperature+0x8c>)
 80010a2:	f7ff fa11 	bl	80004c8 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	a30c      	add	r3, pc, #48	; (adr r3, 80010e0 <GetTemperature+0x80>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fb32 	bl	800071c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fc14 	bl	80008ec <__aeabi_d2uiz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	603b      	str	r3, [r7, #0]
//  uint32_t temp_decimal = ((ADC_val * 250) % 511) * 100 / 511;

//  uint32_t temperature = temp * 100 + temp_decimal;
  return temp;
 80010c8:	683b      	ldr	r3, [r7, #0]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	66666666 	.word	0x66666666
 80010dc:	400a6666 	.word	0x400a6666
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40affe00 	.word	0x40affe00
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	40590000 	.word	0x40590000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_MspInit+0x5c>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <HAL_MspInit+0x5c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_MspInit+0x5c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x5c>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x5c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x5c>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_MspInit+0x60>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_MspInit+0x60>)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_ADC_MspInit+0x6c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d121      	bne.n	80011c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x70>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x70>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_ADC_MspInit+0x70>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_ADC_MspInit+0x70>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x70>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_ADC_MspInit+0x70>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ADC_TEMPT_Pin;
 80011b0:	2311      	movs	r3, #17
 80011b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b4:	2303      	movs	r3, #3
 80011b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_ADC_MspInit+0x74>)
 80011c0:	f001 f9d2 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40012400 	.word	0x40012400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800

080011d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <HAL_CAN_MspInit+0x8c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d131      	bne.n	800125c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_CAN_MspInit+0x90>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_CAN_MspInit+0x90>)
 80011fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001202:	61d3      	str	r3, [r2, #28]
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_CAN_MspInit+0x90>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_CAN_MspInit+0x90>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_CAN_MspInit+0x90>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_CAN_MspInit+0x90>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800122c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <HAL_CAN_MspInit+0x94>)
 800123e:	f001 f993 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_CAN_MspInit+0x94>)
 8001258:	f001 f986 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40006400 	.word	0x40006400
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800

08001270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_I2C_MspInit+0x70>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d123      	bne.n	80012d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23c0      	movs	r3, #192	; 0xc0
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_I2C_MspInit+0x78>)
 80012bc:	f001 f954 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 80012c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_I2C_MspInit+0x74>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00

080012ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d12f      	bne.n	800136c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_SPI_MspInit+0x90>)
 8001350:	f001 f90a 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001354:	2340      	movs	r3, #64	; 0x40
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_SPI_MspInit+0x90>)
 8001368:	f001 f8fe 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013000 	.word	0x40013000
 8001378:	40021000 	.word	0x40021000
 800137c:	40010800 	.word	0x40010800

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a37      	ldr	r2, [pc, #220]	; (8001478 <HAL_UART_MspInit+0xf8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d132      	bne.n	8001406 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_UART_MspInit+0xfc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a35      	ldr	r2, [pc, #212]	; (800147c <HAL_UART_MspInit+0xfc>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_UART_MspInit+0xfc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_UART_MspInit+0xfc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_UART_MspInit+0xfc>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_UART_MspInit+0xfc>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4826      	ldr	r0, [pc, #152]	; (8001480 <HAL_UART_MspInit+0x100>)
 80013e6:	f001 f8bf 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4820      	ldr	r0, [pc, #128]	; (8001480 <HAL_UART_MspInit+0x100>)
 8001400:	f001 f8b2 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001404:	e034      	b.n	8001470 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_UART_MspInit+0x104>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d12f      	bne.n	8001470 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_MspInit+0xfc>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_UART_MspInit+0xfc>)
 8001416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141a:	61d3      	str	r3, [r2, #28]
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_UART_MspInit+0xfc>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_UART_MspInit+0xfc>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_UART_MspInit+0xfc>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_UART_MspInit+0xfc>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001440:	2304      	movs	r3, #4
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4619      	mov	r1, r3
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_UART_MspInit+0x100>)
 8001454:	f001 f888 	bl	8002568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001458:	2308      	movs	r3, #8
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_UART_MspInit+0x100>)
 800146c:	f001 f87c 	bl	8002568 <HAL_GPIO_Init>
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013800 	.word	0x40013800
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800
 8001484:	40004400 	.word	0x40004400

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 f925 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
  }

  return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e009      	b.n	8001536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f878 	bl	8001620 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf1      	blt.n	8001522 <_write+0x12>
  }
  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_close>:

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156e:	605a      	str	r2, [r3, #4]
  return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <_isatty>:

int _isatty(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f003 fc3a 	bl	8004e50 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20005000 	.word	0x20005000
 8001608:	00000400 	.word	0x00000400
 800160c:	2000022c 	.word	0x2000022c
 8001610:	20000380 	.word	0x20000380

08001614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001628:	1d39      	adds	r1, r7, #4
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	2201      	movs	r2, #1
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <__io_putchar+0x20>)
 8001632:	f003 f927 	bl	8004884 <HAL_UART_Transmit>
	return ch;
 8001636:	687b      	ldr	r3, [r7, #4]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000190 	.word	0x20000190

08001644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001644:	f7ff ffe6 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800164a:	490c      	ldr	r1, [pc, #48]	; (800167c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001660:	4c09      	ldr	r4, [pc, #36]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f003 fbf5 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001672:	f7ff fa67 	bl	8000b44 <main>
  bx lr
 8001676:	4770      	bx	lr
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001680:	08005ab4 	.word	0x08005ab4
  ldr r2, =_sbss
 8001684:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001688:	20000380 	.word	0x20000380

0800168c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC1_2_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_Init+0x28>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_Init+0x28>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 ff2d 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f808 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ac:	f7ff fd26 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 ff37 	bl	800254e <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 ff0d 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000000 	.word	0x20000000
 8001714:	20000008 	.word	0x20000008
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x1c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x20>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_IncTick+0x20>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000008 	.word	0x20000008
 800173c:	20000230 	.word	0x20000230

08001740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <HAL_GetTick+0x10>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	20000230 	.word	0x20000230

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fff0 	bl	8001740 <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffe0 	bl	8001740 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008

0800179c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0be      	b.n	800193c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fcc0 	bl	8001160 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fbf1 	bl	8001fc8 <ADC_ConversionStop_Disable>
 80017e6:	4603      	mov	r3, r0
 80017e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8099 	bne.w	800192a <HAL_ADC_Init+0x18e>
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 8095 	bne.w	800192a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800181c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7b1b      	ldrb	r3, [r3, #12]
 8001822:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001824:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	4313      	orrs	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001834:	d003      	beq.n	800183e <HAL_ADC_Init+0xa2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_ADC_Init+0xa8>
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	e000      	b.n	8001846 <HAL_ADC_Init+0xaa>
 8001844:	2300      	movs	r3, #0
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7d1b      	ldrb	r3, [r3, #20]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d119      	bne.n	8001888 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	3b01      	subs	r3, #1
 8001862:	035a      	lsls	r2, r3, #13
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	e00b      	b.n	8001888 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_ADC_Init+0x1a8>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_Init+0x126>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d104      	bne.n	80018cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	051b      	lsls	r3, r3, #20
 80018ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	430a      	orrs	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_ADC_Init+0x1ac>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d10b      	bne.n	8001908 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001906:	e018      	b.n	800193a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f023 0312 	bic.w	r3, r3, #18
 8001910:	f043 0210 	orr.w	r2, r3, #16
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f043 0201 	orr.w	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001928:	e007      	b.n	800193a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f043 0210 	orr.w	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	ffe1f7fd 	.word	0xffe1f7fd
 8001948:	ff1f0efe 	.word	0xff1f0efe

0800194c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Start+0x1a>
 8001962:	2302      	movs	r3, #2
 8001964:	e098      	b.n	8001a98 <HAL_ADC_Start+0x14c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fad0 	bl	8001f14 <ADC_Enable>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 8087 	bne.w	8001a8e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HAL_ADC_Start+0x154>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d105      	bne.n	80019aa <HAL_ADC_Start+0x5e>
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_ADC_Start+0x158>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d026      	beq.n	8001a12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019d4:	e01d      	b.n	8001a12 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <HAL_ADC_Start+0x158>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_Start+0xaa>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <HAL_ADC_Start+0x154>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10d      	bne.n	8001a12 <HAL_ADC_Start+0xc6>
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_ADC_Start+0x158>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f023 0206 	bic.w	r2, r3, #6
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a2a:	e002      	b.n	8001a32 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f06f 0202 	mvn.w	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a52:	d113      	bne.n	8001a7c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_ADC_Start+0x154>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_ADC_Start+0x158>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d108      	bne.n	8001a7c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	e00c      	b.n	8001a96 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e003      	b.n	8001a96 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40012800 	.word	0x40012800
 8001aa4:	40012400 	.word	0x40012400

08001aa8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Stop+0x1a>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e01a      	b.n	8001af8 <HAL_ADC_Stop+0x50>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fa7c 	bl	8001fc8 <ADC_ConversionStop_Disable>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fe13 	bl	8001740 <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f043 0220 	orr.w	r2, r3, #32
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0d3      	b.n	8001cea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d131      	bne.n	8001bb4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d12a      	bne.n	8001bb4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b5e:	e021      	b.n	8001ba4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d01d      	beq.n	8001ba4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x7e>
 8001b6e:	f7ff fde7 	bl	8001740 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d212      	bcs.n	8001ba4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f043 0204 	orr.w	r2, r3, #4
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0a2      	b.n	8001cea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0d6      	beq.n	8001b60 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bb2:	e070      	b.n	8001c96 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_ADC_PollForConversion+0x1f4>)
 8001bb6:	681c      	ldr	r4, [r3, #0]
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f002 fcd9 	bl	8004570 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <HAL_ADC_PollForConversion+0x1f8>)
 8001bcc:	400b      	ands	r3, r1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d118      	bne.n	8001c04 <HAL_ADC_PollForConversion+0x104>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68d9      	ldr	r1, [r3, #12]
 8001bd8:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_ADC_PollForConversion+0x1fc>)
 8001bda:	400b      	ands	r3, r1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d111      	bne.n	8001c04 <HAL_ADC_PollForConversion+0x104>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6919      	ldr	r1, [r3, #16]
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_ADC_PollForConversion+0x200>)
 8001be8:	400b      	ands	r3, r1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d108      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x100>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_ADC_PollForConversion+0x204>)
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x100>
 8001bfc:	2314      	movs	r3, #20
 8001bfe:	e020      	b.n	8001c42 <HAL_ADC_PollForConversion+0x142>
 8001c00:	2329      	movs	r3, #41	; 0x29
 8001c02:	e01e      	b.n	8001c42 <HAL_ADC_PollForConversion+0x142>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_ADC_PollForConversion+0x200>)
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_ADC_PollForConversion+0x120>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_ADC_PollForConversion+0x204>)
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00d      	beq.n	8001c3c <HAL_ADC_PollForConversion+0x13c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_ADC_PollForConversion+0x208>)
 8001c28:	400b      	ands	r3, r1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_ADC_PollForConversion+0x140>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68d9      	ldr	r1, [r3, #12]
 8001c34:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_ADC_PollForConversion+0x208>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_PollForConversion+0x140>
 8001c3c:	2354      	movs	r3, #84	; 0x54
 8001c3e:	e000      	b.n	8001c42 <HAL_ADC_PollForConversion+0x142>
 8001c40:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c48:	e021      	b.n	8001c8e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d01a      	beq.n	8001c88 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_ADC_PollForConversion+0x168>
 8001c58:	f7ff fd72 	bl	8001740 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d20f      	bcs.n	8001c88 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d90b      	bls.n	8001c88 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e030      	b.n	8001cea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d8d9      	bhi.n	8001c4a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0212 	mvn.w	r2, #18
 8001c9e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cba:	d115      	bne.n	8001ce8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	24924924 	.word	0x24924924
 8001cfc:	00924924 	.word	0x00924924
 8001d00:	12492492 	.word	0x12492492
 8001d04:	00492492 	.word	0x00492492
 8001d08:	00249249 	.word	0x00249249

08001d0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x20>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e0dc      	b.n	8001efe <HAL_ADC_ConfigChannel+0x1da>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d81c      	bhi.n	8001d8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	3b05      	subs	r3, #5
 8001d66:	221f      	movs	r2, #31
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4019      	ands	r1, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3b05      	subs	r3, #5
 8001d80:	fa00 f203 	lsl.w	r2, r0, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d8c:	e03c      	b.n	8001e08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d81c      	bhi.n	8001dd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b23      	subs	r3, #35	; 0x23
 8001da8:	221f      	movs	r2, #31
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4019      	ands	r1, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b23      	subs	r3, #35	; 0x23
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dce:	e01b      	b.n	8001e08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b41      	subs	r3, #65	; 0x41
 8001de2:	221f      	movs	r2, #31
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4019      	ands	r1, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b41      	subs	r3, #65	; 0x41
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d91c      	bls.n	8001e4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68d9      	ldr	r1, [r3, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	2207      	movs	r2, #7
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4019      	ands	r1, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6898      	ldr	r0, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b1e      	subs	r3, #30
 8001e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	e019      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6919      	ldr	r1, [r3, #16]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4019      	ands	r1, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6898      	ldr	r0, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	fa00 f203 	lsl.w	r2, r0, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d003      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e8a:	2b11      	cmp	r3, #17
 8001e8c:	d132      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d125      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d126      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001eb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d11a      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9a      	lsrs	r2, r3, #18
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f9      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ee2:	e007      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40012400 	.word	0x40012400
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	431bde83 	.word	0x431bde83

08001f14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d040      	beq.n	8001fb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <ADC_Enable+0xac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <ADC_Enable+0xb0>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f50:	e002      	b.n	8001f58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f5e:	f7ff fbef 	bl	8001740 <HAL_GetTick>
 8001f62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f64:	e01f      	b.n	8001fa6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f66:	f7ff fbeb 	bl	8001740 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d918      	bls.n	8001fa6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d011      	beq.n	8001fa6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e007      	b.n	8001fb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d1d8      	bne.n	8001f66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d12e      	bne.n	8002040 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ff2:	f7ff fba5 	bl	8001740 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ff8:	e01b      	b.n	8002032 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ffa:	f7ff fba1 	bl	8001740 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d914      	bls.n	8002032 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e007      	b.n	8002042 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d0dc      	beq.n	8001ffa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADCEx_Calibration_Start+0x1e>
 8002066:	2302      	movs	r3, #2
 8002068:	e097      	b.n	800219a <HAL_ADCEx_Calibration_Start+0x14e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa8 	bl	8001fc8 <ADC_ConversionStop_Disable>
 8002078:	4603      	mov	r3, r0
 800207a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff49 	bl	8001f14 <ADC_Enable>
 8002082:	4603      	mov	r3, r0
 8002084:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 8081 	bne.w	8002190 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002096:	f023 0302 	bic.w	r3, r3, #2
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_ADCEx_Calibration_Start+0x158>)
 80020a4:	681c      	ldr	r4, [r3, #0]
 80020a6:	2002      	movs	r0, #2
 80020a8:	f002 fa62 	bl	8004570 <HAL_RCCEx_GetPeriphCLKFreq>
 80020ac:	4603      	mov	r3, r0
 80020ae:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80020b2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80020b4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80020b6:	e002      	b.n	80020be <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f9      	bne.n	80020b8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020d4:	f7ff fb34 	bl	8001740 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020da:	e01b      	b.n	8002114 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020dc:	f7ff fb30 	bl	8001740 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d914      	bls.n	8002114 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	f023 0312 	bic.w	r3, r3, #18
 8002100:	f043 0210 	orr.w	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e042      	b.n	800219a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1dc      	bne.n	80020dc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0204 	orr.w	r2, r2, #4
 8002130:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002132:	f7ff fb05 	bl	8001740 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002138:	e01b      	b.n	8002172 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800213a:	f7ff fb01 	bl	8001740 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b0a      	cmp	r3, #10
 8002146:	d914      	bls.n	8002172 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f023 0312 	bic.w	r3, r3, #18
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e013      	b.n	800219a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1dc      	bne.n	800213a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002198:	7dfb      	ldrb	r3, [r7, #23]
}
 800219a:	4618      	mov	r0, r3
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0ed      	b.n	8002396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff f806 	bl	80011d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021dc:	f7ff fab0 	bl	8001740 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021e2:	e012      	b.n	800220a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021e4:	f7ff faac 	bl	8001740 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b0a      	cmp	r3, #10
 80021f0:	d90b      	bls.n	800220a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0c5      	b.n	8002396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0e5      	beq.n	80021e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0202 	bic.w	r2, r2, #2
 8002226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002228:	f7ff fa8a 	bl	8001740 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800222e:	e012      	b.n	8002256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002230:	f7ff fa86 	bl	8001740 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d90b      	bls.n	8002256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e09f      	b.n	8002396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e5      	bne.n	8002230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7e5b      	ldrb	r3, [r3, #25]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e9b      	ldrb	r3, [r3, #26]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d108      	bne.n	80022d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0220 	bic.w	r2, r2, #32
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7edb      	ldrb	r3, [r3, #27]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0210 	bic.w	r2, r2, #16
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e007      	b.n	800230c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0210 	orr.w	r2, r2, #16
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e007      	b.n	8002336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0208 	bic.w	r2, r2, #8
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f5b      	ldrb	r3, [r3, #29]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d108      	bne.n	8002350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0204 	orr.w	r2, r2, #4
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e007      	b.n	8002360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0204 	bic.w	r2, r2, #4
 800235e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff90 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff49 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff5e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff90 	bl	8002458 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffb0 	bl	80024bc <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b08b      	sub	sp, #44	; 0x2c
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257a:	e169      	b.n	8002850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800257c:	2201      	movs	r2, #1
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8158 	bne.w	800284a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a9a      	ldr	r2, [pc, #616]	; (8002808 <HAL_GPIO_Init+0x2a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d05e      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025a4:	4a98      	ldr	r2, [pc, #608]	; (8002808 <HAL_GPIO_Init+0x2a0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d875      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025aa:	4a98      	ldr	r2, [pc, #608]	; (800280c <HAL_GPIO_Init+0x2a4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d058      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025b0:	4a96      	ldr	r2, [pc, #600]	; (800280c <HAL_GPIO_Init+0x2a4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d86f      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025b6:	4a96      	ldr	r2, [pc, #600]	; (8002810 <HAL_GPIO_Init+0x2a8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d052      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025bc:	4a94      	ldr	r2, [pc, #592]	; (8002810 <HAL_GPIO_Init+0x2a8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d869      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025c2:	4a94      	ldr	r2, [pc, #592]	; (8002814 <HAL_GPIO_Init+0x2ac>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d04c      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025c8:	4a92      	ldr	r2, [pc, #584]	; (8002814 <HAL_GPIO_Init+0x2ac>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d863      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025ce:	4a92      	ldr	r2, [pc, #584]	; (8002818 <HAL_GPIO_Init+0x2b0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d046      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025d4:	4a90      	ldr	r2, [pc, #576]	; (8002818 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d85d      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d82a      	bhi.n	8002634 <HAL_GPIO_Init+0xcc>
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d859      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_GPIO_Init+0x80>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	08002663 	.word	0x08002663
 80025ec:	0800263d 	.word	0x0800263d
 80025f0:	0800264f 	.word	0x0800264f
 80025f4:	08002691 	.word	0x08002691
 80025f8:	08002697 	.word	0x08002697
 80025fc:	08002697 	.word	0x08002697
 8002600:	08002697 	.word	0x08002697
 8002604:	08002697 	.word	0x08002697
 8002608:	08002697 	.word	0x08002697
 800260c:	08002697 	.word	0x08002697
 8002610:	08002697 	.word	0x08002697
 8002614:	08002697 	.word	0x08002697
 8002618:	08002697 	.word	0x08002697
 800261c:	08002697 	.word	0x08002697
 8002620:	08002697 	.word	0x08002697
 8002624:	08002697 	.word	0x08002697
 8002628:	08002697 	.word	0x08002697
 800262c:	08002645 	.word	0x08002645
 8002630:	08002659 	.word	0x08002659
 8002634:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_GPIO_Init+0x2b4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800263a:	e02c      	b.n	8002696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	623b      	str	r3, [r7, #32]
          break;
 8002642:	e029      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	3304      	adds	r3, #4
 800264a:	623b      	str	r3, [r7, #32]
          break;
 800264c:	e024      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	3308      	adds	r3, #8
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e01f      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	330c      	adds	r3, #12
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e01a      	b.n	8002698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800266a:	2304      	movs	r3, #4
 800266c:	623b      	str	r3, [r7, #32]
          break;
 800266e:	e013      	b.n	8002698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	611a      	str	r2, [r3, #16]
          break;
 8002682:	e009      	b.n	8002698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002684:	2308      	movs	r3, #8
 8002686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	615a      	str	r2, [r3, #20]
          break;
 800268e:	e003      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x130>
          break;
 8002696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	d801      	bhi.n	80026a2 <HAL_GPIO_Init+0x13a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_Init+0x13e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d802      	bhi.n	80026b4 <HAL_GPIO_Init+0x14c>
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x152>
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3b08      	subs	r3, #8
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	210f      	movs	r1, #15
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80b1 	beq.w	800284a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026e8:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_GPIO_Init+0x1ec>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3f      	ldr	r2, [pc, #252]	; (800282c <HAL_GPIO_Init+0x2c4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00d      	beq.n	8002750 <HAL_GPIO_Init+0x1e8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3e      	ldr	r2, [pc, #248]	; (8002830 <HAL_GPIO_Init+0x2c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <HAL_GPIO_Init+0x1e4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <HAL_GPIO_Init+0x2cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_GPIO_Init+0x1e0>
 8002744:	2303      	movs	r3, #3
 8002746:	e006      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002748:	2304      	movs	r3, #4
 800274a:	e004      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 800274c:	2302      	movs	r3, #2
 800274e:	e002      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002754:	2300      	movs	r3, #0
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	f002 0203 	and.w	r2, r2, #3
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	4093      	lsls	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002766:	492f      	ldr	r1, [pc, #188]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	492c      	ldr	r1, [pc, #176]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	4928      	ldr	r1, [pc, #160]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027a8:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60cb      	str	r3, [r1, #12]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	491e      	ldr	r1, [pc, #120]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4918      	ldr	r1, [pc, #96]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	4914      	ldr	r1, [pc, #80]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d021      	beq.n	800283c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
 8002804:	e021      	b.n	800284a <HAL_GPIO_Init+0x2e2>
 8002806:	bf00      	nop
 8002808:	10320000 	.word	0x10320000
 800280c:	10310000 	.word	0x10310000
 8002810:	10220000 	.word	0x10220000
 8002814:	10210000 	.word	0x10210000
 8002818:	10120000 	.word	0x10120000
 800281c:	10110000 	.word	0x10110000
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	40010800 	.word	0x40010800
 800282c:	40010c00 	.word	0x40010c00
 8002830:	40011000 	.word	0x40011000
 8002834:	40011400 	.word	0x40011400
 8002838:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_GPIO_Init+0x304>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	43db      	mvns	r3, r3
 8002844:	4909      	ldr	r1, [pc, #36]	; (800286c <HAL_GPIO_Init+0x304>)
 8002846:	4013      	ands	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3301      	adds	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f ae8e 	bne.w	800257c <HAL_GPIO_Init+0x14>
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	372c      	adds	r7, #44	; 0x2c
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40010400 	.word	0x40010400

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43d9      	mvns	r1, r3
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	400b      	ands	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e12b      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fcb8 	bl	8001270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002938:	f001 fd1e 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a81      	ldr	r2, [pc, #516]	; (8002b48 <HAL_I2C_Init+0x274>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d807      	bhi.n	8002958 <HAL_I2C_Init+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <HAL_I2C_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e006      	b.n	8002966 <HAL_I2C_Init+0x92>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <HAL_I2C_Init+0x27c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e7      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_I2C_Init+0x280>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_I2C_Init+0x274>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d802      	bhi.n	80029a8 <HAL_I2C_Init+0xd4>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	e009      	b.n	80029bc <HAL_I2C_Init+0xe8>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_I2C_Init+0x284>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	495c      	ldr	r1, [pc, #368]	; (8002b48 <HAL_I2C_Init+0x274>)
 80029d8:	428b      	cmp	r3, r1
 80029da:	d819      	bhi.n	8002a10 <HAL_I2C_Init+0x13c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e59      	subs	r1, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f0:	400b      	ands	r3, r1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_I2C_Init+0x138>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e59      	subs	r1, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	e051      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e04f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d111      	bne.n	8002a3c <HAL_I2C_Init+0x168>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e012      	b.n	8002a62 <HAL_I2C_Init+0x18e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x196>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <HAL_I2C_Init+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e58      	subs	r0, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	440b      	add	r3, r1
 8002a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6911      	ldr	r1, [r2, #16]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	000186a0 	.word	0x000186a0
 8002b4c:	001e847f 	.word	0x001e847f
 8002b50:	003d08ff 	.word	0x003d08ff
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7fe fde3 	bl	8001740 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 80d9 	bne.w	8002d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	496d      	ldr	r1, [pc, #436]	; (8002d48 <HAL_I2C_Mem_Write+0x1ec>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fdef 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0cc      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Mem_Write+0x56>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0c5      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d007      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2221      	movs	r2, #33	; 0x21
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_I2C_Mem_Write+0x1f0>)
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1a:	88f8      	ldrh	r0, [r7, #6]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4603      	mov	r3, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fc26 	bl	800347c <I2C_RequestMemoryWrite>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d052      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e081      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 feb4 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x180>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1aa      	bne.n	8002c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fea7 	bl	8003a3c <I2C_WaitOnBTFFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d107      	bne.n	8002d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e016      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	00100002 	.word	0x00100002
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6e:	f7fe fce7 	bl	8001740 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	f040 8244 	bne.w	800320a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2319      	movs	r3, #25
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4982      	ldr	r1, [pc, #520]	; (8002f94 <HAL_I2C_Mem_Read+0x244>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fcf3 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e237      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Mem_Read+0x5a>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e230      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2222      	movs	r2, #34	; 0x22
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a62      	ldr	r2, [pc, #392]	; (8002f98 <HAL_I2C_Mem_Read+0x248>)
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e12:	88f8      	ldrh	r0, [r7, #6]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fbc0 	bl	80035a8 <I2C_RequestMemoryRead>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1ec      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d113      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e1c0      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d11e      	bne.n	8002ea8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7a:	b672      	cpsid	i
}
 8002e7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea4:	b662      	cpsie	i
}
 8002ea6:	e035      	b.n	8002f14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11e      	bne.n	8002eee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec0:	b672      	cpsid	i
}
 8002ec2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eea:	b662      	cpsie	i
}
 8002eec:	e012      	b.n	8002f14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f14:	e166      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	f200 811f 	bhi.w	800315e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d123      	bne.n	8002f70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fdcd 	bl	8003acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e167      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f6e:	e139      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d152      	bne.n	800301e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4906      	ldr	r1, [pc, #24]	; (8002f9c <HAL_I2C_Mem_Read+0x24c>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fbf8 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e13c      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
 8002f92:	bf00      	nop
 8002f94:	00100002 	.word	0x00100002
 8002f98:	ffff0000 	.word	0xffff0000
 8002f9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fe6:	b662      	cpsie	i
}
 8002fe8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800301c:	e0e2      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2200      	movs	r2, #0
 8003026:	497b      	ldr	r1, [pc, #492]	; (8003214 <HAL_I2C_Mem_Read+0x4c4>)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fba5 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0e9      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003046:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003048:	b672      	cpsid	i
}
 800304a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800307e:	4b66      	ldr	r3, [pc, #408]	; (8003218 <HAL_I2C_Mem_Read+0x4c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	4a65      	ldr	r2, [pc, #404]	; (800321c <HAL_I2C_Mem_Read+0x4cc>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a1a      	lsrs	r2, r3, #8
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00da      	lsls	r2, r3, #3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	3b01      	subs	r3, #1
 800309c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d118      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030c6:	b662      	cpsie	i
}
 80030c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e09a      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d1d9      	bne.n	8003098 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003126:	b662      	cpsie	i
}
 8003128:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800315c:	e042      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fcb2 	bl	8003acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e04c      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d118      	bne.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f ae94 	bne.w	8002f16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3728      	adds	r7, #40	; 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	00010004 	.word	0x00010004
 8003218:	20000000 	.word	0x20000000
 800321c:	14f8b589 	.word	0x14f8b589

08003220 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7fe fa86 	bl	8001740 <HAL_GetTick>
 8003234:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 8111 	bne.w	800346a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	4988      	ldr	r1, [pc, #544]	; (8003474 <HAL_I2C_IsDeviceReady+0x254>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa90 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e104      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_IsDeviceReady+0x50>
 800326c:	2302      	movs	r3, #2
 800326e:	e0fd      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d007      	beq.n	8003296 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2224      	movs	r2, #36	; 0x24
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a70      	ldr	r2, [pc, #448]	; (8003478 <HAL_I2C_IsDeviceReady+0x258>)
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fa4e 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	d103      	bne.n	80032fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0b6      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800330c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe fa17 	bl	8001740 <HAL_GetTick>
 8003312:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003342:	e025      	b.n	8003390 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003344:	f7fe f9fc 	bl	8001740 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d302      	bcc.n	800335a <HAL_I2C_IsDeviceReady+0x13a>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	22a0      	movs	r2, #160	; 0xa0
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2ba0      	cmp	r3, #160	; 0xa0
 800339a:	d005      	beq.n	80033a8 <HAL_I2C_IsDeviceReady+0x188>
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_I2C_IsDeviceReady+0x188>
 80033a2:	7dbb      	ldrb	r3, [r7, #22]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0cd      	beq.n	8003344 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d129      	bne.n	8003412 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2319      	movs	r3, #25
 80033ea:	2201      	movs	r2, #1
 80033ec:	4921      	ldr	r1, [pc, #132]	; (8003474 <HAL_I2C_IsDeviceReady+0x254>)
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f9c2 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e036      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e02c      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2319      	movs	r3, #25
 8003432:	2201      	movs	r2, #1
 8003434:	490f      	ldr	r1, [pc, #60]	; (8003474 <HAL_I2C_IsDeviceReady+0x254>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f99e 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e012      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	3301      	adds	r3, #1
 800344a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	f4ff af32 	bcc.w	80032ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	00100002 	.word	0x00100002
 8003478:	ffff0000 	.word	0xffff0000

0800347c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f960 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034cc:	d103      	bne.n	80034d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e05f      	b.n	800359a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	492d      	ldr	r1, [pc, #180]	; (80035a4 <I2C_RequestMemoryWrite+0x128>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f9bb 	bl	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e04c      	b.n	800359a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fa46 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b04      	cmp	r3, #4
 800352c:	d107      	bne.n	800353e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02b      	b.n	800359a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
 8003552:	e021      	b.n	8003598 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b29b      	uxth	r3, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	6a39      	ldr	r1, [r7, #32]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fa20 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b04      	cmp	r3, #4
 8003578:	d107      	bne.n	800358a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e005      	b.n	800359a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800358e:	893b      	ldrh	r3, [r7, #8]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	00010002 	.word	0x00010002

080035a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f8c2 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d103      	bne.n	8003612 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0aa      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003624:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	4952      	ldr	r1, [pc, #328]	; (8003774 <I2C_RequestMemoryRead+0x1cc>)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f91d 	bl	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e097      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f9a8 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b04      	cmp	r3, #4
 8003668:	d107      	bne.n	800367a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e076      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	e021      	b.n	80036d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a0:	6a39      	ldr	r1, [r7, #32]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f982 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d107      	bne.n	80036c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e050      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ca:	893b      	ldrh	r3, [r7, #8]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	6a39      	ldr	r1, [r7, #32]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f967 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d107      	bne.n	80036fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e035      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f82b 	bl	8003778 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d103      	bne.n	8003740 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e013      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	4906      	ldr	r1, [pc, #24]	; (8003774 <I2C_RequestMemoryRead+0x1cc>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f886 	bl	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010002 	.word	0x00010002

08003778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003788:	e048      	b.n	800381c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d044      	beq.n	800381c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fd ffd5 	bl	8001740 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d139      	bne.n	800381c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10d      	bne.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	e00c      	b.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	43da      	mvns	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d116      	bne.n	800381c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e023      	b.n	8003864 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10d      	bne.n	8003842 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	e00c      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	429a      	cmp	r2, r3
 8003860:	d093      	beq.n	800378a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800387a:	e071      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d123      	bne.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e067      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d041      	beq.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038dc:	f7fd ff30 	bl	8001740 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d136      	bne.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10c      	bne.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4013      	ands	r3, r2
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e00b      	b.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	43da      	mvns	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e021      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10c      	bne.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	43da      	mvns	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e00b      	b.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f af6d 	bne.w	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b8:	e034      	b.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f8e3 	bl	8003b86 <I2C_IsAcknowledgeFailed>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e034      	b.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d028      	beq.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fd feb5 	bl	8001740 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11d      	bne.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d016      	beq.n	8003a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e007      	b.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d1c3      	bne.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a48:	e034      	b.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f89b 	bl	8003b86 <I2C_IsAcknowledgeFailed>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e034      	b.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d028      	beq.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fd fe6d 	bl	8001740 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d016      	beq.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e007      	b.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d1c3      	bne.n	8003a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad8:	e049      	b.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d119      	bne.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0210 	mvn.w	r2, #16
 8003af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e030      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1c:	f7fd fe10 	bl	8001740 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11d      	bne.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d016      	beq.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d1ae      	bne.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9c:	d11b      	bne.n	8003bd6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e272      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8087 	beq.w	8003d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c04:	4b92      	ldr	r3, [pc, #584]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d00c      	beq.n	8003c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c10:	4b8f      	ldr	r3, [pc, #572]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d112      	bne.n	8003c42 <HAL_RCC_OscConfig+0x5e>
 8003c1c:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d10b      	bne.n	8003c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2a:	4b89      	ldr	r3, [pc, #548]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d06c      	beq.n	8003d10 <HAL_RCC_OscConfig+0x12c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d168      	bne.n	8003d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e24c      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x76>
 8003c4c:	4b80      	ldr	r3, [pc, #512]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a7f      	ldr	r2, [pc, #508]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e02e      	b.n	8003cb8 <HAL_RCC_OscConfig+0xd4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x98>
 8003c62:	4b7b      	ldr	r3, [pc, #492]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7a      	ldr	r2, [pc, #488]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b78      	ldr	r3, [pc, #480]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e01d      	b.n	8003cb8 <HAL_RCC_OscConfig+0xd4>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xbc>
 8003c86:	4b72      	ldr	r3, [pc, #456]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a71      	ldr	r2, [pc, #452]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b6f      	ldr	r3, [pc, #444]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6e      	ldr	r2, [pc, #440]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0xd4>
 8003ca0:	4b6b      	ldr	r3, [pc, #428]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a67      	ldr	r2, [pc, #412]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fd3e 	bl	8001740 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fd fd3a 	bl	8001740 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e200      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b5d      	ldr	r3, [pc, #372]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xe4>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fd2a 	bl	8001740 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fd26 	bl	8001740 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1ec      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d02:	4b53      	ldr	r3, [pc, #332]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x10c>
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d063      	beq.n	8003de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d1e:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d2a:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d11c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x18c>
 8003d36:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d116      	bne.n	8003d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_RCC_OscConfig+0x176>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1c0      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4b3d      	ldr	r3, [pc, #244]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4939      	ldr	r1, [pc, #228]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e03a      	b.n	8003de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fcdf 	bl	8001740 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d86:	f7fd fcdb 	bl	8001740 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1a1      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da4:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4927      	ldr	r1, [pc, #156]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
 8003db8:	e015      	b.n	8003de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fcbe 	bl	8001740 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc8:	f7fd fcba 	bl	8001740 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e180      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03a      	beq.n	8003e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e00:	f7fd fc9e 	bl	8001740 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fd fc9a 	bl	8001740 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e160      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e26:	2001      	movs	r0, #1
 8003e28:	f000 face 	bl	80043c8 <RCC_Delay>
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e34:	f7fd fc84 	bl	8001740 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3a:	e00f      	b.n	8003e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3c:	f7fd fc80 	bl	8001740 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d908      	bls.n	8003e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e146      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	42420000 	.word	0x42420000
 8003e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e9      	bne.n	8003e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80a6 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4a87      	ldr	r2, [pc, #540]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	61d3      	str	r3, [r2, #28]
 8003e92:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCC_OscConfig+0x4c8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d118      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eae:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <HAL_RCC_OscConfig+0x4c8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_RCC_OscConfig+0x4c8>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7fd fc41 	bl	8001740 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec2:	f7fd fc3d 	bl	8001740 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b64      	cmp	r3, #100	; 0x64
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e103      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed4:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCC_OscConfig+0x4c8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x312>
 8003ee8:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6213      	str	r3, [r2, #32]
 8003ef4:	e02d      	b.n	8003f52 <HAL_RCC_OscConfig+0x36e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x334>
 8003efe:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4a69      	ldr	r2, [pc, #420]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	6213      	str	r3, [r2, #32]
 8003f0a:	4b67      	ldr	r3, [pc, #412]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4a66      	ldr	r2, [pc, #408]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	6213      	str	r3, [r2, #32]
 8003f16:	e01c      	b.n	8003f52 <HAL_RCC_OscConfig+0x36e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d10c      	bne.n	8003f3a <HAL_RCC_OscConfig+0x356>
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	f043 0304 	orr.w	r3, r3, #4
 8003f2a:	6213      	str	r3, [r2, #32]
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a5d      	ldr	r2, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6213      	str	r3, [r2, #32]
 8003f38:	e00b      	b.n	8003f52 <HAL_RCC_OscConfig+0x36e>
 8003f3a:	4b5b      	ldr	r3, [pc, #364]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a5a      	ldr	r2, [pc, #360]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	4b58      	ldr	r3, [pc, #352]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a57      	ldr	r2, [pc, #348]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d015      	beq.n	8003f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fbf1 	bl	8001740 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fd fbed 	bl	8001740 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e0b1      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ee      	beq.n	8003f62 <HAL_RCC_OscConfig+0x37e>
 8003f84:	e014      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f86:	f7fd fbdb 	bl	8001740 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd fbd7 	bl	8001740 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e09b      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa4:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ee      	bne.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8087 	beq.w	80040da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d061      	beq.n	800409c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d146      	bne.n	800406e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fd fbab 	bl	8001740 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fd fba7 	bl	8001740 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e06d      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d108      	bne.n	8004028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4921      	ldr	r1, [pc, #132]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a19      	ldr	r1, [r3, #32]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	430b      	orrs	r3, r1
 800403a:	491b      	ldr	r1, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004040:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x4cc>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fd fb7b 	bl	8001740 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd fb77 	bl	8001740 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e03d      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x46a>
 800406c:	e035      	b.n	80040da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_RCC_OscConfig+0x4cc>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd fb64 	bl	8001740 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd fb60 	bl	8001740 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e026      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x498>
 800409a:	e01e      	b.n	80040da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e019      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
 80040b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_OscConfig+0x500>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d001      	beq.n	80040da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000

080040e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d0      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b67      	ldr	r3, [pc, #412]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4965      	ldr	r1, [pc, #404]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0b8      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4a58      	ldr	r2, [pc, #352]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800414e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a52      	ldr	r2, [pc, #328]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	494d      	ldr	r1, [pc, #308]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d040      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d115      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07f      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e073      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06b      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4936      	ldr	r1, [pc, #216]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7fd fab2 	bl	8001740 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fd faae 	bl	8001740 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e053      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d210      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 0207 	bic.w	r2, r3, #7
 800421e:	4922      	ldr	r1, [pc, #136]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e032      	b.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4916      	ldr	r1, [pc, #88]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490e      	ldr	r1, [pc, #56]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004276:	f000 f821 	bl	80042bc <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490a      	ldr	r1, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fa10 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	08005a38 	.word	0x08005a38
 80042b4:	20000000 	.word	0x20000000
 80042b8:	20000004 	.word	0x20000004

080042bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <HAL_RCC_GetSysClockFreq+0x94>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x30>
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x36>
 80042ea:	e027      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ee:	613b      	str	r3, [r7, #16]
      break;
 80042f0:	e027      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	0c9b      	lsrs	r3, r3, #18
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042fc:	5cd3      	ldrb	r3, [r2, r3]
 80042fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_RCC_GetSysClockFreq+0x94>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	0c5b      	lsrs	r3, r3, #17
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004316:	5cd3      	ldrb	r3, [r2, r3]
 8004318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <HAL_RCC_GetSysClockFreq+0x98>)
 800431e:	fb03 f202 	mul.w	r2, r3, r2
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e004      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	613b      	str	r3, [r7, #16]
      break;
 800433a:	e002      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetSysClockFreq+0x98>)
 800433e:	613b      	str	r3, [r7, #16]
      break;
 8004340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004342:	693b      	ldr	r3, [r7, #16]
}
 8004344:	4618      	mov	r0, r3
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	007a1200 	.word	0x007a1200
 8004358:	08005a50 	.word	0x08005a50
 800435c:	08005a60 	.word	0x08005a60
 8004360:	003d0900 	.word	0x003d0900

08004364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <HAL_RCC_GetHCLKFreq+0x10>)
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	20000000 	.word	0x20000000

08004378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800437c:	f7ff fff2 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4903      	ldr	r1, [pc, #12]	; (800439c <HAL_RCC_GetPCLK1Freq+0x24>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	08005a48 	.word	0x08005a48

080043a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043a4:	f7ff ffde 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	0adb      	lsrs	r3, r3, #11
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4903      	ldr	r1, [pc, #12]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08005a48 	.word	0x08005a48

080043c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <RCC_Delay+0x34>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <RCC_Delay+0x38>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	0a5b      	lsrs	r3, r3, #9
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043e4:	bf00      	nop
  }
  while (Delay --);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	60fa      	str	r2, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f9      	bne.n	80043e4 <RCC_Delay+0x1c>
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	20000000 	.word	0x20000000
 8004400:	10624dd3 	.word	0x10624dd3

08004404 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d07d      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004424:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10d      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004430:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	4a4b      	ldr	r2, [pc, #300]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443a:	61d3      	str	r3, [r2, #28]
 800443c:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d118      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004458:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a42      	ldr	r2, [pc, #264]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800445e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004462:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004464:	f7fd f96c 	bl	8001740 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	e008      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446c:	f7fd f968 	bl	8001740 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e06d      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d02e      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d027      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a8:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b2:	4b2e      	ldr	r3, [pc, #184]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b8:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044be:	4a29      	ldr	r2, [pc, #164]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d014      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fd f937 	bl	8001740 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fd f933 	bl	8001740 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e036      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ec:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ee      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4917      	ldr	r1, [pc, #92]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	4313      	orrs	r3, r2
 8004508:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4a13      	ldr	r2, [pc, #76]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	490b      	ldr	r1, [pc, #44]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4904      	ldr	r1, [pc, #16]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	40007000 	.word	0x40007000
 800456c:	42420440 	.word	0x42420440

08004570 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b10      	cmp	r3, #16
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b10      	cmp	r3, #16
 8004596:	f200 808a 	bhi.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d045      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d075      	beq.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80045a6:	e082      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80045a8:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80045ae:	4b45      	ldr	r3, [pc, #276]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d07b      	beq.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80045c4:	5cd3      	ldrb	r3, [r2, r3]
 80045c6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d015      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045d2:	4b3c      	ldr	r3, [pc, #240]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	0c5b      	lsrs	r3, r3, #17
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	4a3b      	ldr	r2, [pc, #236]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80045de:	5cd3      	ldrb	r3, [r2, r3]
 80045e0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045ec:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4a34      	ldr	r2, [pc, #208]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004608:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004614:	d102      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	61bb      	str	r3, [r7, #24]
      break;
 800461a:	e04a      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
      break;
 800462a:	e042      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463c:	d108      	bne.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e01f      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465a:	d109      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004668:	f649 4340 	movw	r3, #40000	; 0x9c40
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e00f      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467a:	d11c      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d016      	beq.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004688:	f24f 4324 	movw	r3, #62500	; 0xf424
 800468c:	61bb      	str	r3, [r7, #24]
      break;
 800468e:	e012      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004690:	e011      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004692:	f7ff fe85 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8004696:	4602      	mov	r2, r0
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0b9b      	lsrs	r3, r3, #14
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	61bb      	str	r3, [r7, #24]
      break;
 80046ac:	e004      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046b6:	bf00      	nop
    }
  }
  return (frequency);
 80046b8:	69bb      	ldr	r3, [r7, #24]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	08005a64 	.word	0x08005a64
 80046cc:	08005a74 	.word	0x08005a74
 80046d0:	007a1200 	.word	0x007a1200
 80046d4:	003d0900 	.word	0x003d0900
 80046d8:	aaaaaaab 	.word	0xaaaaaaab

080046dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e076      	b.n	80047dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fe:	d009      	beq.n	8004714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
 8004706:	e005      	b.n	8004714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fddc 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004798:	ea42 0103 	orr.w	r1, r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	0c1a      	lsrs	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f002 0204 	and.w	r2, r2, #4
 80047ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e042      	b.n	800487c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fdb8 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f91d 	bl	8004a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800483c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d16d      	bne.n	8004980 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Transmit+0x2c>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e066      	b.n	8004982 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2221      	movs	r2, #33	; 0x21
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048c2:	f7fc ff3d 	bl	8001740 <HAL_GetTick>
 80048c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	88fa      	ldrh	r2, [r7, #6]
 80048d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d108      	bne.n	80048f0 <HAL_UART_Transmit+0x6c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e003      	b.n	80048f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048f8:	e02a      	b.n	8004950 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f840 	bl	800498a <UART_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e036      	b.n	8004982 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	3302      	adds	r3, #2
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e007      	b.n	8004942 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3301      	adds	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1cf      	bne.n	80048fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2140      	movs	r1, #64	; 0x40
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f810 	bl	800498a <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e006      	b.n	8004982 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b090      	sub	sp, #64	; 0x40
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	e050      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d04c      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0x30>
 80049aa:	f7fc fec9 	bl	8001740 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d241      	bcs.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049da:	637a      	str	r2, [r7, #52]	; 0x34
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e5      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	e853 3f00 	ldrex	r3, [r3]
 80049fc:	613b      	str	r3, [r7, #16]
   return(result);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0e:	623a      	str	r2, [r7, #32]
 8004a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	69f9      	ldr	r1, [r7, #28]
 8004a14:	6a3a      	ldr	r2, [r7, #32]
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e5      	bne.n	80049ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e00f      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d09f      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3740      	adds	r7, #64	; 0x40
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004aa2:	f023 030c 	bic.w	r3, r3, #12
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <UART_SetConfig+0x114>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d103      	bne.n	8004ad8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7ff fc66 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	e002      	b.n	8004ade <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7ff fc4e 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 8004adc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009a      	lsls	r2, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <UART_SetConfig+0x118>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	0119      	lsls	r1, r3, #4
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009a      	lsls	r2, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <UART_SetConfig+0x118>)
 8004b16:	fba3 0302 	umull	r0, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2064      	movs	r0, #100	; 0x64
 8004b1e:	fb00 f303 	mul.w	r3, r0, r3
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	3332      	adds	r3, #50	; 0x32
 8004b28:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <UART_SetConfig+0x118>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b34:	4419      	add	r1, r3
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009a      	lsls	r2, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <UART_SetConfig+0x118>)
 8004b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2064      	movs	r0, #100	; 0x64
 8004b56:	fb00 f303 	mul.w	r3, r0, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	3332      	adds	r3, #50	; 0x32
 8004b60:	4a07      	ldr	r2, [pc, #28]	; (8004b80 <UART_SetConfig+0x118>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	f003 020f 	and.w	r2, r3, #15
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	440a      	add	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40013800 	.word	0x40013800
 8004b80:	51eb851f 	.word	0x51eb851f

08004b84 <std>:
 8004b84:	2300      	movs	r3, #0
 8004b86:	b510      	push	{r4, lr}
 8004b88:	4604      	mov	r4, r0
 8004b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b92:	6083      	str	r3, [r0, #8]
 8004b94:	8181      	strh	r1, [r0, #12]
 8004b96:	6643      	str	r3, [r0, #100]	; 0x64
 8004b98:	81c2      	strh	r2, [r0, #14]
 8004b9a:	6183      	str	r3, [r0, #24]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	305c      	adds	r0, #92	; 0x5c
 8004ba2:	f000 f906 	bl	8004db2 <memset>
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <std+0x58>)
 8004ba8:	6224      	str	r4, [r4, #32]
 8004baa:	6263      	str	r3, [r4, #36]	; 0x24
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <std+0x5c>)
 8004bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <std+0x60>)
 8004bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <std+0x64>)
 8004bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <std+0x68>)
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d006      	beq.n	8004bcc <std+0x48>
 8004bbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bc2:	4294      	cmp	r4, r2
 8004bc4:	d002      	beq.n	8004bcc <std+0x48>
 8004bc6:	33d0      	adds	r3, #208	; 0xd0
 8004bc8:	429c      	cmp	r4, r3
 8004bca:	d105      	bne.n	8004bd8 <std+0x54>
 8004bcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd4:	f000 b966 	b.w	8004ea4 <__retarget_lock_init_recursive>
 8004bd8:	bd10      	pop	{r4, pc}
 8004bda:	bf00      	nop
 8004bdc:	08004d2d 	.word	0x08004d2d
 8004be0:	08004d4f 	.word	0x08004d4f
 8004be4:	08004d87 	.word	0x08004d87
 8004be8:	08004dab 	.word	0x08004dab
 8004bec:	20000234 	.word	0x20000234

08004bf0 <stdio_exit_handler>:
 8004bf0:	4a02      	ldr	r2, [pc, #8]	; (8004bfc <stdio_exit_handler+0xc>)
 8004bf2:	4903      	ldr	r1, [pc, #12]	; (8004c00 <stdio_exit_handler+0x10>)
 8004bf4:	4803      	ldr	r0, [pc, #12]	; (8004c04 <stdio_exit_handler+0x14>)
 8004bf6:	f000 b869 	b.w	8004ccc <_fwalk_sglue>
 8004bfa:	bf00      	nop
 8004bfc:	2000000c 	.word	0x2000000c
 8004c00:	08005745 	.word	0x08005745
 8004c04:	20000018 	.word	0x20000018

08004c08 <cleanup_stdio>:
 8004c08:	6841      	ldr	r1, [r0, #4]
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <cleanup_stdio+0x34>)
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	4299      	cmp	r1, r3
 8004c10:	4604      	mov	r4, r0
 8004c12:	d001      	beq.n	8004c18 <cleanup_stdio+0x10>
 8004c14:	f000 fd96 	bl	8005744 <_fflush_r>
 8004c18:	68a1      	ldr	r1, [r4, #8]
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <cleanup_stdio+0x38>)
 8004c1c:	4299      	cmp	r1, r3
 8004c1e:	d002      	beq.n	8004c26 <cleanup_stdio+0x1e>
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 fd8f 	bl	8005744 <_fflush_r>
 8004c26:	68e1      	ldr	r1, [r4, #12]
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <cleanup_stdio+0x3c>)
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	d004      	beq.n	8004c38 <cleanup_stdio+0x30>
 8004c2e:	4620      	mov	r0, r4
 8004c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c34:	f000 bd86 	b.w	8005744 <_fflush_r>
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000234 	.word	0x20000234
 8004c40:	2000029c 	.word	0x2000029c
 8004c44:	20000304 	.word	0x20000304

08004c48 <global_stdio_init.part.0>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <global_stdio_init.part.0+0x30>)
 8004c4c:	4c0b      	ldr	r4, [pc, #44]	; (8004c7c <global_stdio_init.part.0+0x34>)
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <global_stdio_init.part.0+0x38>)
 8004c50:	4620      	mov	r0, r4
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	2104      	movs	r1, #4
 8004c56:	2200      	movs	r2, #0
 8004c58:	f7ff ff94 	bl	8004b84 <std>
 8004c5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c60:	2201      	movs	r2, #1
 8004c62:	2109      	movs	r1, #9
 8004c64:	f7ff ff8e 	bl	8004b84 <std>
 8004c68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c72:	2112      	movs	r1, #18
 8004c74:	f7ff bf86 	b.w	8004b84 <std>
 8004c78:	2000036c 	.word	0x2000036c
 8004c7c:	20000234 	.word	0x20000234
 8004c80:	08004bf1 	.word	0x08004bf1

08004c84 <__sfp_lock_acquire>:
 8004c84:	4801      	ldr	r0, [pc, #4]	; (8004c8c <__sfp_lock_acquire+0x8>)
 8004c86:	f000 b90e 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	20000375 	.word	0x20000375

08004c90 <__sfp_lock_release>:
 8004c90:	4801      	ldr	r0, [pc, #4]	; (8004c98 <__sfp_lock_release+0x8>)
 8004c92:	f000 b909 	b.w	8004ea8 <__retarget_lock_release_recursive>
 8004c96:	bf00      	nop
 8004c98:	20000375 	.word	0x20000375

08004c9c <__sinit>:
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	f7ff fff0 	bl	8004c84 <__sfp_lock_acquire>
 8004ca4:	6a23      	ldr	r3, [r4, #32]
 8004ca6:	b11b      	cbz	r3, 8004cb0 <__sinit+0x14>
 8004ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cac:	f7ff bff0 	b.w	8004c90 <__sfp_lock_release>
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <__sinit+0x28>)
 8004cb2:	6223      	str	r3, [r4, #32]
 8004cb4:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <__sinit+0x2c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f5      	bne.n	8004ca8 <__sinit+0xc>
 8004cbc:	f7ff ffc4 	bl	8004c48 <global_stdio_init.part.0>
 8004cc0:	e7f2      	b.n	8004ca8 <__sinit+0xc>
 8004cc2:	bf00      	nop
 8004cc4:	08004c09 	.word	0x08004c09
 8004cc8:	2000036c 	.word	0x2000036c

08004ccc <_fwalk_sglue>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	4607      	mov	r7, r0
 8004cd2:	4688      	mov	r8, r1
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8004ce0:	d505      	bpl.n	8004cee <_fwalk_sglue+0x22>
 8004ce2:	6824      	ldr	r4, [r4, #0]
 8004ce4:	2c00      	cmp	r4, #0
 8004ce6:	d1f7      	bne.n	8004cd8 <_fwalk_sglue+0xc>
 8004ce8:	4630      	mov	r0, r6
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d907      	bls.n	8004d04 <_fwalk_sglue+0x38>
 8004cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	d003      	beq.n	8004d04 <_fwalk_sglue+0x38>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4638      	mov	r0, r7
 8004d00:	47c0      	blx	r8
 8004d02:	4306      	orrs	r6, r0
 8004d04:	3568      	adds	r5, #104	; 0x68
 8004d06:	e7e9      	b.n	8004cdc <_fwalk_sglue+0x10>

08004d08 <iprintf>:
 8004d08:	b40f      	push	{r0, r1, r2, r3}
 8004d0a:	b507      	push	{r0, r1, r2, lr}
 8004d0c:	4906      	ldr	r1, [pc, #24]	; (8004d28 <iprintf+0x20>)
 8004d0e:	ab04      	add	r3, sp, #16
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d16:	6881      	ldr	r1, [r0, #8]
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	f000 f9e3 	bl	80050e4 <_vfiprintf_r>
 8004d1e:	b003      	add	sp, #12
 8004d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d24:	b004      	add	sp, #16
 8004d26:	4770      	bx	lr
 8004d28:	20000064 	.word	0x20000064

08004d2c <__sread>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	f000 f868 	bl	8004e08 <_read_r>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	bfab      	itete	ge
 8004d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d40:	181b      	addge	r3, r3, r0
 8004d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d46:	bfac      	ite	ge
 8004d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d4a:	81a3      	strhlt	r3, [r4, #12]
 8004d4c:	bd10      	pop	{r4, pc}

08004d4e <__swrite>:
 8004d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d52:	461f      	mov	r7, r3
 8004d54:	898b      	ldrh	r3, [r1, #12]
 8004d56:	4605      	mov	r5, r0
 8004d58:	05db      	lsls	r3, r3, #23
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	d505      	bpl.n	8004d6c <__swrite+0x1e>
 8004d60:	2302      	movs	r3, #2
 8004d62:	2200      	movs	r2, #0
 8004d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d68:	f000 f83c 	bl	8004de4 <_lseek_r>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	4632      	mov	r2, r6
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	4628      	mov	r0, r5
 8004d78:	463b      	mov	r3, r7
 8004d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d82:	f000 b853 	b.w	8004e2c <_write_r>

08004d86 <__sseek>:
 8004d86:	b510      	push	{r4, lr}
 8004d88:	460c      	mov	r4, r1
 8004d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8e:	f000 f829 	bl	8004de4 <_lseek_r>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	bf15      	itete	ne
 8004d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004da2:	81a3      	strheq	r3, [r4, #12]
 8004da4:	bf18      	it	ne
 8004da6:	81a3      	strhne	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__sclose>:
 8004daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dae:	f000 b809 	b.w	8004dc4 <_close_r>

08004db2 <memset>:
 8004db2:	4603      	mov	r3, r0
 8004db4:	4402      	add	r2, r0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d100      	bne.n	8004dbc <memset+0xa>
 8004dba:	4770      	bx	lr
 8004dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc0:	e7f9      	b.n	8004db6 <memset+0x4>
	...

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4d05      	ldr	r5, [pc, #20]	; (8004de0 <_close_r+0x1c>)
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fbba 	bl	8001548 <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20000370 	.word	0x20000370

08004de4 <_lseek_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	2200      	movs	r2, #0
 8004dee:	4d05      	ldr	r5, [pc, #20]	; (8004e04 <_lseek_r+0x20>)
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fc fbcc 	bl	8001590 <_lseek>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_lseek_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_lseek_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000370 	.word	0x20000370

08004e08 <_read_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	2200      	movs	r2, #0
 8004e12:	4d05      	ldr	r5, [pc, #20]	; (8004e28 <_read_r+0x20>)
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc fb5d 	bl	80014d6 <_read>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_read_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_read_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000370 	.word	0x20000370

08004e2c <_write_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	2200      	movs	r2, #0
 8004e36:	4d05      	ldr	r5, [pc, #20]	; (8004e4c <_write_r+0x20>)
 8004e38:	602a      	str	r2, [r5, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7fc fb68 	bl	8001510 <_write>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_write_r+0x1e>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_write_r+0x1e>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000370 	.word	0x20000370

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	; (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000064 	.word	0x20000064

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	2600      	movs	r6, #0
 8004e60:	4d0c      	ldr	r5, [pc, #48]	; (8004e94 <__libc_init_array+0x38>)
 8004e62:	4c0d      	ldr	r4, [pc, #52]	; (8004e98 <__libc_init_array+0x3c>)
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	f000 fdca 	bl	8005a04 <_init>
 8004e70:	2600      	movs	r6, #0
 8004e72:	4d0a      	ldr	r5, [pc, #40]	; (8004e9c <__libc_init_array+0x40>)
 8004e74:	4c0a      	ldr	r4, [pc, #40]	; (8004ea0 <__libc_init_array+0x44>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08005aac 	.word	0x08005aac
 8004e98:	08005aac 	.word	0x08005aac
 8004e9c:	08005aac 	.word	0x08005aac
 8004ea0:	08005ab0 	.word	0x08005ab0

08004ea4 <__retarget_lock_init_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_acquire_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__retarget_lock_release_recursive>:
 8004ea8:	4770      	bx	lr
	...

08004eac <_free_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4605      	mov	r5, r0
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d040      	beq.n	8004f36 <_free_r+0x8a>
 8004eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb8:	1f0c      	subs	r4, r1, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bfb8      	it	lt
 8004ebe:	18e4      	addlt	r4, r4, r3
 8004ec0:	f000 f8dc 	bl	800507c <__malloc_lock>
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <_free_r+0x8c>)
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	b933      	cbnz	r3, 8004ed8 <_free_r+0x2c>
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	6014      	str	r4, [r2, #0]
 8004ece:	4628      	mov	r0, r5
 8004ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed4:	f000 b8d8 	b.w	8005088 <__malloc_unlock>
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	d908      	bls.n	8004eee <_free_r+0x42>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	1821      	adds	r1, r4, r0
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	bf01      	itttt	eq
 8004ee4:	6819      	ldreq	r1, [r3, #0]
 8004ee6:	685b      	ldreq	r3, [r3, #4]
 8004ee8:	1809      	addeq	r1, r1, r0
 8004eea:	6021      	streq	r1, [r4, #0]
 8004eec:	e7ed      	b.n	8004eca <_free_r+0x1e>
 8004eee:	461a      	mov	r2, r3
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b10b      	cbz	r3, 8004ef8 <_free_r+0x4c>
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	d9fa      	bls.n	8004eee <_free_r+0x42>
 8004ef8:	6811      	ldr	r1, [r2, #0]
 8004efa:	1850      	adds	r0, r2, r1
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d10b      	bne.n	8004f18 <_free_r+0x6c>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	4401      	add	r1, r0
 8004f04:	1850      	adds	r0, r2, r1
 8004f06:	4283      	cmp	r3, r0
 8004f08:	6011      	str	r1, [r2, #0]
 8004f0a:	d1e0      	bne.n	8004ece <_free_r+0x22>
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4408      	add	r0, r1
 8004f12:	6010      	str	r0, [r2, #0]
 8004f14:	6053      	str	r3, [r2, #4]
 8004f16:	e7da      	b.n	8004ece <_free_r+0x22>
 8004f18:	d902      	bls.n	8004f20 <_free_r+0x74>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	e7d6      	b.n	8004ece <_free_r+0x22>
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	1821      	adds	r1, r4, r0
 8004f24:	428b      	cmp	r3, r1
 8004f26:	bf01      	itttt	eq
 8004f28:	6819      	ldreq	r1, [r3, #0]
 8004f2a:	685b      	ldreq	r3, [r3, #4]
 8004f2c:	1809      	addeq	r1, r1, r0
 8004f2e:	6021      	streq	r1, [r4, #0]
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	6054      	str	r4, [r2, #4]
 8004f34:	e7cb      	b.n	8004ece <_free_r+0x22>
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000378 	.word	0x20000378

08004f3c <sbrk_aligned>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4e0e      	ldr	r6, [pc, #56]	; (8004f78 <sbrk_aligned+0x3c>)
 8004f40:	460c      	mov	r4, r1
 8004f42:	6831      	ldr	r1, [r6, #0]
 8004f44:	4605      	mov	r5, r0
 8004f46:	b911      	cbnz	r1, 8004f4e <sbrk_aligned+0x12>
 8004f48:	f000 fcba 	bl	80058c0 <_sbrk_r>
 8004f4c:	6030      	str	r0, [r6, #0]
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 fcb5 	bl	80058c0 <_sbrk_r>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	d00a      	beq.n	8004f70 <sbrk_aligned+0x34>
 8004f5a:	1cc4      	adds	r4, r0, #3
 8004f5c:	f024 0403 	bic.w	r4, r4, #3
 8004f60:	42a0      	cmp	r0, r4
 8004f62:	d007      	beq.n	8004f74 <sbrk_aligned+0x38>
 8004f64:	1a21      	subs	r1, r4, r0
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fcaa 	bl	80058c0 <_sbrk_r>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d101      	bne.n	8004f74 <sbrk_aligned+0x38>
 8004f70:	f04f 34ff 	mov.w	r4, #4294967295
 8004f74:	4620      	mov	r0, r4
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	2000037c 	.word	0x2000037c

08004f7c <_malloc_r>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	1ccd      	adds	r5, r1, #3
 8004f82:	f025 0503 	bic.w	r5, r5, #3
 8004f86:	3508      	adds	r5, #8
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	bf38      	it	cc
 8004f8c:	250c      	movcc	r5, #12
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	4607      	mov	r7, r0
 8004f92:	db01      	blt.n	8004f98 <_malloc_r+0x1c>
 8004f94:	42a9      	cmp	r1, r5
 8004f96:	d905      	bls.n	8004fa4 <_malloc_r+0x28>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	2600      	movs	r6, #0
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005078 <_malloc_r+0xfc>
 8004fa8:	f000 f868 	bl	800507c <__malloc_lock>
 8004fac:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb0:	461c      	mov	r4, r3
 8004fb2:	bb5c      	cbnz	r4, 800500c <_malloc_r+0x90>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f7ff ffc0 	bl	8004f3c <sbrk_aligned>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	d155      	bne.n	800506e <_malloc_r+0xf2>
 8004fc2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fc6:	4626      	mov	r6, r4
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	d145      	bne.n	8005058 <_malloc_r+0xdc>
 8004fcc:	2c00      	cmp	r4, #0
 8004fce:	d048      	beq.n	8005062 <_malloc_r+0xe6>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	eb04 0903 	add.w	r9, r4, r3
 8004fda:	f000 fc71 	bl	80058c0 <_sbrk_r>
 8004fde:	4581      	cmp	r9, r0
 8004fe0:	d13f      	bne.n	8005062 <_malloc_r+0xe6>
 8004fe2:	6821      	ldr	r1, [r4, #0]
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	1a6d      	subs	r5, r5, r1
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7ff ffa7 	bl	8004f3c <sbrk_aligned>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d037      	beq.n	8005062 <_malloc_r+0xe6>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	442b      	add	r3, r5
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d038      	beq.n	8005072 <_malloc_r+0xf6>
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	42a2      	cmp	r2, r4
 8005004:	d12b      	bne.n	800505e <_malloc_r+0xe2>
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e00f      	b.n	800502c <_malloc_r+0xb0>
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	1b52      	subs	r2, r2, r5
 8005010:	d41f      	bmi.n	8005052 <_malloc_r+0xd6>
 8005012:	2a0b      	cmp	r2, #11
 8005014:	d917      	bls.n	8005046 <_malloc_r+0xca>
 8005016:	1961      	adds	r1, r4, r5
 8005018:	42a3      	cmp	r3, r4
 800501a:	6025      	str	r5, [r4, #0]
 800501c:	bf18      	it	ne
 800501e:	6059      	strne	r1, [r3, #4]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	bf08      	it	eq
 8005024:	f8c8 1000 	streq.w	r1, [r8]
 8005028:	5162      	str	r2, [r4, r5]
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	4638      	mov	r0, r7
 800502e:	f104 060b 	add.w	r6, r4, #11
 8005032:	f000 f829 	bl	8005088 <__malloc_unlock>
 8005036:	f026 0607 	bic.w	r6, r6, #7
 800503a:	1d23      	adds	r3, r4, #4
 800503c:	1af2      	subs	r2, r6, r3
 800503e:	d0ae      	beq.n	8004f9e <_malloc_r+0x22>
 8005040:	1b9b      	subs	r3, r3, r6
 8005042:	50a3      	str	r3, [r4, r2]
 8005044:	e7ab      	b.n	8004f9e <_malloc_r+0x22>
 8005046:	42a3      	cmp	r3, r4
 8005048:	6862      	ldr	r2, [r4, #4]
 800504a:	d1dd      	bne.n	8005008 <_malloc_r+0x8c>
 800504c:	f8c8 2000 	str.w	r2, [r8]
 8005050:	e7ec      	b.n	800502c <_malloc_r+0xb0>
 8005052:	4623      	mov	r3, r4
 8005054:	6864      	ldr	r4, [r4, #4]
 8005056:	e7ac      	b.n	8004fb2 <_malloc_r+0x36>
 8005058:	4634      	mov	r4, r6
 800505a:	6876      	ldr	r6, [r6, #4]
 800505c:	e7b4      	b.n	8004fc8 <_malloc_r+0x4c>
 800505e:	4613      	mov	r3, r2
 8005060:	e7cc      	b.n	8004ffc <_malloc_r+0x80>
 8005062:	230c      	movs	r3, #12
 8005064:	4638      	mov	r0, r7
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	f000 f80e 	bl	8005088 <__malloc_unlock>
 800506c:	e797      	b.n	8004f9e <_malloc_r+0x22>
 800506e:	6025      	str	r5, [r4, #0]
 8005070:	e7dc      	b.n	800502c <_malloc_r+0xb0>
 8005072:	605b      	str	r3, [r3, #4]
 8005074:	deff      	udf	#255	; 0xff
 8005076:	bf00      	nop
 8005078:	20000378 	.word	0x20000378

0800507c <__malloc_lock>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__malloc_lock+0x8>)
 800507e:	f7ff bf12 	b.w	8004ea6 <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	20000374 	.word	0x20000374

08005088 <__malloc_unlock>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__malloc_unlock+0x8>)
 800508a:	f7ff bf0d 	b.w	8004ea8 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	20000374 	.word	0x20000374

08005094 <__sfputc_r>:
 8005094:	6893      	ldr	r3, [r2, #8]
 8005096:	b410      	push	{r4}
 8005098:	3b01      	subs	r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	6093      	str	r3, [r2, #8]
 800509e:	da07      	bge.n	80050b0 <__sfputc_r+0x1c>
 80050a0:	6994      	ldr	r4, [r2, #24]
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	db01      	blt.n	80050aa <__sfputc_r+0x16>
 80050a6:	290a      	cmp	r1, #10
 80050a8:	d102      	bne.n	80050b0 <__sfputc_r+0x1c>
 80050aa:	bc10      	pop	{r4}
 80050ac:	f000 bb72 	b.w	8005794 <__swbuf_r>
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	1c58      	adds	r0, r3, #1
 80050b4:	6010      	str	r0, [r2, #0]
 80050b6:	7019      	strb	r1, [r3, #0]
 80050b8:	4608      	mov	r0, r1
 80050ba:	bc10      	pop	{r4}
 80050bc:	4770      	bx	lr

080050be <__sfputs_r>:
 80050be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c0:	4606      	mov	r6, r0
 80050c2:	460f      	mov	r7, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	18d5      	adds	r5, r2, r3
 80050c8:	42ac      	cmp	r4, r5
 80050ca:	d101      	bne.n	80050d0 <__sfputs_r+0x12>
 80050cc:	2000      	movs	r0, #0
 80050ce:	e007      	b.n	80050e0 <__sfputs_r+0x22>
 80050d0:	463a      	mov	r2, r7
 80050d2:	4630      	mov	r0, r6
 80050d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d8:	f7ff ffdc 	bl	8005094 <__sfputc_r>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d1f3      	bne.n	80050c8 <__sfputs_r+0xa>
 80050e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050e4 <_vfiprintf_r>:
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	460d      	mov	r5, r1
 80050ea:	4614      	mov	r4, r2
 80050ec:	4698      	mov	r8, r3
 80050ee:	4606      	mov	r6, r0
 80050f0:	b09d      	sub	sp, #116	; 0x74
 80050f2:	b118      	cbz	r0, 80050fc <_vfiprintf_r+0x18>
 80050f4:	6a03      	ldr	r3, [r0, #32]
 80050f6:	b90b      	cbnz	r3, 80050fc <_vfiprintf_r+0x18>
 80050f8:	f7ff fdd0 	bl	8004c9c <__sinit>
 80050fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050fe:	07d9      	lsls	r1, r3, #31
 8005100:	d405      	bmi.n	800510e <_vfiprintf_r+0x2a>
 8005102:	89ab      	ldrh	r3, [r5, #12]
 8005104:	059a      	lsls	r2, r3, #22
 8005106:	d402      	bmi.n	800510e <_vfiprintf_r+0x2a>
 8005108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800510a:	f7ff fecc 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	071b      	lsls	r3, r3, #28
 8005112:	d501      	bpl.n	8005118 <_vfiprintf_r+0x34>
 8005114:	692b      	ldr	r3, [r5, #16]
 8005116:	b99b      	cbnz	r3, 8005140 <_vfiprintf_r+0x5c>
 8005118:	4629      	mov	r1, r5
 800511a:	4630      	mov	r0, r6
 800511c:	f000 fb78 	bl	8005810 <__swsetup_r>
 8005120:	b170      	cbz	r0, 8005140 <_vfiprintf_r+0x5c>
 8005122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005124:	07dc      	lsls	r4, r3, #31
 8005126:	d504      	bpl.n	8005132 <_vfiprintf_r+0x4e>
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	b01d      	add	sp, #116	; 0x74
 800512e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005132:	89ab      	ldrh	r3, [r5, #12]
 8005134:	0598      	lsls	r0, r3, #22
 8005136:	d4f7      	bmi.n	8005128 <_vfiprintf_r+0x44>
 8005138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800513a:	f7ff feb5 	bl	8004ea8 <__retarget_lock_release_recursive>
 800513e:	e7f3      	b.n	8005128 <_vfiprintf_r+0x44>
 8005140:	2300      	movs	r3, #0
 8005142:	9309      	str	r3, [sp, #36]	; 0x24
 8005144:	2320      	movs	r3, #32
 8005146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800514a:	2330      	movs	r3, #48	; 0x30
 800514c:	f04f 0901 	mov.w	r9, #1
 8005150:	f8cd 800c 	str.w	r8, [sp, #12]
 8005154:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005304 <_vfiprintf_r+0x220>
 8005158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800515c:	4623      	mov	r3, r4
 800515e:	469a      	mov	sl, r3
 8005160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005164:	b10a      	cbz	r2, 800516a <_vfiprintf_r+0x86>
 8005166:	2a25      	cmp	r2, #37	; 0x25
 8005168:	d1f9      	bne.n	800515e <_vfiprintf_r+0x7a>
 800516a:	ebba 0b04 	subs.w	fp, sl, r4
 800516e:	d00b      	beq.n	8005188 <_vfiprintf_r+0xa4>
 8005170:	465b      	mov	r3, fp
 8005172:	4622      	mov	r2, r4
 8005174:	4629      	mov	r1, r5
 8005176:	4630      	mov	r0, r6
 8005178:	f7ff ffa1 	bl	80050be <__sfputs_r>
 800517c:	3001      	adds	r0, #1
 800517e:	f000 80a9 	beq.w	80052d4 <_vfiprintf_r+0x1f0>
 8005182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005184:	445a      	add	r2, fp
 8005186:	9209      	str	r2, [sp, #36]	; 0x24
 8005188:	f89a 3000 	ldrb.w	r3, [sl]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80a1 	beq.w	80052d4 <_vfiprintf_r+0x1f0>
 8005192:	2300      	movs	r3, #0
 8005194:	f04f 32ff 	mov.w	r2, #4294967295
 8005198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800519c:	f10a 0a01 	add.w	sl, sl, #1
 80051a0:	9304      	str	r3, [sp, #16]
 80051a2:	9307      	str	r3, [sp, #28]
 80051a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051a8:	931a      	str	r3, [sp, #104]	; 0x68
 80051aa:	4654      	mov	r4, sl
 80051ac:	2205      	movs	r2, #5
 80051ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b2:	4854      	ldr	r0, [pc, #336]	; (8005304 <_vfiprintf_r+0x220>)
 80051b4:	f000 fb94 	bl	80058e0 <memchr>
 80051b8:	9a04      	ldr	r2, [sp, #16]
 80051ba:	b9d8      	cbnz	r0, 80051f4 <_vfiprintf_r+0x110>
 80051bc:	06d1      	lsls	r1, r2, #27
 80051be:	bf44      	itt	mi
 80051c0:	2320      	movmi	r3, #32
 80051c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c6:	0713      	lsls	r3, r2, #28
 80051c8:	bf44      	itt	mi
 80051ca:	232b      	movmi	r3, #43	; 0x2b
 80051cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051d0:	f89a 3000 	ldrb.w	r3, [sl]
 80051d4:	2b2a      	cmp	r3, #42	; 0x2a
 80051d6:	d015      	beq.n	8005204 <_vfiprintf_r+0x120>
 80051d8:	4654      	mov	r4, sl
 80051da:	2000      	movs	r0, #0
 80051dc:	f04f 0c0a 	mov.w	ip, #10
 80051e0:	9a07      	ldr	r2, [sp, #28]
 80051e2:	4621      	mov	r1, r4
 80051e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051e8:	3b30      	subs	r3, #48	; 0x30
 80051ea:	2b09      	cmp	r3, #9
 80051ec:	d94d      	bls.n	800528a <_vfiprintf_r+0x1a6>
 80051ee:	b1b0      	cbz	r0, 800521e <_vfiprintf_r+0x13a>
 80051f0:	9207      	str	r2, [sp, #28]
 80051f2:	e014      	b.n	800521e <_vfiprintf_r+0x13a>
 80051f4:	eba0 0308 	sub.w	r3, r0, r8
 80051f8:	fa09 f303 	lsl.w	r3, r9, r3
 80051fc:	4313      	orrs	r3, r2
 80051fe:	46a2      	mov	sl, r4
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	e7d2      	b.n	80051aa <_vfiprintf_r+0xc6>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	1d19      	adds	r1, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	9103      	str	r1, [sp, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	bfbb      	ittet	lt
 8005210:	425b      	neglt	r3, r3
 8005212:	f042 0202 	orrlt.w	r2, r2, #2
 8005216:	9307      	strge	r3, [sp, #28]
 8005218:	9307      	strlt	r3, [sp, #28]
 800521a:	bfb8      	it	lt
 800521c:	9204      	strlt	r2, [sp, #16]
 800521e:	7823      	ldrb	r3, [r4, #0]
 8005220:	2b2e      	cmp	r3, #46	; 0x2e
 8005222:	d10c      	bne.n	800523e <_vfiprintf_r+0x15a>
 8005224:	7863      	ldrb	r3, [r4, #1]
 8005226:	2b2a      	cmp	r3, #42	; 0x2a
 8005228:	d134      	bne.n	8005294 <_vfiprintf_r+0x1b0>
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	3402      	adds	r4, #2
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	9203      	str	r2, [sp, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	bfb8      	it	lt
 8005238:	f04f 33ff 	movlt.w	r3, #4294967295
 800523c:	9305      	str	r3, [sp, #20]
 800523e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005308 <_vfiprintf_r+0x224>
 8005242:	2203      	movs	r2, #3
 8005244:	4650      	mov	r0, sl
 8005246:	7821      	ldrb	r1, [r4, #0]
 8005248:	f000 fb4a 	bl	80058e0 <memchr>
 800524c:	b138      	cbz	r0, 800525e <_vfiprintf_r+0x17a>
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	9b04      	ldr	r3, [sp, #16]
 8005252:	eba0 000a 	sub.w	r0, r0, sl
 8005256:	4082      	lsls	r2, r0
 8005258:	4313      	orrs	r3, r2
 800525a:	3401      	adds	r4, #1
 800525c:	9304      	str	r3, [sp, #16]
 800525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005262:	2206      	movs	r2, #6
 8005264:	4829      	ldr	r0, [pc, #164]	; (800530c <_vfiprintf_r+0x228>)
 8005266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800526a:	f000 fb39 	bl	80058e0 <memchr>
 800526e:	2800      	cmp	r0, #0
 8005270:	d03f      	beq.n	80052f2 <_vfiprintf_r+0x20e>
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <_vfiprintf_r+0x22c>)
 8005274:	bb1b      	cbnz	r3, 80052be <_vfiprintf_r+0x1da>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	3307      	adds	r3, #7
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	3308      	adds	r3, #8
 8005280:	9303      	str	r3, [sp, #12]
 8005282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005284:	443b      	add	r3, r7
 8005286:	9309      	str	r3, [sp, #36]	; 0x24
 8005288:	e768      	b.n	800515c <_vfiprintf_r+0x78>
 800528a:	460c      	mov	r4, r1
 800528c:	2001      	movs	r0, #1
 800528e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005292:	e7a6      	b.n	80051e2 <_vfiprintf_r+0xfe>
 8005294:	2300      	movs	r3, #0
 8005296:	f04f 0c0a 	mov.w	ip, #10
 800529a:	4619      	mov	r1, r3
 800529c:	3401      	adds	r4, #1
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4620      	mov	r0, r4
 80052a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a6:	3a30      	subs	r2, #48	; 0x30
 80052a8:	2a09      	cmp	r2, #9
 80052aa:	d903      	bls.n	80052b4 <_vfiprintf_r+0x1d0>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0c6      	beq.n	800523e <_vfiprintf_r+0x15a>
 80052b0:	9105      	str	r1, [sp, #20]
 80052b2:	e7c4      	b.n	800523e <_vfiprintf_r+0x15a>
 80052b4:	4604      	mov	r4, r0
 80052b6:	2301      	movs	r3, #1
 80052b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80052bc:	e7f0      	b.n	80052a0 <_vfiprintf_r+0x1bc>
 80052be:	ab03      	add	r3, sp, #12
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	462a      	mov	r2, r5
 80052c4:	4630      	mov	r0, r6
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <_vfiprintf_r+0x230>)
 80052c8:	a904      	add	r1, sp, #16
 80052ca:	f3af 8000 	nop.w
 80052ce:	4607      	mov	r7, r0
 80052d0:	1c78      	adds	r0, r7, #1
 80052d2:	d1d6      	bne.n	8005282 <_vfiprintf_r+0x19e>
 80052d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_vfiprintf_r+0x202>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	059a      	lsls	r2, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_vfiprintf_r+0x202>
 80052e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052e2:	f7ff fde1 	bl	8004ea8 <__retarget_lock_release_recursive>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	065b      	lsls	r3, r3, #25
 80052ea:	f53f af1d 	bmi.w	8005128 <_vfiprintf_r+0x44>
 80052ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052f0:	e71c      	b.n	800512c <_vfiprintf_r+0x48>
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462a      	mov	r2, r5
 80052f8:	4630      	mov	r0, r6
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <_vfiprintf_r+0x230>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	f000 f87d 	bl	80053fc <_printf_i>
 8005302:	e7e4      	b.n	80052ce <_vfiprintf_r+0x1ea>
 8005304:	08005a76 	.word	0x08005a76
 8005308:	08005a7c 	.word	0x08005a7c
 800530c:	08005a80 	.word	0x08005a80
 8005310:	00000000 	.word	0x00000000
 8005314:	080050bf 	.word	0x080050bf

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4699      	mov	r9, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	4607      	mov	r7, r0
 8005326:	4293      	cmp	r3, r2
 8005328:	bfb8      	it	lt
 800532a:	4613      	movlt	r3, r2
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005332:	460c      	mov	r4, r1
 8005334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc2b      	bgt.n	80053b8 <_printf_common+0xa0>
 8005360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005364:	1e13      	subs	r3, r2, #0
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d430      	bmi.n	80053d2 <_printf_common+0xba>
 8005370:	4649      	mov	r1, r9
 8005372:	4638      	mov	r0, r7
 8005374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d023      	beq.n	80053c6 <_printf_common+0xae>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf14      	ite	ne
 800538a:	2500      	movne	r5, #0
 800538c:	6833      	ldreq	r3, [r6, #0]
 800538e:	f04f 0600 	mov.w	r6, #0
 8005392:	bf08      	it	eq
 8005394:	68e5      	ldreq	r5, [r4, #12]
 8005396:	f104 041a 	add.w	r4, r4, #26
 800539a:	bf08      	it	eq
 800539c:	1aed      	subeq	r5, r5, r3
 800539e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053a2:	bf08      	it	eq
 80053a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bfc4      	itt	gt
 80053ac:	1a9b      	subgt	r3, r3, r2
 80053ae:	18ed      	addgt	r5, r5, r3
 80053b0:	42b5      	cmp	r5, r6
 80053b2:	d11a      	bne.n	80053ea <_printf_common+0xd2>
 80053b4:	2000      	movs	r0, #0
 80053b6:	e008      	b.n	80053ca <_printf_common+0xb2>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4652      	mov	r2, sl
 80053bc:	4649      	mov	r1, r9
 80053be:	4638      	mov	r0, r7
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d103      	bne.n	80053ce <_printf_common+0xb6>
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	3501      	adds	r5, #1
 80053d0:	e7c1      	b.n	8005356 <_printf_common+0x3e>
 80053d2:	2030      	movs	r0, #48	; 0x30
 80053d4:	18e1      	adds	r1, r4, r3
 80053d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053e0:	4422      	add	r2, r4
 80053e2:	3302      	adds	r3, #2
 80053e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e8:	e7c2      	b.n	8005370 <_printf_common+0x58>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4622      	mov	r2, r4
 80053ee:	4649      	mov	r1, r9
 80053f0:	4638      	mov	r0, r7
 80053f2:	47c0      	blx	r8
 80053f4:	3001      	adds	r0, #1
 80053f6:	d0e6      	beq.n	80053c6 <_printf_common+0xae>
 80053f8:	3601      	adds	r6, #1
 80053fa:	e7d9      	b.n	80053b0 <_printf_common+0x98>

080053fc <_printf_i>:
 80053fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	7e0f      	ldrb	r7, [r1, #24]
 8005402:	4691      	mov	r9, r2
 8005404:	2f78      	cmp	r7, #120	; 0x78
 8005406:	4680      	mov	r8, r0
 8005408:	460c      	mov	r4, r1
 800540a:	469a      	mov	sl, r3
 800540c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800540e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005412:	d807      	bhi.n	8005424 <_printf_i+0x28>
 8005414:	2f62      	cmp	r7, #98	; 0x62
 8005416:	d80a      	bhi.n	800542e <_printf_i+0x32>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f000 80d5 	beq.w	80055c8 <_printf_i+0x1cc>
 800541e:	2f58      	cmp	r7, #88	; 0x58
 8005420:	f000 80c1 	beq.w	80055a6 <_printf_i+0x1aa>
 8005424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800542c:	e03a      	b.n	80054a4 <_printf_i+0xa8>
 800542e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005432:	2b15      	cmp	r3, #21
 8005434:	d8f6      	bhi.n	8005424 <_printf_i+0x28>
 8005436:	a101      	add	r1, pc, #4	; (adr r1, 800543c <_printf_i+0x40>)
 8005438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800543c:	08005495 	.word	0x08005495
 8005440:	080054a9 	.word	0x080054a9
 8005444:	08005425 	.word	0x08005425
 8005448:	08005425 	.word	0x08005425
 800544c:	08005425 	.word	0x08005425
 8005450:	08005425 	.word	0x08005425
 8005454:	080054a9 	.word	0x080054a9
 8005458:	08005425 	.word	0x08005425
 800545c:	08005425 	.word	0x08005425
 8005460:	08005425 	.word	0x08005425
 8005464:	08005425 	.word	0x08005425
 8005468:	080055af 	.word	0x080055af
 800546c:	080054d5 	.word	0x080054d5
 8005470:	08005569 	.word	0x08005569
 8005474:	08005425 	.word	0x08005425
 8005478:	08005425 	.word	0x08005425
 800547c:	080055d1 	.word	0x080055d1
 8005480:	08005425 	.word	0x08005425
 8005484:	080054d5 	.word	0x080054d5
 8005488:	08005425 	.word	0x08005425
 800548c:	08005425 	.word	0x08005425
 8005490:	08005571 	.word	0x08005571
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	602a      	str	r2, [r5, #0]
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0a0      	b.n	80055ea <_printf_i+0x1ee>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	0607      	lsls	r7, r0, #24
 80054ae:	f103 0104 	add.w	r1, r3, #4
 80054b2:	6029      	str	r1, [r5, #0]
 80054b4:	d501      	bpl.n	80054ba <_printf_i+0xbe>
 80054b6:	681e      	ldr	r6, [r3, #0]
 80054b8:	e003      	b.n	80054c2 <_printf_i+0xc6>
 80054ba:	0646      	lsls	r6, r0, #25
 80054bc:	d5fb      	bpl.n	80054b6 <_printf_i+0xba>
 80054be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	da03      	bge.n	80054ce <_printf_i+0xd2>
 80054c6:	232d      	movs	r3, #45	; 0x2d
 80054c8:	4276      	negs	r6, r6
 80054ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ce:	230a      	movs	r3, #10
 80054d0:	4859      	ldr	r0, [pc, #356]	; (8005638 <_printf_i+0x23c>)
 80054d2:	e012      	b.n	80054fa <_printf_i+0xfe>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	1d19      	adds	r1, r3, #4
 80054da:	6029      	str	r1, [r5, #0]
 80054dc:	0605      	lsls	r5, r0, #24
 80054de:	d501      	bpl.n	80054e4 <_printf_i+0xe8>
 80054e0:	681e      	ldr	r6, [r3, #0]
 80054e2:	e002      	b.n	80054ea <_printf_i+0xee>
 80054e4:	0641      	lsls	r1, r0, #25
 80054e6:	d5fb      	bpl.n	80054e0 <_printf_i+0xe4>
 80054e8:	881e      	ldrh	r6, [r3, #0]
 80054ea:	2f6f      	cmp	r7, #111	; 0x6f
 80054ec:	bf0c      	ite	eq
 80054ee:	2308      	moveq	r3, #8
 80054f0:	230a      	movne	r3, #10
 80054f2:	4851      	ldr	r0, [pc, #324]	; (8005638 <_printf_i+0x23c>)
 80054f4:	2100      	movs	r1, #0
 80054f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054fa:	6865      	ldr	r5, [r4, #4]
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	bfa8      	it	ge
 8005500:	6821      	ldrge	r1, [r4, #0]
 8005502:	60a5      	str	r5, [r4, #8]
 8005504:	bfa4      	itt	ge
 8005506:	f021 0104 	bicge.w	r1, r1, #4
 800550a:	6021      	strge	r1, [r4, #0]
 800550c:	b90e      	cbnz	r6, 8005512 <_printf_i+0x116>
 800550e:	2d00      	cmp	r5, #0
 8005510:	d04b      	beq.n	80055aa <_printf_i+0x1ae>
 8005512:	4615      	mov	r5, r2
 8005514:	fbb6 f1f3 	udiv	r1, r6, r3
 8005518:	fb03 6711 	mls	r7, r3, r1, r6
 800551c:	5dc7      	ldrb	r7, [r0, r7]
 800551e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005522:	4637      	mov	r7, r6
 8005524:	42bb      	cmp	r3, r7
 8005526:	460e      	mov	r6, r1
 8005528:	d9f4      	bls.n	8005514 <_printf_i+0x118>
 800552a:	2b08      	cmp	r3, #8
 800552c:	d10b      	bne.n	8005546 <_printf_i+0x14a>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	07de      	lsls	r6, r3, #31
 8005532:	d508      	bpl.n	8005546 <_printf_i+0x14a>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	6861      	ldr	r1, [r4, #4]
 8005538:	4299      	cmp	r1, r3
 800553a:	bfde      	ittt	le
 800553c:	2330      	movle	r3, #48	; 0x30
 800553e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005546:	1b52      	subs	r2, r2, r5
 8005548:	6122      	str	r2, [r4, #16]
 800554a:	464b      	mov	r3, r9
 800554c:	4621      	mov	r1, r4
 800554e:	4640      	mov	r0, r8
 8005550:	f8cd a000 	str.w	sl, [sp]
 8005554:	aa03      	add	r2, sp, #12
 8005556:	f7ff fedf 	bl	8005318 <_printf_common>
 800555a:	3001      	adds	r0, #1
 800555c:	d14a      	bne.n	80055f4 <_printf_i+0x1f8>
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
 8005562:	b004      	add	sp, #16
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f043 0320 	orr.w	r3, r3, #32
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	2778      	movs	r7, #120	; 0x78
 8005572:	4832      	ldr	r0, [pc, #200]	; (800563c <_printf_i+0x240>)
 8005574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	6829      	ldr	r1, [r5, #0]
 800557c:	061f      	lsls	r7, r3, #24
 800557e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005582:	d402      	bmi.n	800558a <_printf_i+0x18e>
 8005584:	065f      	lsls	r7, r3, #25
 8005586:	bf48      	it	mi
 8005588:	b2b6      	uxthmi	r6, r6
 800558a:	07df      	lsls	r7, r3, #31
 800558c:	bf48      	it	mi
 800558e:	f043 0320 	orrmi.w	r3, r3, #32
 8005592:	6029      	str	r1, [r5, #0]
 8005594:	bf48      	it	mi
 8005596:	6023      	strmi	r3, [r4, #0]
 8005598:	b91e      	cbnz	r6, 80055a2 <_printf_i+0x1a6>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f023 0320 	bic.w	r3, r3, #32
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	2310      	movs	r3, #16
 80055a4:	e7a6      	b.n	80054f4 <_printf_i+0xf8>
 80055a6:	4824      	ldr	r0, [pc, #144]	; (8005638 <_printf_i+0x23c>)
 80055a8:	e7e4      	b.n	8005574 <_printf_i+0x178>
 80055aa:	4615      	mov	r5, r2
 80055ac:	e7bd      	b.n	800552a <_printf_i+0x12e>
 80055ae:	682b      	ldr	r3, [r5, #0]
 80055b0:	6826      	ldr	r6, [r4, #0]
 80055b2:	1d18      	adds	r0, r3, #4
 80055b4:	6961      	ldr	r1, [r4, #20]
 80055b6:	6028      	str	r0, [r5, #0]
 80055b8:	0635      	lsls	r5, r6, #24
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	d501      	bpl.n	80055c2 <_printf_i+0x1c6>
 80055be:	6019      	str	r1, [r3, #0]
 80055c0:	e002      	b.n	80055c8 <_printf_i+0x1cc>
 80055c2:	0670      	lsls	r0, r6, #25
 80055c4:	d5fb      	bpl.n	80055be <_printf_i+0x1c2>
 80055c6:	8019      	strh	r1, [r3, #0]
 80055c8:	2300      	movs	r3, #0
 80055ca:	4615      	mov	r5, r2
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	e7bc      	b.n	800554a <_printf_i+0x14e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	2100      	movs	r1, #0
 80055d4:	1d1a      	adds	r2, r3, #4
 80055d6:	602a      	str	r2, [r5, #0]
 80055d8:	681d      	ldr	r5, [r3, #0]
 80055da:	6862      	ldr	r2, [r4, #4]
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 f97f 	bl	80058e0 <memchr>
 80055e2:	b108      	cbz	r0, 80055e8 <_printf_i+0x1ec>
 80055e4:	1b40      	subs	r0, r0, r5
 80055e6:	6060      	str	r0, [r4, #4]
 80055e8:	6863      	ldr	r3, [r4, #4]
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	2300      	movs	r3, #0
 80055ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f2:	e7aa      	b.n	800554a <_printf_i+0x14e>
 80055f4:	462a      	mov	r2, r5
 80055f6:	4649      	mov	r1, r9
 80055f8:	4640      	mov	r0, r8
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	47d0      	blx	sl
 80055fe:	3001      	adds	r0, #1
 8005600:	d0ad      	beq.n	800555e <_printf_i+0x162>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	079b      	lsls	r3, r3, #30
 8005606:	d413      	bmi.n	8005630 <_printf_i+0x234>
 8005608:	68e0      	ldr	r0, [r4, #12]
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	4298      	cmp	r0, r3
 800560e:	bfb8      	it	lt
 8005610:	4618      	movlt	r0, r3
 8005612:	e7a6      	b.n	8005562 <_printf_i+0x166>
 8005614:	2301      	movs	r3, #1
 8005616:	4632      	mov	r2, r6
 8005618:	4649      	mov	r1, r9
 800561a:	4640      	mov	r0, r8
 800561c:	47d0      	blx	sl
 800561e:	3001      	adds	r0, #1
 8005620:	d09d      	beq.n	800555e <_printf_i+0x162>
 8005622:	3501      	adds	r5, #1
 8005624:	68e3      	ldr	r3, [r4, #12]
 8005626:	9903      	ldr	r1, [sp, #12]
 8005628:	1a5b      	subs	r3, r3, r1
 800562a:	42ab      	cmp	r3, r5
 800562c:	dcf2      	bgt.n	8005614 <_printf_i+0x218>
 800562e:	e7eb      	b.n	8005608 <_printf_i+0x20c>
 8005630:	2500      	movs	r5, #0
 8005632:	f104 0619 	add.w	r6, r4, #25
 8005636:	e7f5      	b.n	8005624 <_printf_i+0x228>
 8005638:	08005a87 	.word	0x08005a87
 800563c:	08005a98 	.word	0x08005a98

08005640 <__sflush_r>:
 8005640:	898a      	ldrh	r2, [r1, #12]
 8005642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005644:	4605      	mov	r5, r0
 8005646:	0710      	lsls	r0, r2, #28
 8005648:	460c      	mov	r4, r1
 800564a:	d457      	bmi.n	80056fc <__sflush_r+0xbc>
 800564c:	684b      	ldr	r3, [r1, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	dc04      	bgt.n	800565c <__sflush_r+0x1c>
 8005652:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	dc01      	bgt.n	800565c <__sflush_r+0x1c>
 8005658:	2000      	movs	r0, #0
 800565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565e:	2e00      	cmp	r6, #0
 8005660:	d0fa      	beq.n	8005658 <__sflush_r+0x18>
 8005662:	2300      	movs	r3, #0
 8005664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005668:	682f      	ldr	r7, [r5, #0]
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	d032      	beq.n	80056d6 <__sflush_r+0x96>
 8005670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	075a      	lsls	r2, r3, #29
 8005676:	d505      	bpl.n	8005684 <__sflush_r+0x44>
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	1ac0      	subs	r0, r0, r3
 800567c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567e:	b10b      	cbz	r3, 8005684 <__sflush_r+0x44>
 8005680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005682:	1ac0      	subs	r0, r0, r3
 8005684:	2300      	movs	r3, #0
 8005686:	4602      	mov	r2, r0
 8005688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800568a:	4628      	mov	r0, r5
 800568c:	6a21      	ldr	r1, [r4, #32]
 800568e:	47b0      	blx	r6
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	d106      	bne.n	80056a4 <__sflush_r+0x64>
 8005696:	6829      	ldr	r1, [r5, #0]
 8005698:	291d      	cmp	r1, #29
 800569a:	d82b      	bhi.n	80056f4 <__sflush_r+0xb4>
 800569c:	4a28      	ldr	r2, [pc, #160]	; (8005740 <__sflush_r+0x100>)
 800569e:	410a      	asrs	r2, r1
 80056a0:	07d6      	lsls	r6, r2, #31
 80056a2:	d427      	bmi.n	80056f4 <__sflush_r+0xb4>
 80056a4:	2200      	movs	r2, #0
 80056a6:	6062      	str	r2, [r4, #4]
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	04d9      	lsls	r1, r3, #19
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	d504      	bpl.n	80056ba <__sflush_r+0x7a>
 80056b0:	1c42      	adds	r2, r0, #1
 80056b2:	d101      	bne.n	80056b8 <__sflush_r+0x78>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b903      	cbnz	r3, 80056ba <__sflush_r+0x7a>
 80056b8:	6560      	str	r0, [r4, #84]	; 0x54
 80056ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056bc:	602f      	str	r7, [r5, #0]
 80056be:	2900      	cmp	r1, #0
 80056c0:	d0ca      	beq.n	8005658 <__sflush_r+0x18>
 80056c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c6:	4299      	cmp	r1, r3
 80056c8:	d002      	beq.n	80056d0 <__sflush_r+0x90>
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff fbee 	bl	8004eac <_free_r>
 80056d0:	2000      	movs	r0, #0
 80056d2:	6360      	str	r0, [r4, #52]	; 0x34
 80056d4:	e7c1      	b.n	800565a <__sflush_r+0x1a>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4628      	mov	r0, r5
 80056da:	47b0      	blx	r6
 80056dc:	1c41      	adds	r1, r0, #1
 80056de:	d1c8      	bne.n	8005672 <__sflush_r+0x32>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c5      	beq.n	8005672 <__sflush_r+0x32>
 80056e6:	2b1d      	cmp	r3, #29
 80056e8:	d001      	beq.n	80056ee <__sflush_r+0xae>
 80056ea:	2b16      	cmp	r3, #22
 80056ec:	d101      	bne.n	80056f2 <__sflush_r+0xb2>
 80056ee:	602f      	str	r7, [r5, #0]
 80056f0:	e7b2      	b.n	8005658 <__sflush_r+0x18>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	e7ae      	b.n	800565a <__sflush_r+0x1a>
 80056fc:	690f      	ldr	r7, [r1, #16]
 80056fe:	2f00      	cmp	r7, #0
 8005700:	d0aa      	beq.n	8005658 <__sflush_r+0x18>
 8005702:	0793      	lsls	r3, r2, #30
 8005704:	bf18      	it	ne
 8005706:	2300      	movne	r3, #0
 8005708:	680e      	ldr	r6, [r1, #0]
 800570a:	bf08      	it	eq
 800570c:	694b      	ldreq	r3, [r1, #20]
 800570e:	1bf6      	subs	r6, r6, r7
 8005710:	600f      	str	r7, [r1, #0]
 8005712:	608b      	str	r3, [r1, #8]
 8005714:	2e00      	cmp	r6, #0
 8005716:	dd9f      	ble.n	8005658 <__sflush_r+0x18>
 8005718:	4633      	mov	r3, r6
 800571a:	463a      	mov	r2, r7
 800571c:	4628      	mov	r0, r5
 800571e:	6a21      	ldr	r1, [r4, #32]
 8005720:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005724:	47e0      	blx	ip
 8005726:	2800      	cmp	r0, #0
 8005728:	dc06      	bgt.n	8005738 <__sflush_r+0xf8>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	e790      	b.n	800565a <__sflush_r+0x1a>
 8005738:	4407      	add	r7, r0
 800573a:	1a36      	subs	r6, r6, r0
 800573c:	e7ea      	b.n	8005714 <__sflush_r+0xd4>
 800573e:	bf00      	nop
 8005740:	dfbffffe 	.word	0xdfbffffe

08005744 <_fflush_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	690b      	ldr	r3, [r1, #16]
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b913      	cbnz	r3, 8005754 <_fflush_r+0x10>
 800574e:	2500      	movs	r5, #0
 8005750:	4628      	mov	r0, r5
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	b118      	cbz	r0, 800575e <_fflush_r+0x1a>
 8005756:	6a03      	ldr	r3, [r0, #32]
 8005758:	b90b      	cbnz	r3, 800575e <_fflush_r+0x1a>
 800575a:	f7ff fa9f 	bl	8004c9c <__sinit>
 800575e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f3      	beq.n	800574e <_fflush_r+0xa>
 8005766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005768:	07d0      	lsls	r0, r2, #31
 800576a:	d404      	bmi.n	8005776 <_fflush_r+0x32>
 800576c:	0599      	lsls	r1, r3, #22
 800576e:	d402      	bmi.n	8005776 <_fflush_r+0x32>
 8005770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005772:	f7ff fb98 	bl	8004ea6 <__retarget_lock_acquire_recursive>
 8005776:	4628      	mov	r0, r5
 8005778:	4621      	mov	r1, r4
 800577a:	f7ff ff61 	bl	8005640 <__sflush_r>
 800577e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005780:	4605      	mov	r5, r0
 8005782:	07da      	lsls	r2, r3, #31
 8005784:	d4e4      	bmi.n	8005750 <_fflush_r+0xc>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	059b      	lsls	r3, r3, #22
 800578a:	d4e1      	bmi.n	8005750 <_fflush_r+0xc>
 800578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578e:	f7ff fb8b 	bl	8004ea8 <__retarget_lock_release_recursive>
 8005792:	e7dd      	b.n	8005750 <_fflush_r+0xc>

08005794 <__swbuf_r>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	460e      	mov	r6, r1
 8005798:	4614      	mov	r4, r2
 800579a:	4605      	mov	r5, r0
 800579c:	b118      	cbz	r0, 80057a6 <__swbuf_r+0x12>
 800579e:	6a03      	ldr	r3, [r0, #32]
 80057a0:	b90b      	cbnz	r3, 80057a6 <__swbuf_r+0x12>
 80057a2:	f7ff fa7b 	bl	8004c9c <__sinit>
 80057a6:	69a3      	ldr	r3, [r4, #24]
 80057a8:	60a3      	str	r3, [r4, #8]
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	071a      	lsls	r2, r3, #28
 80057ae:	d525      	bpl.n	80057fc <__swbuf_r+0x68>
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	b31b      	cbz	r3, 80057fc <__swbuf_r+0x68>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	6922      	ldr	r2, [r4, #16]
 80057b8:	b2f6      	uxtb	r6, r6
 80057ba:	1a98      	subs	r0, r3, r2
 80057bc:	6963      	ldr	r3, [r4, #20]
 80057be:	4637      	mov	r7, r6
 80057c0:	4283      	cmp	r3, r0
 80057c2:	dc04      	bgt.n	80057ce <__swbuf_r+0x3a>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7ff ffbc 	bl	8005744 <_fflush_r>
 80057cc:	b9e0      	cbnz	r0, 8005808 <__swbuf_r+0x74>
 80057ce:	68a3      	ldr	r3, [r4, #8]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	60a3      	str	r3, [r4, #8]
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	701e      	strb	r6, [r3, #0]
 80057dc:	6962      	ldr	r2, [r4, #20]
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d004      	beq.n	80057ee <__swbuf_r+0x5a>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	07db      	lsls	r3, r3, #31
 80057e8:	d506      	bpl.n	80057f8 <__swbuf_r+0x64>
 80057ea:	2e0a      	cmp	r6, #10
 80057ec:	d104      	bne.n	80057f8 <__swbuf_r+0x64>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f7ff ffa7 	bl	8005744 <_fflush_r>
 80057f6:	b938      	cbnz	r0, 8005808 <__swbuf_r+0x74>
 80057f8:	4638      	mov	r0, r7
 80057fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f806 	bl	8005810 <__swsetup_r>
 8005804:	2800      	cmp	r0, #0
 8005806:	d0d5      	beq.n	80057b4 <__swbuf_r+0x20>
 8005808:	f04f 37ff 	mov.w	r7, #4294967295
 800580c:	e7f4      	b.n	80057f8 <__swbuf_r+0x64>
	...

08005810 <__swsetup_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <__swsetup_r+0xac>)
 8005814:	4605      	mov	r5, r0
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	460c      	mov	r4, r1
 800581a:	b118      	cbz	r0, 8005824 <__swsetup_r+0x14>
 800581c:	6a03      	ldr	r3, [r0, #32]
 800581e:	b90b      	cbnz	r3, 8005824 <__swsetup_r+0x14>
 8005820:	f7ff fa3c 	bl	8004c9c <__sinit>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800582a:	0718      	lsls	r0, r3, #28
 800582c:	d422      	bmi.n	8005874 <__swsetup_r+0x64>
 800582e:	06d9      	lsls	r1, r3, #27
 8005830:	d407      	bmi.n	8005842 <__swsetup_r+0x32>
 8005832:	2309      	movs	r3, #9
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800583a:	f04f 30ff 	mov.w	r0, #4294967295
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	e034      	b.n	80058ac <__swsetup_r+0x9c>
 8005842:	0758      	lsls	r0, r3, #29
 8005844:	d512      	bpl.n	800586c <__swsetup_r+0x5c>
 8005846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005848:	b141      	cbz	r1, 800585c <__swsetup_r+0x4c>
 800584a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584e:	4299      	cmp	r1, r3
 8005850:	d002      	beq.n	8005858 <__swsetup_r+0x48>
 8005852:	4628      	mov	r0, r5
 8005854:	f7ff fb2a 	bl	8004eac <_free_r>
 8005858:	2300      	movs	r3, #0
 800585a:	6363      	str	r3, [r4, #52]	; 0x34
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	2300      	movs	r3, #0
 8005866:	6063      	str	r3, [r4, #4]
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f043 0308 	orr.w	r3, r3, #8
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	b94b      	cbnz	r3, 800588c <__swsetup_r+0x7c>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800587e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005882:	d003      	beq.n	800588c <__swsetup_r+0x7c>
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f85d 	bl	8005946 <__smakebuf_r>
 800588c:	89a0      	ldrh	r0, [r4, #12]
 800588e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005892:	f010 0301 	ands.w	r3, r0, #1
 8005896:	d00a      	beq.n	80058ae <__swsetup_r+0x9e>
 8005898:	2300      	movs	r3, #0
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	6963      	ldr	r3, [r4, #20]
 800589e:	425b      	negs	r3, r3
 80058a0:	61a3      	str	r3, [r4, #24]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	b943      	cbnz	r3, 80058b8 <__swsetup_r+0xa8>
 80058a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058aa:	d1c4      	bne.n	8005836 <__swsetup_r+0x26>
 80058ac:	bd38      	pop	{r3, r4, r5, pc}
 80058ae:	0781      	lsls	r1, r0, #30
 80058b0:	bf58      	it	pl
 80058b2:	6963      	ldrpl	r3, [r4, #20]
 80058b4:	60a3      	str	r3, [r4, #8]
 80058b6:	e7f4      	b.n	80058a2 <__swsetup_r+0x92>
 80058b8:	2000      	movs	r0, #0
 80058ba:	e7f7      	b.n	80058ac <__swsetup_r+0x9c>
 80058bc:	20000064 	.word	0x20000064

080058c0 <_sbrk_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	2300      	movs	r3, #0
 80058c4:	4d05      	ldr	r5, [pc, #20]	; (80058dc <_sbrk_r+0x1c>)
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fb fe6c 	bl	80015a8 <_sbrk>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_sbrk_r+0x1a>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_sbrk_r+0x1a>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000370 	.word	0x20000370

080058e0 <memchr>:
 80058e0:	4603      	mov	r3, r0
 80058e2:	b510      	push	{r4, lr}
 80058e4:	b2c9      	uxtb	r1, r1
 80058e6:	4402      	add	r2, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	d101      	bne.n	80058f2 <memchr+0x12>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e003      	b.n	80058fa <memchr+0x1a>
 80058f2:	7804      	ldrb	r4, [r0, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	428c      	cmp	r4, r1
 80058f8:	d1f6      	bne.n	80058e8 <memchr+0x8>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <__swhatbuf_r>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	460c      	mov	r4, r1
 8005900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005904:	4615      	mov	r5, r2
 8005906:	2900      	cmp	r1, #0
 8005908:	461e      	mov	r6, r3
 800590a:	b096      	sub	sp, #88	; 0x58
 800590c:	da0c      	bge.n	8005928 <__swhatbuf_r+0x2c>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	2100      	movs	r1, #0
 8005912:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005916:	bf0c      	ite	eq
 8005918:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800591c:	2340      	movne	r3, #64	; 0x40
 800591e:	2000      	movs	r0, #0
 8005920:	6031      	str	r1, [r6, #0]
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	b016      	add	sp, #88	; 0x58
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	466a      	mov	r2, sp
 800592a:	f000 f849 	bl	80059c0 <_fstat_r>
 800592e:	2800      	cmp	r0, #0
 8005930:	dbed      	blt.n	800590e <__swhatbuf_r+0x12>
 8005932:	9901      	ldr	r1, [sp, #4]
 8005934:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005938:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800593c:	4259      	negs	r1, r3
 800593e:	4159      	adcs	r1, r3
 8005940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005944:	e7eb      	b.n	800591e <__swhatbuf_r+0x22>

08005946 <__smakebuf_r>:
 8005946:	898b      	ldrh	r3, [r1, #12]
 8005948:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800594a:	079d      	lsls	r5, r3, #30
 800594c:	4606      	mov	r6, r0
 800594e:	460c      	mov	r4, r1
 8005950:	d507      	bpl.n	8005962 <__smakebuf_r+0x1c>
 8005952:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	6123      	str	r3, [r4, #16]
 800595a:	2301      	movs	r3, #1
 800595c:	6163      	str	r3, [r4, #20]
 800595e:	b002      	add	sp, #8
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	466a      	mov	r2, sp
 8005964:	ab01      	add	r3, sp, #4
 8005966:	f7ff ffc9 	bl	80058fc <__swhatbuf_r>
 800596a:	9900      	ldr	r1, [sp, #0]
 800596c:	4605      	mov	r5, r0
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff fb04 	bl	8004f7c <_malloc_r>
 8005974:	b948      	cbnz	r0, 800598a <__smakebuf_r+0x44>
 8005976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597a:	059a      	lsls	r2, r3, #22
 800597c:	d4ef      	bmi.n	800595e <__smakebuf_r+0x18>
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	e7e3      	b.n	8005952 <__smakebuf_r+0xc>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	6020      	str	r0, [r4, #0]
 800598e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	6120      	str	r0, [r4, #16]
 8005998:	6163      	str	r3, [r4, #20]
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	b15b      	cbz	r3, 80059b6 <__smakebuf_r+0x70>
 800599e:	4630      	mov	r0, r6
 80059a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059a4:	f000 f81e 	bl	80059e4 <_isatty_r>
 80059a8:	b128      	cbz	r0, 80059b6 <__smakebuf_r+0x70>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f023 0303 	bic.w	r3, r3, #3
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	81a3      	strh	r3, [r4, #12]
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	431d      	orrs	r5, r3
 80059ba:	81a5      	strh	r5, [r4, #12]
 80059bc:	e7cf      	b.n	800595e <__smakebuf_r+0x18>
	...

080059c0 <_fstat_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	2300      	movs	r3, #0
 80059c4:	4d06      	ldr	r5, [pc, #24]	; (80059e0 <_fstat_r+0x20>)
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	602b      	str	r3, [r5, #0]
 80059ce:	f7fb fdc6 	bl	800155e <_fstat>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d102      	bne.n	80059dc <_fstat_r+0x1c>
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	b103      	cbz	r3, 80059dc <_fstat_r+0x1c>
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
 80059de:	bf00      	nop
 80059e0:	20000370 	.word	0x20000370

080059e4 <_isatty_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	2300      	movs	r3, #0
 80059e8:	4d05      	ldr	r5, [pc, #20]	; (8005a00 <_isatty_r+0x1c>)
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	f7fb fdc4 	bl	800157c <_isatty>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d102      	bne.n	80059fe <_isatty_r+0x1a>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b103      	cbz	r3, 80059fe <_isatty_r+0x1a>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	20000370 	.word	0x20000370

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
