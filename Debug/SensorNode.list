
SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005328  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c4  080054c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080054c4  080054c4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c4  080054c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080054cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000068  08005534  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08005534  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fac8  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000266e  00000000  00000000  0002fb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00032210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc6  00000000  00000000  00033140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a90  00000000  00000000  00033d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bfb  00000000  00000000  00037796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009035d  00000000  00000000  0004a391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004794  00000000  00000000  000da6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000dee84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005420 	.word	0x08005420

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005420 	.word	0x08005420

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af04      	add	r7, sp, #16
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2302      	movs	r3, #2
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	f001 fff2 	bl	800276c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000788:	7b3b      	ldrb	r3, [r7, #12]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	7b7b      	ldrb	r3, [r7, #13]
 8000790:	b21b      	sxth	r3, r3
 8000792:	4313      	orrs	r3, r2
 8000794:	b21b      	sxth	r3, r3
 8000796:	b29b      	uxth	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af04      	add	r7, sp, #16
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80007b0:	883b      	ldrh	r3, [r7, #0]
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80007ba:	883b      	ldrh	r3, [r7, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2302      	movs	r3, #2
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	f001 fecc 	bl	8002578 <HAL_I2C_Mem_Write>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80007f0:	2102      	movs	r1, #2
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb2 	bl	800075c <Read16>
 80007f8:	4603      	mov	r3, r0
 80007fa:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b29b      	uxth	r3, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	b29b      	uxth	r3, r3

}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000816:	2104      	movs	r1, #4
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff9f 	bl	800075c <Read16>
 800081e:	4603      	mov	r3, r0
 8000820:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ffe8 	bl	800080e <INA219_ReadCurrent_raw>
 800083e:	4603      	mov	r3, r0
 8000840:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <INA219_ReadCurrent+0x2c>)
 8000848:	f9b2 2000 	ldrsh.w	r2, [r2]
 800084c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000850:	b21b      	sxth	r3, r3
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000086 	.word	0x20000086

08000860 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff76 	bl	800075c <Read16>
 8000870:	4603      	mov	r3, r0
 8000872:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fee6 	bl	8000648 <__aeabi_i2d>
 800087c:	a308      	add	r3, pc, #32	; (adr r3, 80008a0 <INA219_ReadShuntVolage+0x40>)
 800087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000882:	f7ff fc65 	bl	8000150 <__aeabi_dmul>
 8000886:	4602      	mov	r2, r0
 8000888:	460b      	mov	r3, r1
 800088a:	4610      	mov	r0, r2
 800088c:	4619      	mov	r1, r3
 800088e:	f7ff ff45 	bl	800071c <__aeabi_d2uiz>
 8000892:	4603      	mov	r3, r0
 8000894:	b29b      	uxth	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	47ae147b 	.word	0x47ae147b
 80008a4:	3f847ae1 	.word	0x3f847ae1

080008a8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80008b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008b4:	2100      	movs	r1, #0
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff72 	bl	80007a0 <Write16>
	HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fe43 	bl	8001548 <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	461a      	mov	r2, r3
 80008da:	2105      	movs	r1, #5
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff5f 	bl	80007a0 <Write16>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80008f6:	887b      	ldrh	r3, [r7, #2]
 80008f8:	461a      	mov	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff4f 	bl	80007a0 <Write16>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <INA219_setCalibration_32V_1A>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_32V_1A(INA219_t *ina219)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000914:	f643 139f 	movw	r3, #14751	; 0x399f
 8000918:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 10240;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <INA219_setCalibration_32V_1A+0x40>)
 800091c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8000920:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 25;    // Current LSB = 40uA per bit (1000/40 = 25)
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <INA219_setCalibration_32V_1A+0x44>)
 8000924:	2219      	movs	r2, #25
 8000926:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.8f; // Power LSB = 800uW per bit
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <INA219_setCalibration_32V_1A+0x48>)
 800092a:	2200      	movs	r2, #0
 800092c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <INA219_setCalibration_32V_1A+0x40>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ffc8 	bl	80008ca <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	4619      	mov	r1, r3
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffd3 	bl	80008ea <INA219_setConfig>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000084 	.word	0x20000084
 8000950:	20000086 	.word	0x20000086
 8000954:	20000088 	.word	0x20000088

08000958 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	4613      	mov	r3, r2
 8000964:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <INA219_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <INA219_Init+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	b29b      	uxth	r3, r3
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	b299      	uxth	r1, r3
 8000986:	2302      	movs	r3, #2
 8000988:	2203      	movs	r2, #3
 800098a:	68b8      	ldr	r0, [r7, #8]
 800098c:	f002 f956 	bl	8002c3c <HAL_I2C_IsDeviceReady>
 8000990:	4603      	mov	r3, r0
 8000992:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d107      	bne.n	80009aa <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff ff84 	bl	80008a8 <INA219_Reset>
		INA219_setCalibration_32V_1A(ina219);
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ffb3 	bl	800090c <INA219_setCalibration_32V_1A>

		return 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80009aa:	2300      	movs	r3, #0
	}
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000086 	.word	0x20000086
 80009b8:	20000088 	.word	0x20000088

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fd60 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f86c 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f000 f9e4 	bl	8000d94 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009cc:	f000 f8b8 	bl	8000b40 <MX_ADC1_Init>
  MX_CAN_Init();
 80009d0:	f000 f8f4 	bl	8000bbc <MX_CAN_Init>
  MX_I2C1_Init();
 80009d4:	f000 f926 	bl	8000c24 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009d8:	f000 f952 	bl	8000c80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009dc:	f000 f986 	bl	8000cec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009e0:	f000 f9ae 	bl	8000d40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 80009e4:	e00b      	b.n	80009fe <main+0x42>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <main+0xbc>)
 80009ee:	f001 fc4d 	bl	800228c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	481f      	ldr	r0, [pc, #124]	; (8000a78 <main+0xbc>)
 80009fa:	f001 fc47 	bl	800228c <HAL_GPIO_WritePin>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	491e      	ldr	r1, [pc, #120]	; (8000a7c <main+0xc0>)
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <main+0xc4>)
 8000a04:	f7ff ffa8 	bl	8000958 <INA219_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0eb      	beq.n	80009e6 <main+0x2a>
  }
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <main+0xc8>)
 8000a10:	f001 f82a 	bl	8001a68 <HAL_ADCEx_Calibration_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  uint32_t temp = GetTemperature();
//	  uint32_t tempRAW = GetTemperature2();
	  vbus = INA219_ReadBusVoltage(&ina219);
 8000a14:	481a      	ldr	r0, [pc, #104]	; (8000a80 <main+0xc4>)
 8000a16:	f7ff fee7 	bl	80007e8 <INA219_ReadBusVoltage>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <main+0xcc>)
 8000a20:	801a      	strh	r2, [r3, #0]
	  vshunt = INA219_ReadShuntVolage(&ina219);
 8000a22:	4817      	ldr	r0, [pc, #92]	; (8000a80 <main+0xc4>)
 8000a24:	f7ff ff1c 	bl	8000860 <INA219_ReadShuntVolage>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <main+0xd0>)
 8000a2e:	801a      	strh	r2, [r3, #0]
	  current = INA219_ReadCurrent(&ina219);
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <main+0xc4>)
 8000a32:	f7ff fefd 	bl	8000830 <INA219_ReadCurrent>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <main+0xd4>)
 8000a3c:	801a      	strh	r2, [r3, #0]
	  printf("B: %d\n", vbus);
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <main+0xcc>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <main+0xd8>)
 8000a46:	f003 fe6d 	bl	8004724 <iprintf>
	  printf("S: %d\n", vshunt);
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <main+0xd0>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4811      	ldr	r0, [pc, #68]	; (8000a98 <main+0xdc>)
 8000a52:	f003 fe67 	bl	8004724 <iprintf>
	  printf("C: %d\n", current);
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <main+0xd4>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <main+0xe0>)
 8000a5e:	f003 fe61 	bl	8004724 <iprintf>
//	  printf("Tr: %d\n", tempRAW );
//	  printf("V: %d.%03d\n", vbus / 1000, vbus % 1000);
//	  printf("A: %d\n", current);
//	  printf("ADC: %ld\n", temp);

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <main+0xbc>)
 8000a68:	f001 fc28 	bl	80022bc <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a70:	f000 fd6a 	bl	8001548 <HAL_Delay>
	  vbus = INA219_ReadBusVoltage(&ina219);
 8000a74:	e7ce      	b.n	8000a14 <main+0x58>
 8000a76:	bf00      	nop
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	200000e4 	.word	0x200000e4
 8000a80:	20000220 	.word	0x20000220
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	20000228 	.word	0x20000228
 8000a8c:	2000022a 	.word	0x2000022a
 8000a90:	2000022c 	.word	0x2000022c
 8000a94:	08005438 	.word	0x08005438
 8000a98:	08005440 	.word	0x08005440
 8000a9c:	08005448 	.word	0x08005448

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aaa:	2228      	movs	r2, #40	; 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fe8d 	bl	80047ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fd8b 	bl	8003600 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000af0:	f000 f9f8 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fff8 	bl	8003b04 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b1a:	f000 f9e3 	bl	8000ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f979 	bl	8003e20 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b34:	f000 f9d6 	bl	8000ee4 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3750      	adds	r7, #80	; 0x50
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b52:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <MX_ADC1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b6a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b7e:	f000 fd07 	bl	8001590 <HAL_ADC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f9ac 	bl	8000ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_ADC1_Init+0x74>)
 8000b9e:	f000 fdcf 	bl	8001740 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ba8:	f000 f99c 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000008c 	.word	0x2000008c
 8000bb8:	40012400 	.word	0x40012400

08000bbc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <MX_CAN_Init+0x64>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bc8:	2210      	movs	r2, #16
 8000bca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_CAN_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_CAN_Init+0x60>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_CAN_Init+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_CAN_Init+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_CAN_Init+0x60>)
 8000c0a:	f000 ffdb 	bl	8001bc4 <HAL_CAN_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000c14:	f000 f966 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000bc 	.word	0x200000bc
 8000c20:	40006400 	.word	0x40006400

08000c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f001 fb45 	bl	80022f0 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 f93a 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000e4 	.word	0x200000e4
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	000186a0 	.word	0x000186a0

08000c80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <MX_SPI1_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI1_Init+0x64>)
 8000cd2:	f003 fa11 	bl	80040f8 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f000 f902 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000138 	.word	0x20000138
 8000ce8:	40013000 	.word	0x40013000

08000cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_USART1_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART1_UART_Init+0x4c>)
 8000d24:	f003 fa6c 	bl	8004200 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f000 f8d9 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000190 	.word	0x20000190
 8000d3c:	40013800 	.word	0x40013800

08000d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <MX_USART2_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART2_UART_Init+0x4c>)
 8000d78:	f003 fa42 	bl	8004200 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d82:	f000 f8af 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001d8 	.word	0x200001d8
 8000d90:	40004400 	.word	0x40004400

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da8:	4b49      	ldr	r3, [pc, #292]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a48      	ldr	r2, [pc, #288]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a42      	ldr	r2, [pc, #264]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <MX_GPIO_Init+0x13c>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_MCU1_0_GPIO_Port, XSHUT_MCU1_0_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	4837      	ldr	r0, [pc, #220]	; (8000ed4 <MX_GPIO_Init+0x140>)
 8000df8:	f001 fa48 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f641 4108 	movw	r1, #7176	; 0x1c08
 8000e02:	4835      	ldr	r0, [pc, #212]	; (8000ed8 <MX_GPIO_Init+0x144>)
 8000e04:	f001 fa42 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_BOOT_Pin|MPU_RST_Pin|XSHUT_MCU1_1_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 8000e0e:	4832      	ldr	r0, [pc, #200]	; (8000ed8 <MX_GPIO_Init+0x144>)
 8000e10:	f001 fa3c 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1a:	4830      	ldr	r0, [pc, #192]	; (8000edc <MX_GPIO_Init+0x148>)
 8000e1c:	f001 fa36 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO1_MCU1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_MCU1_0_Pin;
 8000e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4827      	ldr	r0, [pc, #156]	; (8000ed4 <MX_GPIO_Init+0x140>)
 8000e36:	f001 f8a5 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : XSHUT_MCU1_0_Pin */
  GPIO_InitStruct.Pin = XSHUT_MCU1_0_Pin;
 8000e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSHUT_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <MX_GPIO_Init+0x140>)
 8000e54:	f001 f896 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <MX_GPIO_Init+0x144>)
 8000e6c:	f001 f88a 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin MPU_BOOT_Pin
                           MPU_RST_Pin PB3 XSHUT_MCU1_1_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin|MPU_BOOT_Pin
 8000e70:	f64d 5308 	movw	r3, #56584	; 0xdd08
 8000e74:	613b      	str	r3, [r7, #16]
                          |MPU_RST_Pin|GPIO_PIN_3|XSHUT_MCU1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_GPIO_Init+0x144>)
 8000e8a:	f001 f87b 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU_INT_Pin GPIO1_MCU1_1_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin|GPIO1_MCU1_1_Pin;
 8000e8e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_GPIO_Init+0x144>)
 8000ea4:	f001 f86e 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_GPIO_Init+0x148>)
 8000ec2:	f001 f85f 	bl	8001f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	10110000 	.word	0x10110000

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <HAL_MspInit+0x5c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_MspInit+0x60>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_MspInit+0x60>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000

08000f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <HAL_ADC_MspInit+0x6c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d121      	bne.n	8000fb8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0x70>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <HAL_ADC_MspInit+0x70>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_ADC_MspInit+0x70>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_ADC_MspInit+0x70>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_ADC_MspInit+0x70>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_ADC_MspInit+0x70>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ADC_TEMPT_Pin;
 8000fa4:	2311      	movs	r3, #17
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_ADC_MspInit+0x74>)
 8000fb4:	f000 ffe6 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40012400 	.word	0x40012400
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010800 	.word	0x40010800

08000fcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <HAL_CAN_MspInit+0x8c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d131      	bne.n	8001050 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_CAN_MspInit+0x90>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	; (800105c <HAL_CAN_MspInit+0x90>)
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	61d3      	str	r3, [r2, #28]
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_CAN_MspInit+0x90>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_CAN_MspInit+0x90>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_CAN_MspInit+0x90>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_CAN_MspInit+0x90>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001020:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <HAL_CAN_MspInit+0x94>)
 8001032:	f000 ffa7 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_CAN_MspInit+0x94>)
 800104c:	f000 ff9a 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40006400 	.word	0x40006400
 800105c:	40021000 	.word	0x40021000
 8001060:	40010800 	.word	0x40010800

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_I2C_MspInit+0x70>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d123      	bne.n	80010cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109c:	23c0      	movs	r3, #192	; 0xc0
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_I2C_MspInit+0x78>)
 80010b0:	f000 ff68 	bl	8001f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 80010ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010be:	61d3      	str	r3, [r2, #28]
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_I2C_MspInit+0x74>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010c00 	.word	0x40010c00

080010e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_SPI_MspInit+0x88>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d12f      	bne.n	8001160 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_SPI_MspInit+0x8c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_SPI_MspInit+0x8c>)
 8001106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_SPI_MspInit+0x8c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_SPI_MspInit+0x8c>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_SPI_MspInit+0x8c>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_SPI_MspInit+0x8c>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <HAL_SPI_MspInit+0x90>)
 8001144:	f000 ff1e 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001148:	2340      	movs	r3, #64	; 0x40
 800114a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_SPI_MspInit+0x90>)
 800115c:	f000 ff12 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40013000 	.word	0x40013000
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a37      	ldr	r2, [pc, #220]	; (800126c <HAL_UART_MspInit+0xf8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d132      	bne.n	80011fa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_UART_MspInit+0xfc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a35      	ldr	r2, [pc, #212]	; (8001270 <HAL_UART_MspInit+0xfc>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <HAL_UART_MspInit+0xfc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_UART_MspInit+0xfc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <HAL_UART_MspInit+0xfc>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_UART_MspInit+0xfc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4619      	mov	r1, r3
 80011d8:	4826      	ldr	r0, [pc, #152]	; (8001274 <HAL_UART_MspInit+0x100>)
 80011da:	f000 fed3 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	4619      	mov	r1, r3
 80011f2:	4820      	ldr	r0, [pc, #128]	; (8001274 <HAL_UART_MspInit+0x100>)
 80011f4:	f000 fec6 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f8:	e034      	b.n	8001264 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_UART_MspInit+0x104>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d12f      	bne.n	8001264 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_UART_MspInit+0xfc>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_UART_MspInit+0xfc>)
 800120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_UART_MspInit+0xfc>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_UART_MspInit+0xfc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_UART_MspInit+0xfc>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_UART_MspInit+0xfc>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001234:	2304      	movs	r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	4619      	mov	r1, r3
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <HAL_UART_MspInit+0x100>)
 8001248:	f000 fe9c 	bl	8001f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800124c:	2308      	movs	r3, #8
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_UART_MspInit+0x100>)
 8001260:	f000 fe90 	bl	8001f84 <HAL_GPIO_Init>
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40013800 	.word	0x40013800
 8001270:	40021000 	.word	0x40021000
 8001274:	40010800 	.word	0x40010800
 8001278:	40004400 	.word	0x40004400

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c2:	f000 f925 	bl	8001510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e00a      	b.n	80012f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012dc:	f3af 8000 	nop.w
 80012e0:	4601      	mov	r1, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	b2ca      	uxtb	r2, r1
 80012ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbf0      	blt.n	80012dc <_read+0x12>
  }

  return len;
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e009      	b.n	800132a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f878 	bl	8001414 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf1      	blt.n	8001316 <_write+0x12>
  }
  return len;
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_close>:

int _close(int file)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	605a      	str	r2, [r3, #4]
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <_isatty>:

int _isatty(int file)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f003 fa4e 	bl	800486c <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20005000 	.word	0x20005000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20000230 	.word	0x20000230
 8001404:	20000388 	.word	0x20000388

08001408 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800141c:	1d39      	adds	r1, r7, #4
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2201      	movs	r2, #1
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <__io_putchar+0x20>)
 8001426:	f002 ff3b 	bl	80042a0 <HAL_UART_Transmit>
	return ch;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000190 	.word	0x20000190

08001438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001438:	f7ff ffe6 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800143e:	490c      	ldr	r1, [pc, #48]	; (8001470 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001454:	4c09      	ldr	r4, [pc, #36]	; (800147c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f003 fa09 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7ff faa9 	bl	80009bc <main>
  bx lr
 800146a:	4770      	bx	lr
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001474:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 8001478:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800147c:	20000384 	.word	0x20000384

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_Init+0x28>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_Init+0x28>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 fd41 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f000 f808 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff fd26 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40022000 	.word	0x40022000

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x54>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x58>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fd4b 	bl	8001f6a <HAL_SYSTICK_Config>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00e      	b.n	80014fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d80a      	bhi.n	80014fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f000 fd21 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_InitTick+0x5c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	20000008 	.word	0x20000008
 800150c:	20000004 	.word	0x20000004

08001510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x1c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x20>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a03      	ldr	r2, [pc, #12]	; (8001530 <HAL_IncTick+0x20>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000008 	.word	0x20000008
 8001530:	20000234 	.word	0x20000234

08001534 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b02      	ldr	r3, [pc, #8]	; (8001544 <HAL_GetTick+0x10>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	20000234 	.word	0x20000234

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff fff0 	bl	8001534 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffe0 	bl	8001534 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0be      	b.n	8001730 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fcc0 	bl	8000f54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fa05 	bl	80019e4 <ADC_ConversionStop_Disable>
 80015da:	4603      	mov	r3, r0
 80015dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8099 	bne.w	800171e <HAL_ADC_Init+0x18e>
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 8095 	bne.w	800171e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015fc:	f023 0302 	bic.w	r3, r3, #2
 8001600:	f043 0202 	orr.w	r2, r3, #2
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001610:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7b1b      	ldrb	r3, [r3, #12]
 8001616:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001618:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	4313      	orrs	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001628:	d003      	beq.n	8001632 <HAL_ADC_Init+0xa2>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_ADC_Init+0xa8>
 8001632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001636:	e000      	b.n	800163a <HAL_ADC_Init+0xaa>
 8001638:	2300      	movs	r3, #0
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7d1b      	ldrb	r3, [r3, #20]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d119      	bne.n	800167c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	3b01      	subs	r3, #1
 8001656:	035a      	lsls	r2, r3, #13
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	e00b      	b.n	800167c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	f043 0220 	orr.w	r2, r3, #32
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_ADC_Init+0x1a8>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_Init+0x126>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d104      	bne.n	80016c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	051b      	lsls	r3, r3, #20
 80016be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_ADC_Init+0x1ac>)
 80016dc:	4013      	ands	r3, r2
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10b      	bne.n	80016fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016fa:	e018      	b.n	800172e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f023 0312 	bic.w	r3, r3, #18
 8001704:	f043 0210 	orr.w	r2, r3, #16
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800171c:	e007      	b.n	800172e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	f043 0210 	orr.w	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800172e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	ffe1f7fd 	.word	0xffe1f7fd
 800173c:	ff1f0efe 	.word	0xff1f0efe

08001740 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x20>
 800175c:	2302      	movs	r3, #2
 800175e:	e0dc      	b.n	800191a <HAL_ADC_ConfigChannel+0x1da>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b06      	cmp	r3, #6
 800176e:	d81c      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	3b05      	subs	r3, #5
 8001782:	221f      	movs	r2, #31
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b05      	subs	r3, #5
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
 80017a8:	e03c      	b.n	8001824 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d81c      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	3b23      	subs	r3, #35	; 0x23
 80017c4:	221f      	movs	r2, #31
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	4019      	ands	r1, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b23      	subs	r3, #35	; 0x23
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ea:	e01b      	b.n	8001824 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b41      	subs	r3, #65	; 0x41
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	4019      	ands	r1, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b41      	subs	r3, #65	; 0x41
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b09      	cmp	r3, #9
 800182a:	d91c      	bls.n	8001866 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68d9      	ldr	r1, [r3, #12]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	3b1e      	subs	r3, #30
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6898      	ldr	r0, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	3b1e      	subs	r3, #30
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	e019      	b.n	800189a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6919      	ldr	r1, [r3, #16]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	2207      	movs	r2, #7
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	4019      	ands	r1, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6898      	ldr	r0, [r3, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d003      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018a6:	2b11      	cmp	r3, #17
 80018a8:	d132      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_ADC_ConfigChannel+0x1e4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d125      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d126      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d11a      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_ADC_ConfigChannel+0x1e8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <HAL_ADC_ConfigChannel+0x1ec>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9a      	lsrs	r2, r3, #18
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f0:	e002      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f9      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x1b2>
 80018fe:	e007      	b.n	8001910 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	f043 0220 	orr.w	r2, r3, #32
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40012400 	.word	0x40012400
 8001928:	20000000 	.word	0x20000000
 800192c:	431bde83 	.word	0x431bde83

08001930 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d040      	beq.n	80019d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <ADC_Enable+0xac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <ADC_Enable+0xb0>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9b      	lsrs	r3, r3, #18
 800196a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800196c:	e002      	b.n	8001974 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800197a:	f7ff fddb 	bl	8001534 <HAL_GetTick>
 800197e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001980:	e01f      	b.n	80019c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001982:	f7ff fdd7 	bl	8001534 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d918      	bls.n	80019c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d011      	beq.n	80019c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	f043 0210 	orr.w	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e007      	b.n	80019d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d1d8      	bne.n	8001982 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000000 	.word	0x20000000
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d12e      	bne.n	8001a5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0201 	bic.w	r2, r2, #1
 8001a0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a0e:	f7ff fd91 	bl	8001534 <HAL_GetTick>
 8001a12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a14:	e01b      	b.n	8001a4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a16:	f7ff fd8d 	bl	8001534 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d914      	bls.n	8001a4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10d      	bne.n	8001a4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e007      	b.n	8001a5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d0dc      	beq.n	8001a16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e097      	b.n	8001bb6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa8 	bl	80019e4 <ADC_ConversionStop_Disable>
 8001a94:	4603      	mov	r3, r0
 8001a96:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff49 	bl	8001930 <ADC_Enable>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 8081 	bne.w	8001bac <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab2:	f023 0302 	bic.w	r3, r3, #2
 8001ab6:	f043 0202 	orr.w	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001abe:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_ADCEx_Calibration_Start+0x158>)
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f002 fa62 	bl	8003f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ace:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ad0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ad2:	e002      	b.n	8001ada <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f9      	bne.n	8001ad4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001af0:	f7ff fd20 	bl	8001534 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001af6:	e01b      	b.n	8001b30 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001af8:	f7ff fd1c 	bl	8001534 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b0a      	cmp	r3, #10
 8001b04:	d914      	bls.n	8001b30 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f023 0312 	bic.w	r3, r3, #18
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e042      	b.n	8001bb6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1dc      	bne.n	8001af8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0204 	orr.w	r2, r2, #4
 8001b4c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b4e:	f7ff fcf1 	bl	8001534 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b54:	e01b      	b.n	8001b8e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b56:	f7ff fced 	bl	8001534 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d914      	bls.n	8001b8e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00d      	beq.n	8001b8e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	f023 0312 	bic.w	r3, r3, #18
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e013      	b.n	8001bb6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1dc      	bne.n	8001b56 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f023 0303 	bic.w	r3, r3, #3
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0ed      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f9f2 	bl	8000fcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff fc9c 	bl	8001534 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bfe:	e012      	b.n	8001c26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c00:	f7ff fc98 	bl	8001534 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d90b      	bls.n	8001c26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0c5      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0e5      	beq.n	8001c00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0202 	bic.w	r2, r2, #2
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff fc76 	bl	8001534 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4c:	f7ff fc72 	bl	8001534 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e09f      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e5      	bne.n	8001c4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7e1b      	ldrb	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e007      	b.n	8001caa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7e5b      	ldrb	r3, [r3, #25]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e007      	b.n	8001cd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e9b      	ldrb	r3, [r3, #26]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0220 	bic.w	r2, r2, #32
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7edb      	ldrb	r3, [r3, #27]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0210 	bic.w	r2, r2, #16
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0210 	orr.w	r2, r2, #16
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7f1b      	ldrb	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d108      	bne.n	8001d42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0208 	bic.w	r2, r2, #8
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7f5b      	ldrb	r3, [r3, #29]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0204 	orr.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff90 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff49 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff5e 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff90 	bl	8001e74 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5f 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb0 	bl	8001ed8 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b08b      	sub	sp, #44	; 0x2c
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	e169      	b.n	800226c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8158 	bne.w	8002266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a9a      	ldr	r2, [pc, #616]	; (8002224 <HAL_GPIO_Init+0x2a0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d05e      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fc0:	4a98      	ldr	r2, [pc, #608]	; (8002224 <HAL_GPIO_Init+0x2a0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d875      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fc6:	4a98      	ldr	r2, [pc, #608]	; (8002228 <HAL_GPIO_Init+0x2a4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d058      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fcc:	4a96      	ldr	r2, [pc, #600]	; (8002228 <HAL_GPIO_Init+0x2a4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d86f      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fd2:	4a96      	ldr	r2, [pc, #600]	; (800222c <HAL_GPIO_Init+0x2a8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d052      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fd8:	4a94      	ldr	r2, [pc, #592]	; (800222c <HAL_GPIO_Init+0x2a8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d869      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fde:	4a94      	ldr	r2, [pc, #592]	; (8002230 <HAL_GPIO_Init+0x2ac>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04c      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001fe4:	4a92      	ldr	r2, [pc, #584]	; (8002230 <HAL_GPIO_Init+0x2ac>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d863      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001fea:	4a92      	ldr	r2, [pc, #584]	; (8002234 <HAL_GPIO_Init+0x2b0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d046      	beq.n	800207e <HAL_GPIO_Init+0xfa>
 8001ff0:	4a90      	ldr	r2, [pc, #576]	; (8002234 <HAL_GPIO_Init+0x2b0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d85d      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d82a      	bhi.n	8002050 <HAL_GPIO_Init+0xcc>
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d859      	bhi.n	80020b2 <HAL_GPIO_Init+0x12e>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <HAL_GPIO_Init+0x80>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	0800207f 	.word	0x0800207f
 8002008:	08002059 	.word	0x08002059
 800200c:	0800206b 	.word	0x0800206b
 8002010:	080020ad 	.word	0x080020ad
 8002014:	080020b3 	.word	0x080020b3
 8002018:	080020b3 	.word	0x080020b3
 800201c:	080020b3 	.word	0x080020b3
 8002020:	080020b3 	.word	0x080020b3
 8002024:	080020b3 	.word	0x080020b3
 8002028:	080020b3 	.word	0x080020b3
 800202c:	080020b3 	.word	0x080020b3
 8002030:	080020b3 	.word	0x080020b3
 8002034:	080020b3 	.word	0x080020b3
 8002038:	080020b3 	.word	0x080020b3
 800203c:	080020b3 	.word	0x080020b3
 8002040:	080020b3 	.word	0x080020b3
 8002044:	080020b3 	.word	0x080020b3
 8002048:	08002061 	.word	0x08002061
 800204c:	08002075 	.word	0x08002075
 8002050:	4a79      	ldr	r2, [pc, #484]	; (8002238 <HAL_GPIO_Init+0x2b4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002056:	e02c      	b.n	80020b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e029      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	3304      	adds	r3, #4
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e024      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	3308      	adds	r3, #8
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e01f      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	330c      	adds	r3, #12
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e01a      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002086:	2304      	movs	r3, #4
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e013      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	611a      	str	r2, [r3, #16]
          break;
 800209e:	e009      	b.n	80020b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a0:	2308      	movs	r3, #8
 80020a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	615a      	str	r2, [r3, #20]
          break;
 80020aa:	e003      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x130>
          break;
 80020b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d801      	bhi.n	80020be <HAL_GPIO_Init+0x13a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	e001      	b.n	80020c2 <HAL_GPIO_Init+0x13e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d802      	bhi.n	80020d0 <HAL_GPIO_Init+0x14c>
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	e002      	b.n	80020d6 <HAL_GPIO_Init+0x152>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	3b08      	subs	r3, #8
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	210f      	movs	r1, #15
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	6a39      	ldr	r1, [r7, #32]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80b1 	beq.w	8002266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002104:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_GPIO_Init+0x2b8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a4c      	ldr	r2, [pc, #304]	; (800223c <HAL_GPIO_Init+0x2b8>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_GPIO_Init+0x2b8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_GPIO_Init+0x2bc>)
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a40      	ldr	r2, [pc, #256]	; (8002244 <HAL_GPIO_Init+0x2c0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d013      	beq.n	8002170 <HAL_GPIO_Init+0x1ec>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3f      	ldr	r2, [pc, #252]	; (8002248 <HAL_GPIO_Init+0x2c4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00d      	beq.n	800216c <HAL_GPIO_Init+0x1e8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3e      	ldr	r2, [pc, #248]	; (800224c <HAL_GPIO_Init+0x2c8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_Init+0x1e4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3d      	ldr	r2, [pc, #244]	; (8002250 <HAL_GPIO_Init+0x2cc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_GPIO_Init+0x1e0>
 8002160:	2303      	movs	r3, #3
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 8002164:	2304      	movs	r3, #4
 8002166:	e004      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 8002168:	2302      	movs	r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_GPIO_Init+0x1ee>
 8002170:	2300      	movs	r3, #0
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002182:	492f      	ldr	r1, [pc, #188]	; (8002240 <HAL_GPIO_Init+0x2bc>)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	492c      	ldr	r1, [pc, #176]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4928      	ldr	r1, [pc, #160]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4922      	ldr	r1, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	43db      	mvns	r3, r3
 80021da:	491e      	ldr	r1, [pc, #120]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4918      	ldr	r1, [pc, #96]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	4914      	ldr	r1, [pc, #80]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 8002204:	4013      	ands	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d021      	beq.n	8002258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	490e      	ldr	r1, [pc, #56]	; (8002254 <HAL_GPIO_Init+0x2d0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e021      	b.n	8002266 <HAL_GPIO_Init+0x2e2>
 8002222:	bf00      	nop
 8002224:	10320000 	.word	0x10320000
 8002228:	10310000 	.word	0x10310000
 800222c:	10220000 	.word	0x10220000
 8002230:	10210000 	.word	0x10210000
 8002234:	10120000 	.word	0x10120000
 8002238:	10110000 	.word	0x10110000
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	40010800 	.word	0x40010800
 8002248:	40010c00 	.word	0x40010c00
 800224c:	40011000 	.word	0x40011000
 8002250:	40011400 	.word	0x40011400
 8002254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_GPIO_Init+0x304>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	43db      	mvns	r3, r3
 8002260:	4909      	ldr	r1, [pc, #36]	; (8002288 <HAL_GPIO_Init+0x304>)
 8002262:	4013      	ands	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	3301      	adds	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f47f ae8e 	bne.w	8001f98 <HAL_GPIO_Init+0x14>
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	372c      	adds	r7, #44	; 0x2c
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	611a      	str	r2, [r3, #16]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43d9      	mvns	r1, r3
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	400b      	ands	r3, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	611a      	str	r2, [r3, #16]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e12b      	b.n	800255a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fea4 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2224      	movs	r2, #36	; 0x24
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002352:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002354:	f001 fd1e 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8002358:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a81      	ldr	r2, [pc, #516]	; (8002564 <HAL_I2C_Init+0x274>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d807      	bhi.n	8002374 <HAL_I2C_Init+0x84>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a80      	ldr	r2, [pc, #512]	; (8002568 <HAL_I2C_Init+0x278>)
 8002368:	4293      	cmp	r3, r2
 800236a:	bf94      	ite	ls
 800236c:	2301      	movls	r3, #1
 800236e:	2300      	movhi	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e006      	b.n	8002382 <HAL_I2C_Init+0x92>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a7d      	ldr	r2, [pc, #500]	; (800256c <HAL_I2C_Init+0x27c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	bf94      	ite	ls
 800237c:	2301      	movls	r3, #1
 800237e:	2300      	movhi	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0e7      	b.n	800255a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a78      	ldr	r2, [pc, #480]	; (8002570 <HAL_I2C_Init+0x280>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0c9b      	lsrs	r3, r3, #18
 8002394:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a6a      	ldr	r2, [pc, #424]	; (8002564 <HAL_I2C_Init+0x274>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d802      	bhi.n	80023c4 <HAL_I2C_Init+0xd4>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3301      	adds	r3, #1
 80023c2:	e009      	b.n	80023d8 <HAL_I2C_Init+0xe8>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	4a69      	ldr	r2, [pc, #420]	; (8002574 <HAL_I2C_Init+0x284>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	3301      	adds	r3, #1
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	495c      	ldr	r1, [pc, #368]	; (8002564 <HAL_I2C_Init+0x274>)
 80023f4:	428b      	cmp	r3, r1
 80023f6:	d819      	bhi.n	800242c <HAL_I2C_Init+0x13c>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1e59      	subs	r1, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fbb1 f3f3 	udiv	r3, r1, r3
 8002406:	1c59      	adds	r1, r3, #1
 8002408:	f640 73fc 	movw	r3, #4092	; 0xffc
 800240c:	400b      	ands	r3, r1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_I2C_Init+0x138>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e59      	subs	r1, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002420:	3301      	adds	r3, #1
 8002422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002426:	e051      	b.n	80024cc <HAL_I2C_Init+0x1dc>
 8002428:	2304      	movs	r3, #4
 800242a:	e04f      	b.n	80024cc <HAL_I2C_Init+0x1dc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <HAL_I2C_Init+0x168>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1e58      	subs	r0, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	440b      	add	r3, r1
 8002442:	fbb0 f3f3 	udiv	r3, r0, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e012      	b.n	800247e <HAL_I2C_Init+0x18e>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e58      	subs	r0, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	0099      	lsls	r1, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	fbb0 f3f3 	udiv	r3, r0, r3
 800246e:	3301      	adds	r3, #1
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Init+0x196>
 8002482:	2301      	movs	r3, #1
 8002484:	e022      	b.n	80024cc <HAL_I2C_Init+0x1dc>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10e      	bne.n	80024ac <HAL_I2C_Init+0x1bc>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1e58      	subs	r0, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	440b      	add	r3, r1
 800249c:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024aa:	e00f      	b.n	80024cc <HAL_I2C_Init+0x1dc>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e58      	subs	r0, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	0099      	lsls	r1, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	6809      	ldr	r1, [r1, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6911      	ldr	r1, [r2, #16]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68d2      	ldr	r2, [r2, #12]
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	430b      	orrs	r3, r1
 800250e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	000186a0 	.word	0x000186a0
 8002568:	001e847f 	.word	0x001e847f
 800256c:	003d08ff 	.word	0x003d08ff
 8002570:	431bde83 	.word	0x431bde83
 8002574:	10624dd3 	.word	0x10624dd3

08002578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	817b      	strh	r3, [r7, #10]
 800258a:	460b      	mov	r3, r1
 800258c:	813b      	strh	r3, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002592:	f7fe ffcf 	bl	8001534 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	f040 80d9 	bne.w	8002758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2319      	movs	r3, #25
 80025ac:	2201      	movs	r2, #1
 80025ae:	496d      	ldr	r1, [pc, #436]	; (8002764 <HAL_I2C_Mem_Write+0x1ec>)
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fdef 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
 80025be:	e0cc      	b.n	800275a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Mem_Write+0x56>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0c5      	b.n	800275a <HAL_I2C_Mem_Write+0x1e2>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d007      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2221      	movs	r2, #33	; 0x21
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a4d      	ldr	r2, [pc, #308]	; (8002768 <HAL_I2C_Mem_Write+0x1f0>)
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002636:	88f8      	ldrh	r0, [r7, #6]
 8002638:	893a      	ldrh	r2, [r7, #8]
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4603      	mov	r3, r0
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fc26 	bl	8002e98 <I2C_RequestMemoryWrite>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d052      	beq.n	80026f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e081      	b.n	800275a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 feb4 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_I2C_Mem_Write+0x180>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d017      	beq.n	80026f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1aa      	bne.n	8002656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fea7 	bl	8003458 <I2C_WaitOnBTFFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	2b04      	cmp	r3, #4
 8002716:	d107      	bne.n	8002728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e016      	b.n	800275a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000

0800276c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4603      	mov	r3, r0
 800277c:	817b      	strh	r3, [r7, #10]
 800277e:	460b      	mov	r3, r1
 8002780:	813b      	strh	r3, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800278a:	f7fe fed3 	bl	8001534 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b20      	cmp	r3, #32
 800279a:	f040 8244 	bne.w	8002c26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2319      	movs	r3, #25
 80027a4:	2201      	movs	r2, #1
 80027a6:	4982      	ldr	r1, [pc, #520]	; (80029b0 <HAL_I2C_Mem_Read+0x244>)
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fcf3 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	e237      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x5a>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e230      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d007      	beq.n	80027ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2222      	movs	r2, #34	; 0x22
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2240      	movs	r2, #64	; 0x40
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a62      	ldr	r2, [pc, #392]	; (80029b4 <HAL_I2C_Mem_Read+0x248>)
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800282e:	88f8      	ldrh	r0, [r7, #6]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	8979      	ldrh	r1, [r7, #10]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4603      	mov	r3, r0
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fbc0 	bl	8002fc4 <I2C_RequestMemoryRead>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e1ec      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d113      	bne.n	800287e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e1c0      	b.n	8002c00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	2b01      	cmp	r3, #1
 8002884:	d11e      	bne.n	80028c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002896:	b672      	cpsid	i
}
 8002898:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028c0:	b662      	cpsie	i
}
 80028c2:	e035      	b.n	8002930 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d11e      	bne.n	800290a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028dc:	b672      	cpsid	i
}
 80028de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002906:	b662      	cpsie	i
}
 8002908:	e012      	b.n	8002930 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002918:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002930:	e166      	b.n	8002c00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	2b03      	cmp	r3, #3
 8002938:	f200 811f 	bhi.w	8002b7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b01      	cmp	r3, #1
 8002942:	d123      	bne.n	800298c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fdcd 	bl	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e167      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800298a:	e139      	b.n	8002c00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b02      	cmp	r3, #2
 8002992:	d152      	bne.n	8002a3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	2200      	movs	r2, #0
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <HAL_I2C_Mem_Read+0x24c>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fbf8 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e13c      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000
 80029b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
}
 80029be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a02:	b662      	cpsie	i
}
 8002a04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a38:	e0e2      	b.n	8002c00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	2200      	movs	r2, #0
 8002a42:	497b      	ldr	r1, [pc, #492]	; (8002c30 <HAL_I2C_Mem_Read+0x4c4>)
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fba5 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0e9      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a9a:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_I2C_Mem_Read+0x4c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	4a65      	ldr	r2, [pc, #404]	; (8002c38 <HAL_I2C_Mem_Read+0x4cc>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0a1a      	lsrs	r2, r3, #8
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00da      	lsls	r2, r3, #3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d118      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae2:	b662      	cpsie	i
}
 8002ae4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e09a      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d1d9      	bne.n	8002ab4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b42:	b662      	cpsie	i
}
 8002b44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b78:	e042      	b.n	8002c00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fcb2 	bl	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e04c      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d118      	bne.n	8002c00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f ae94 	bne.w	8002932 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	00010004 	.word	0x00010004
 8002c34:	20000000 	.word	0x20000000
 8002c38:	14f8b589 	.word	0x14f8b589

08002c3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7fe fc72 	bl	8001534 <HAL_GetTick>
 8002c50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	f040 8111 	bne.w	8002e86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2319      	movs	r3, #25
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4988      	ldr	r1, [pc, #544]	; (8002e90 <HAL_I2C_IsDeviceReady+0x254>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fa90 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e104      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2C_IsDeviceReady+0x50>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0fd      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d007      	beq.n	8002cb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2224      	movs	r2, #36	; 0x24
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a70      	ldr	r2, [pc, #448]	; (8002e94 <HAL_I2C_IsDeviceReady+0x258>)
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa4e 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d103      	bne.n	8002d16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0b6      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fc03 	bl	8001534 <HAL_GetTick>
 8002d2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d5e:	e025      	b.n	8002dac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7fe fbe8 	bl	8001534 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <HAL_I2C_IsDeviceReady+0x13a>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22a0      	movs	r2, #160	; 0xa0
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2ba0      	cmp	r3, #160	; 0xa0
 8002db6:	d005      	beq.n	8002dc4 <HAL_I2C_IsDeviceReady+0x188>
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_I2C_IsDeviceReady+0x188>
 8002dbe:	7dbb      	ldrb	r3, [r7, #22]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0cd      	beq.n	8002d60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d129      	bne.n	8002e2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2319      	movs	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	4921      	ldr	r1, [pc, #132]	; (8002e90 <HAL_I2C_IsDeviceReady+0x254>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f9c2 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e036      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e02c      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2319      	movs	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	490f      	ldr	r1, [pc, #60]	; (8002e90 <HAL_I2C_IsDeviceReady+0x254>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f99e 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e012      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	f4ff af32 	bcc.w	8002cd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	00100002 	.word	0x00100002
 8002e94:	ffff0000 	.word	0xffff0000

08002e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f960 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee8:	d103      	bne.n	8002ef2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e05f      	b.n	8002fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	492d      	ldr	r1, [pc, #180]	; (8002fc0 <I2C_RequestMemoryWrite+0x128>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f9bb 	bl	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e04c      	b.n	8002fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa46 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d107      	bne.n	8002f5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02b      	b.n	8002fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	e021      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fa20 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e005      	b.n	8002fb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	00010002 	.word	0x00010002

08002fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	813b      	strh	r3, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	2200      	movs	r2, #0
 8003006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8c2 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003024:	d103      	bne.n	800302e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0aa      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	4952      	ldr	r1, [pc, #328]	; (8003190 <I2C_RequestMemoryRead+0x1cc>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f91d 	bl	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e097      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f9a8 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b04      	cmp	r3, #4
 8003084:	d107      	bne.n	8003096 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e076      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030a0:	893b      	ldrh	r3, [r7, #8]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	611a      	str	r2, [r3, #16]
 80030aa:	e021      	b.n	80030f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f982 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d107      	bne.n	80030e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e050      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e6:	893b      	ldrh	r3, [r7, #8]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	6a39      	ldr	r1, [r7, #32]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f967 	bl	80033c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	2b04      	cmp	r3, #4
 8003106:	d107      	bne.n	8003118 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e035      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2200      	movs	r2, #0
 8003134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f82b 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d103      	bne.n	800315c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e013      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	6a3a      	ldr	r2, [r7, #32]
 8003174:	4906      	ldr	r1, [pc, #24]	; (8003190 <I2C_RequestMemoryRead+0x1cc>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f886 	bl	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00010002 	.word	0x00010002

08003194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	e048      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d044      	beq.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7fe f9c1 	bl	8001534 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d139      	bne.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10d      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	e00c      	b.n	8003204 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	429a      	cmp	r2, r3
 8003208:	d116      	bne.n	8003238 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e023      	b.n	8003280 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10d      	bne.n	800325e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	e00c      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	429a      	cmp	r2, r3
 800327c:	d093      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003296:	e071      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d123      	bne.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e067      	b.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d041      	beq.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f8:	f7fe f91c 	bl	8001534 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d136      	bne.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	e00b      	b.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e021      	b.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10c      	bne.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e00b      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f af6d 	bne.w	8003298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8e3 	bl	80035a2 <I2C_IsAcknowledgeFailed>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e034      	b.n	8003450 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d028      	beq.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe f8a1 	bl	8001534 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11d      	bne.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d016      	beq.n	8003440 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d1c3      	bne.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003464:	e034      	b.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f89b 	bl	80035a2 <I2C_IsAcknowledgeFailed>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e034      	b.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d028      	beq.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe f859 	bl	8001534 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11d      	bne.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d016      	beq.n	80034d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e007      	b.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d1c3      	bne.n	8003466 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034f4:	e049      	b.n	800358a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d119      	bne.n	8003538 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0210 	mvn.w	r2, #16
 800350c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e030      	b.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7fd fffc 	bl	8001534 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11d      	bne.n	800358a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d016      	beq.n	800358a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e007      	b.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d1ae      	bne.n	80034f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b8:	d11b      	bne.n	80035f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f043 0204 	orr.w	r2, r3, #4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e272      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8087 	beq.w	800372e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003620:	4b92      	ldr	r3, [pc, #584]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00c      	beq.n	8003646 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d112      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
 8003638:	4b8c      	ldr	r3, [pc, #560]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b89      	ldr	r3, [pc, #548]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d06c      	beq.n	800372c <HAL_RCC_OscConfig+0x12c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d168      	bne.n	800372c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e24c      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x76>
 8003668:	4b80      	ldr	r3, [pc, #512]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7f      	ldr	r2, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e02e      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x98>
 800367e:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b78      	ldr	r3, [pc, #480]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a77      	ldr	r2, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0xbc>
 80036a2:	4b72      	ldr	r3, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a71      	ldr	r2, [pc, #452]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xd4>
 80036bc:	4b6b      	ldr	r3, [pc, #428]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd ff2a 	bl	8001534 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fd ff26 	bl	8001534 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e200      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe4>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd ff16 	bl	8001534 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fd ff12 	bl	8001534 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1ec      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b53      	ldr	r3, [pc, #332]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x10c>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373a:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003746:	4b49      	ldr	r3, [pc, #292]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
 8003752:	4b46      	ldr	r3, [pc, #280]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c0      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4939      	ldr	r1, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_OscConfig+0x270>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd fecb 	bl	8001534 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fd fec7 	bl	8001534 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_RCC_OscConfig+0x270>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd feaa 	bl	8001534 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fd fea6 	bl	8001534 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e180      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03a      	beq.n	8003884 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_RCC_OscConfig+0x274>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381c:	f7fd fe8a 	bl	8001534 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7fd fe86 	bl	8001534 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e160      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_OscConfig+0x26c>)
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 face 	bl	8003de4 <RCC_Delay>
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_RCC_OscConfig+0x274>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd fe70 	bl	8001534 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003856:	e00f      	b.n	8003878 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003858:	f7fd fe6c 	bl	8001534 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d908      	bls.n	8003878 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e146      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	42420000 	.word	0x42420000
 8003874:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e9      	bne.n	8003858 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a6 	beq.w	80039de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7e      	ldr	r2, [pc, #504]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fd fe2d 	bl	8001534 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fd fe29 	bl	8001534 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e103      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4c8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x312>
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e02d      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x334>
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
 8003932:	e01c      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b05      	cmp	r3, #5
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x356>
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4a60      	ldr	r2, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e00b      	b.n	800396e <HAL_RCC_OscConfig+0x36e>
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fd fddd 	bl	8001534 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd fdd9 	bl	8001534 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0b1      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ee      	beq.n	800397e <HAL_RCC_OscConfig+0x37e>
 80039a0:	e014      	b.n	80039cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fdc7 	bl	8001534 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd fdc3 	bl	8001534 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e09b      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a3b      	ldr	r2, [pc, #236]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8087 	beq.w	8003af6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d061      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d146      	bne.n	8003a8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd fd97 	bl	8001534 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd fd93 	bl	8001534 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e06d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d108      	bne.n	8003a44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a19      	ldr	r1, [r3, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	430b      	orrs	r3, r1
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd fd67 	bl	8001534 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd fd63 	bl	8001534 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e03d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x46a>
 8003a88:	e035      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x4cc>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fd50 	bl	8001534 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd fd4c 	bl	8001534 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e026      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x498>
 8003ab6:	e01e      	b.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e019      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x500>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4965      	ldr	r1, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d040      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e073      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fc9e 	bl	8001534 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd fc9a 	bl	8001534 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e053      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fbfc 	bl	80014b0 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08005450 	.word	0x08005450
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d002      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x30>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x36>
 8003d06:	e027      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d0a:	613b      	str	r3, [r7, #16]
      break;
 8003d0c:	e027      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	0c9b      	lsrs	r3, r3, #18
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x94>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0c5b      	lsrs	r3, r3, #17
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d3a:	fb03 f202 	mul.w	r2, r3, r2
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e004      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	613b      	str	r3, [r7, #16]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d5a:	613b      	str	r3, [r7, #16]
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	693b      	ldr	r3, [r7, #16]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	007a1200 	.word	0x007a1200
 8003d74:	08005468 	.word	0x08005468
 8003d78:	08005478 	.word	0x08005478
 8003d7c:	003d0900 	.word	0x003d0900

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff2 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08005460 	.word	0x08005460

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffde 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0adb      	lsrs	r3, r3, #11
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08005460 	.word	0x08005460

08003de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <RCC_Delay+0x34>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <RCC_Delay+0x38>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0a5b      	lsrs	r3, r3, #9
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e00:	bf00      	nop
  }
  while (Delay --);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	60fa      	str	r2, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f9      	bne.n	8003e00 <RCC_Delay+0x1c>
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d07d      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e40:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	61d3      	str	r3, [r2, #28]
 8003e58:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e68:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d118      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a42      	ldr	r2, [pc, #264]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e80:	f7fd fb58 	bl	8001534 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fd fb54 	bl	8001534 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e06d      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d027      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec4:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eda:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fd fb23 	bl	8001534 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd fb1f 	bl	8001534 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ee      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4917      	ldr	r1, [pc, #92]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	490b      	ldr	r1, [pc, #44]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42420440 	.word	0x42420440

08003f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	f200 808a 	bhi.w	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d045      	beq.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d075      	beq.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003fc2:	e082      	b.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003fc4:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fca:	4b45      	ldr	r3, [pc, #276]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d07b      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0c9b      	lsrs	r3, r3, #18
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d015      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fee:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c5b      	lsrs	r3, r3, #17
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004024:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004030:	d102      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	61bb      	str	r3, [r7, #24]
      break;
 8004036:	e04a      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4a2d      	ldr	r2, [pc, #180]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
      break;
 8004046:	e042      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004048:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004058:	d108      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e01f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004084:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e00f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004096:	d11c      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80040a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040a8:	61bb      	str	r3, [r7, #24]
      break;
 80040aa:	e012      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80040ac:	e011      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040ae:	f7ff fe85 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0b9b      	lsrs	r3, r3, #14
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	61bb      	str	r3, [r7, #24]
      break;
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040d2:	bf00      	nop
    }
  }
  return (frequency);
 80040d4:	69bb      	ldr	r3, [r7, #24]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	0800547c 	.word	0x0800547c
 80040e8:	0800548c 	.word	0x0800548c
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	003d0900 	.word	0x003d0900
 80040f4:	aaaaaaab 	.word	0xaaaaaaab

080040f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e076      	b.n	80041f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d009      	beq.n	8004130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	e005      	b.n	8004130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc ffc8 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	ea42 0103 	orr.w	r1, r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	0c1a      	lsrs	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f002 0204 	and.w	r2, r2, #4
 80041d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e042      	b.n	8004298 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc ffa4 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f91d 	bl	8004484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d16d      	bne.n	800439c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Transmit+0x2c>
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e066      	b.n	800439e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042de:	f7fd f929 	bl	8001534 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d108      	bne.n	800430c <HAL_UART_Transmit+0x6c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e003      	b.n	8004314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004314:	e02a      	b.n	800436c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f840 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e036      	b.n	800439e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3302      	adds	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e007      	b.n	800435e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	3301      	adds	r3, #1
 800435c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1cf      	bne.n	8004316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	2140      	movs	r1, #64	; 0x40
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f810 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e006      	b.n	800439e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b090      	sub	sp, #64	; 0x40
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	e050      	b.n	800445a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d04c      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c6:	f7fd f8b5 	bl	8001534 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d241      	bcs.n	800445a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f6:	637a      	str	r2, [r7, #52]	; 0x34
 80043f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	63bb      	str	r3, [r7, #56]	; 0x38
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442a:	623a      	str	r2, [r7, #32]
 800442c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	61bb      	str	r3, [r7, #24]
   return(result);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e00f      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d09f      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3740      	adds	r7, #64	; 0x40
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044be:	f023 030c 	bic.w	r3, r3, #12
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	430b      	orrs	r3, r1
 80044ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <UART_SetConfig+0x114>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d103      	bne.n	80044f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7ff fc66 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	e002      	b.n	80044fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7ff fc4e 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 80044f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009a      	lsls	r2, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <UART_SetConfig+0x118>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	0119      	lsls	r1, r3, #4
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <UART_SetConfig+0x118>)
 8004532:	fba3 0302 	umull	r0, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2064      	movs	r0, #100	; 0x64
 800453a:	fb00 f303 	mul.w	r3, r0, r3
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	3332      	adds	r3, #50	; 0x32
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <UART_SetConfig+0x118>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004550:	4419      	add	r1, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	009a      	lsls	r2, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	fbb2 f2f3 	udiv	r2, r2, r3
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <UART_SetConfig+0x118>)
 800456a:	fba3 0302 	umull	r0, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2064      	movs	r0, #100	; 0x64
 8004572:	fb00 f303 	mul.w	r3, r0, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a07      	ldr	r2, [pc, #28]	; (800459c <UART_SetConfig+0x118>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	440a      	add	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40013800 	.word	0x40013800
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <std>:
 80045a0:	2300      	movs	r3, #0
 80045a2:	b510      	push	{r4, lr}
 80045a4:	4604      	mov	r4, r0
 80045a6:	e9c0 3300 	strd	r3, r3, [r0]
 80045aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045ae:	6083      	str	r3, [r0, #8]
 80045b0:	8181      	strh	r1, [r0, #12]
 80045b2:	6643      	str	r3, [r0, #100]	; 0x64
 80045b4:	81c2      	strh	r2, [r0, #14]
 80045b6:	6183      	str	r3, [r0, #24]
 80045b8:	4619      	mov	r1, r3
 80045ba:	2208      	movs	r2, #8
 80045bc:	305c      	adds	r0, #92	; 0x5c
 80045be:	f000 f906 	bl	80047ce <memset>
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <std+0x58>)
 80045c4:	6224      	str	r4, [r4, #32]
 80045c6:	6263      	str	r3, [r4, #36]	; 0x24
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <std+0x5c>)
 80045ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <std+0x60>)
 80045ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <std+0x64>)
 80045d2:	6323      	str	r3, [r4, #48]	; 0x30
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <std+0x68>)
 80045d6:	429c      	cmp	r4, r3
 80045d8:	d006      	beq.n	80045e8 <std+0x48>
 80045da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80045de:	4294      	cmp	r4, r2
 80045e0:	d002      	beq.n	80045e8 <std+0x48>
 80045e2:	33d0      	adds	r3, #208	; 0xd0
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d105      	bne.n	80045f4 <std+0x54>
 80045e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f000 b966 	b.w	80048c0 <__retarget_lock_init_recursive>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	08004749 	.word	0x08004749
 80045fc:	0800476b 	.word	0x0800476b
 8004600:	080047a3 	.word	0x080047a3
 8004604:	080047c7 	.word	0x080047c7
 8004608:	20000238 	.word	0x20000238

0800460c <stdio_exit_handler>:
 800460c:	4a02      	ldr	r2, [pc, #8]	; (8004618 <stdio_exit_handler+0xc>)
 800460e:	4903      	ldr	r1, [pc, #12]	; (800461c <stdio_exit_handler+0x10>)
 8004610:	4803      	ldr	r0, [pc, #12]	; (8004620 <stdio_exit_handler+0x14>)
 8004612:	f000 b869 	b.w	80046e8 <_fwalk_sglue>
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c
 800461c:	08005161 	.word	0x08005161
 8004620:	20000018 	.word	0x20000018

08004624 <cleanup_stdio>:
 8004624:	6841      	ldr	r1, [r0, #4]
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <cleanup_stdio+0x34>)
 8004628:	b510      	push	{r4, lr}
 800462a:	4299      	cmp	r1, r3
 800462c:	4604      	mov	r4, r0
 800462e:	d001      	beq.n	8004634 <cleanup_stdio+0x10>
 8004630:	f000 fd96 	bl	8005160 <_fflush_r>
 8004634:	68a1      	ldr	r1, [r4, #8]
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <cleanup_stdio+0x38>)
 8004638:	4299      	cmp	r1, r3
 800463a:	d002      	beq.n	8004642 <cleanup_stdio+0x1e>
 800463c:	4620      	mov	r0, r4
 800463e:	f000 fd8f 	bl	8005160 <_fflush_r>
 8004642:	68e1      	ldr	r1, [r4, #12]
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <cleanup_stdio+0x3c>)
 8004646:	4299      	cmp	r1, r3
 8004648:	d004      	beq.n	8004654 <cleanup_stdio+0x30>
 800464a:	4620      	mov	r0, r4
 800464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004650:	f000 bd86 	b.w	8005160 <_fflush_r>
 8004654:	bd10      	pop	{r4, pc}
 8004656:	bf00      	nop
 8004658:	20000238 	.word	0x20000238
 800465c:	200002a0 	.word	0x200002a0
 8004660:	20000308 	.word	0x20000308

08004664 <global_stdio_init.part.0>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <global_stdio_init.part.0+0x30>)
 8004668:	4c0b      	ldr	r4, [pc, #44]	; (8004698 <global_stdio_init.part.0+0x34>)
 800466a:	4a0c      	ldr	r2, [pc, #48]	; (800469c <global_stdio_init.part.0+0x38>)
 800466c:	4620      	mov	r0, r4
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	2104      	movs	r1, #4
 8004672:	2200      	movs	r2, #0
 8004674:	f7ff ff94 	bl	80045a0 <std>
 8004678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800467c:	2201      	movs	r2, #1
 800467e:	2109      	movs	r1, #9
 8004680:	f7ff ff8e 	bl	80045a0 <std>
 8004684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004688:	2202      	movs	r2, #2
 800468a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468e:	2112      	movs	r1, #18
 8004690:	f7ff bf86 	b.w	80045a0 <std>
 8004694:	20000370 	.word	0x20000370
 8004698:	20000238 	.word	0x20000238
 800469c:	0800460d 	.word	0x0800460d

080046a0 <__sfp_lock_acquire>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__sfp_lock_acquire+0x8>)
 80046a2:	f000 b90e 	b.w	80048c2 <__retarget_lock_acquire_recursive>
 80046a6:	bf00      	nop
 80046a8:	20000379 	.word	0x20000379

080046ac <__sfp_lock_release>:
 80046ac:	4801      	ldr	r0, [pc, #4]	; (80046b4 <__sfp_lock_release+0x8>)
 80046ae:	f000 b909 	b.w	80048c4 <__retarget_lock_release_recursive>
 80046b2:	bf00      	nop
 80046b4:	20000379 	.word	0x20000379

080046b8 <__sinit>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
 80046bc:	f7ff fff0 	bl	80046a0 <__sfp_lock_acquire>
 80046c0:	6a23      	ldr	r3, [r4, #32]
 80046c2:	b11b      	cbz	r3, 80046cc <__sinit+0x14>
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c8:	f7ff bff0 	b.w	80046ac <__sfp_lock_release>
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <__sinit+0x28>)
 80046ce:	6223      	str	r3, [r4, #32]
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <__sinit+0x2c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f5      	bne.n	80046c4 <__sinit+0xc>
 80046d8:	f7ff ffc4 	bl	8004664 <global_stdio_init.part.0>
 80046dc:	e7f2      	b.n	80046c4 <__sinit+0xc>
 80046de:	bf00      	nop
 80046e0:	08004625 	.word	0x08004625
 80046e4:	20000370 	.word	0x20000370

080046e8 <_fwalk_sglue>:
 80046e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ec:	4607      	mov	r7, r0
 80046ee:	4688      	mov	r8, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	2600      	movs	r6, #0
 80046f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046f8:	f1b9 0901 	subs.w	r9, r9, #1
 80046fc:	d505      	bpl.n	800470a <_fwalk_sglue+0x22>
 80046fe:	6824      	ldr	r4, [r4, #0]
 8004700:	2c00      	cmp	r4, #0
 8004702:	d1f7      	bne.n	80046f4 <_fwalk_sglue+0xc>
 8004704:	4630      	mov	r0, r6
 8004706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d907      	bls.n	8004720 <_fwalk_sglue+0x38>
 8004710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004714:	3301      	adds	r3, #1
 8004716:	d003      	beq.n	8004720 <_fwalk_sglue+0x38>
 8004718:	4629      	mov	r1, r5
 800471a:	4638      	mov	r0, r7
 800471c:	47c0      	blx	r8
 800471e:	4306      	orrs	r6, r0
 8004720:	3568      	adds	r5, #104	; 0x68
 8004722:	e7e9      	b.n	80046f8 <_fwalk_sglue+0x10>

08004724 <iprintf>:
 8004724:	b40f      	push	{r0, r1, r2, r3}
 8004726:	b507      	push	{r0, r1, r2, lr}
 8004728:	4906      	ldr	r1, [pc, #24]	; (8004744 <iprintf+0x20>)
 800472a:	ab04      	add	r3, sp, #16
 800472c:	6808      	ldr	r0, [r1, #0]
 800472e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004732:	6881      	ldr	r1, [r0, #8]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	f000 f9e3 	bl	8004b00 <_vfiprintf_r>
 800473a:	b003      	add	sp, #12
 800473c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004740:	b004      	add	sp, #16
 8004742:	4770      	bx	lr
 8004744:	20000064 	.word	0x20000064

08004748 <__sread>:
 8004748:	b510      	push	{r4, lr}
 800474a:	460c      	mov	r4, r1
 800474c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004750:	f000 f868 	bl	8004824 <_read_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	bfab      	itete	ge
 8004758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800475a:	89a3      	ldrhlt	r3, [r4, #12]
 800475c:	181b      	addge	r3, r3, r0
 800475e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004762:	bfac      	ite	ge
 8004764:	6563      	strge	r3, [r4, #84]	; 0x54
 8004766:	81a3      	strhlt	r3, [r4, #12]
 8004768:	bd10      	pop	{r4, pc}

0800476a <__swrite>:
 800476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	461f      	mov	r7, r3
 8004770:	898b      	ldrh	r3, [r1, #12]
 8004772:	4605      	mov	r5, r0
 8004774:	05db      	lsls	r3, r3, #23
 8004776:	460c      	mov	r4, r1
 8004778:	4616      	mov	r6, r2
 800477a:	d505      	bpl.n	8004788 <__swrite+0x1e>
 800477c:	2302      	movs	r3, #2
 800477e:	2200      	movs	r2, #0
 8004780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004784:	f000 f83c 	bl	8004800 <_lseek_r>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	4632      	mov	r2, r6
 800478c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	4628      	mov	r0, r5
 8004794:	463b      	mov	r3, r7
 8004796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800479a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	f000 b853 	b.w	8004848 <_write_r>

080047a2 <__sseek>:
 80047a2:	b510      	push	{r4, lr}
 80047a4:	460c      	mov	r4, r1
 80047a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047aa:	f000 f829 	bl	8004800 <_lseek_r>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	bf15      	itete	ne
 80047b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80047b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047be:	81a3      	strheq	r3, [r4, #12]
 80047c0:	bf18      	it	ne
 80047c2:	81a3      	strhne	r3, [r4, #12]
 80047c4:	bd10      	pop	{r4, pc}

080047c6 <__sclose>:
 80047c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ca:	f000 b809 	b.w	80047e0 <_close_r>

080047ce <memset>:
 80047ce:	4603      	mov	r3, r0
 80047d0:	4402      	add	r2, r0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d100      	bne.n	80047d8 <memset+0xa>
 80047d6:	4770      	bx	lr
 80047d8:	f803 1b01 	strb.w	r1, [r3], #1
 80047dc:	e7f9      	b.n	80047d2 <memset+0x4>
	...

080047e0 <_close_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	2300      	movs	r3, #0
 80047e4:	4d05      	ldr	r5, [pc, #20]	; (80047fc <_close_r+0x1c>)
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fda6 	bl	800133c <_close>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_close_r+0x1a>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_close_r+0x1a>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20000374 	.word	0x20000374

08004800 <_lseek_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	2200      	movs	r2, #0
 800480a:	4d05      	ldr	r5, [pc, #20]	; (8004820 <_lseek_r+0x20>)
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7fc fdb8 	bl	8001384 <_lseek>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_lseek_r+0x1e>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_lseek_r+0x1e>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000374 	.word	0x20000374

08004824 <_read_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	2200      	movs	r2, #0
 800482e:	4d05      	ldr	r5, [pc, #20]	; (8004844 <_read_r+0x20>)
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7fc fd49 	bl	80012ca <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_read_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_read_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000374 	.word	0x20000374

08004848 <_write_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	2200      	movs	r2, #0
 8004852:	4d05      	ldr	r5, [pc, #20]	; (8004868 <_write_r+0x20>)
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fd54 	bl	8001304 <_write>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_write_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_write_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000374 	.word	0x20000374

0800486c <__errno>:
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <__errno+0x8>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000064 	.word	0x20000064

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	2600      	movs	r6, #0
 800487c:	4d0c      	ldr	r5, [pc, #48]	; (80048b0 <__libc_init_array+0x38>)
 800487e:	4c0d      	ldr	r4, [pc, #52]	; (80048b4 <__libc_init_array+0x3c>)
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	f000 fdca 	bl	8005420 <_init>
 800488c:	2600      	movs	r6, #0
 800488e:	4d0a      	ldr	r5, [pc, #40]	; (80048b8 <__libc_init_array+0x40>)
 8004890:	4c0a      	ldr	r4, [pc, #40]	; (80048bc <__libc_init_array+0x44>)
 8004892:	1b64      	subs	r4, r4, r5
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	080054c4 	.word	0x080054c4
 80048b4:	080054c4 	.word	0x080054c4
 80048b8:	080054c4 	.word	0x080054c4
 80048bc:	080054c8 	.word	0x080054c8

080048c0 <__retarget_lock_init_recursive>:
 80048c0:	4770      	bx	lr

080048c2 <__retarget_lock_acquire_recursive>:
 80048c2:	4770      	bx	lr

080048c4 <__retarget_lock_release_recursive>:
 80048c4:	4770      	bx	lr
	...

080048c8 <_free_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d040      	beq.n	8004952 <_free_r+0x8a>
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	18e4      	addlt	r4, r4, r3
 80048dc:	f000 f8dc 	bl	8004a98 <__malloc_lock>
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <_free_r+0x8c>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	b933      	cbnz	r3, 80048f4 <_free_r+0x2c>
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6014      	str	r4, [r2, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f000 b8d8 	b.w	8004aa4 <__malloc_unlock>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d908      	bls.n	800490a <_free_r+0x42>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	e7ed      	b.n	80048e6 <_free_r+0x1e>
 800490a:	461a      	mov	r2, r3
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b10b      	cbz	r3, 8004914 <_free_r+0x4c>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d9fa      	bls.n	800490a <_free_r+0x42>
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	1850      	adds	r0, r2, r1
 8004918:	42a0      	cmp	r0, r4
 800491a:	d10b      	bne.n	8004934 <_free_r+0x6c>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4401      	add	r1, r0
 8004920:	1850      	adds	r0, r2, r1
 8004922:	4283      	cmp	r3, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	d1e0      	bne.n	80048ea <_free_r+0x22>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4408      	add	r0, r1
 800492e:	6010      	str	r0, [r2, #0]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	e7da      	b.n	80048ea <_free_r+0x22>
 8004934:	d902      	bls.n	800493c <_free_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	e7d6      	b.n	80048ea <_free_r+0x22>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	1821      	adds	r1, r4, r0
 8004940:	428b      	cmp	r3, r1
 8004942:	bf01      	itttt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	1809      	addeq	r1, r1, r0
 800494a:	6021      	streq	r1, [r4, #0]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	6054      	str	r4, [r2, #4]
 8004950:	e7cb      	b.n	80048ea <_free_r+0x22>
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	2000037c 	.word	0x2000037c

08004958 <sbrk_aligned>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4e0e      	ldr	r6, [pc, #56]	; (8004994 <sbrk_aligned+0x3c>)
 800495c:	460c      	mov	r4, r1
 800495e:	6831      	ldr	r1, [r6, #0]
 8004960:	4605      	mov	r5, r0
 8004962:	b911      	cbnz	r1, 800496a <sbrk_aligned+0x12>
 8004964:	f000 fcba 	bl	80052dc <_sbrk_r>
 8004968:	6030      	str	r0, [r6, #0]
 800496a:	4621      	mov	r1, r4
 800496c:	4628      	mov	r0, r5
 800496e:	f000 fcb5 	bl	80052dc <_sbrk_r>
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	d00a      	beq.n	800498c <sbrk_aligned+0x34>
 8004976:	1cc4      	adds	r4, r0, #3
 8004978:	f024 0403 	bic.w	r4, r4, #3
 800497c:	42a0      	cmp	r0, r4
 800497e:	d007      	beq.n	8004990 <sbrk_aligned+0x38>
 8004980:	1a21      	subs	r1, r4, r0
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fcaa 	bl	80052dc <_sbrk_r>
 8004988:	3001      	adds	r0, #1
 800498a:	d101      	bne.n	8004990 <sbrk_aligned+0x38>
 800498c:	f04f 34ff 	mov.w	r4, #4294967295
 8004990:	4620      	mov	r0, r4
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	20000380 	.word	0x20000380

08004998 <_malloc_r>:
 8004998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800499c:	1ccd      	adds	r5, r1, #3
 800499e:	f025 0503 	bic.w	r5, r5, #3
 80049a2:	3508      	adds	r5, #8
 80049a4:	2d0c      	cmp	r5, #12
 80049a6:	bf38      	it	cc
 80049a8:	250c      	movcc	r5, #12
 80049aa:	2d00      	cmp	r5, #0
 80049ac:	4607      	mov	r7, r0
 80049ae:	db01      	blt.n	80049b4 <_malloc_r+0x1c>
 80049b0:	42a9      	cmp	r1, r5
 80049b2:	d905      	bls.n	80049c0 <_malloc_r+0x28>
 80049b4:	230c      	movs	r3, #12
 80049b6:	2600      	movs	r6, #0
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4630      	mov	r0, r6
 80049bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a94 <_malloc_r+0xfc>
 80049c4:	f000 f868 	bl	8004a98 <__malloc_lock>
 80049c8:	f8d8 3000 	ldr.w	r3, [r8]
 80049cc:	461c      	mov	r4, r3
 80049ce:	bb5c      	cbnz	r4, 8004a28 <_malloc_r+0x90>
 80049d0:	4629      	mov	r1, r5
 80049d2:	4638      	mov	r0, r7
 80049d4:	f7ff ffc0 	bl	8004958 <sbrk_aligned>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	4604      	mov	r4, r0
 80049dc:	d155      	bne.n	8004a8a <_malloc_r+0xf2>
 80049de:	f8d8 4000 	ldr.w	r4, [r8]
 80049e2:	4626      	mov	r6, r4
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d145      	bne.n	8004a74 <_malloc_r+0xdc>
 80049e8:	2c00      	cmp	r4, #0
 80049ea:	d048      	beq.n	8004a7e <_malloc_r+0xe6>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	4631      	mov	r1, r6
 80049f0:	4638      	mov	r0, r7
 80049f2:	eb04 0903 	add.w	r9, r4, r3
 80049f6:	f000 fc71 	bl	80052dc <_sbrk_r>
 80049fa:	4581      	cmp	r9, r0
 80049fc:	d13f      	bne.n	8004a7e <_malloc_r+0xe6>
 80049fe:	6821      	ldr	r1, [r4, #0]
 8004a00:	4638      	mov	r0, r7
 8004a02:	1a6d      	subs	r5, r5, r1
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7ff ffa7 	bl	8004958 <sbrk_aligned>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d037      	beq.n	8004a7e <_malloc_r+0xe6>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	442b      	add	r3, r5
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	f8d8 3000 	ldr.w	r3, [r8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d038      	beq.n	8004a8e <_malloc_r+0xf6>
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	42a2      	cmp	r2, r4
 8004a20:	d12b      	bne.n	8004a7a <_malloc_r+0xe2>
 8004a22:	2200      	movs	r2, #0
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	e00f      	b.n	8004a48 <_malloc_r+0xb0>
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	1b52      	subs	r2, r2, r5
 8004a2c:	d41f      	bmi.n	8004a6e <_malloc_r+0xd6>
 8004a2e:	2a0b      	cmp	r2, #11
 8004a30:	d917      	bls.n	8004a62 <_malloc_r+0xca>
 8004a32:	1961      	adds	r1, r4, r5
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	6059      	strne	r1, [r3, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	bf08      	it	eq
 8004a40:	f8c8 1000 	streq.w	r1, [r8]
 8004a44:	5162      	str	r2, [r4, r5]
 8004a46:	604b      	str	r3, [r1, #4]
 8004a48:	4638      	mov	r0, r7
 8004a4a:	f104 060b 	add.w	r6, r4, #11
 8004a4e:	f000 f829 	bl	8004aa4 <__malloc_unlock>
 8004a52:	f026 0607 	bic.w	r6, r6, #7
 8004a56:	1d23      	adds	r3, r4, #4
 8004a58:	1af2      	subs	r2, r6, r3
 8004a5a:	d0ae      	beq.n	80049ba <_malloc_r+0x22>
 8004a5c:	1b9b      	subs	r3, r3, r6
 8004a5e:	50a3      	str	r3, [r4, r2]
 8004a60:	e7ab      	b.n	80049ba <_malloc_r+0x22>
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	6862      	ldr	r2, [r4, #4]
 8004a66:	d1dd      	bne.n	8004a24 <_malloc_r+0x8c>
 8004a68:	f8c8 2000 	str.w	r2, [r8]
 8004a6c:	e7ec      	b.n	8004a48 <_malloc_r+0xb0>
 8004a6e:	4623      	mov	r3, r4
 8004a70:	6864      	ldr	r4, [r4, #4]
 8004a72:	e7ac      	b.n	80049ce <_malloc_r+0x36>
 8004a74:	4634      	mov	r4, r6
 8004a76:	6876      	ldr	r6, [r6, #4]
 8004a78:	e7b4      	b.n	80049e4 <_malloc_r+0x4c>
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	e7cc      	b.n	8004a18 <_malloc_r+0x80>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	4638      	mov	r0, r7
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	f000 f80e 	bl	8004aa4 <__malloc_unlock>
 8004a88:	e797      	b.n	80049ba <_malloc_r+0x22>
 8004a8a:	6025      	str	r5, [r4, #0]
 8004a8c:	e7dc      	b.n	8004a48 <_malloc_r+0xb0>
 8004a8e:	605b      	str	r3, [r3, #4]
 8004a90:	deff      	udf	#255	; 0xff
 8004a92:	bf00      	nop
 8004a94:	2000037c 	.word	0x2000037c

08004a98 <__malloc_lock>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__malloc_lock+0x8>)
 8004a9a:	f7ff bf12 	b.w	80048c2 <__retarget_lock_acquire_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	20000378 	.word	0x20000378

08004aa4 <__malloc_unlock>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__malloc_unlock+0x8>)
 8004aa6:	f7ff bf0d 	b.w	80048c4 <__retarget_lock_release_recursive>
 8004aaa:	bf00      	nop
 8004aac:	20000378 	.word	0x20000378

08004ab0 <__sfputc_r>:
 8004ab0:	6893      	ldr	r3, [r2, #8]
 8004ab2:	b410      	push	{r4}
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	6093      	str	r3, [r2, #8]
 8004aba:	da07      	bge.n	8004acc <__sfputc_r+0x1c>
 8004abc:	6994      	ldr	r4, [r2, #24]
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	db01      	blt.n	8004ac6 <__sfputc_r+0x16>
 8004ac2:	290a      	cmp	r1, #10
 8004ac4:	d102      	bne.n	8004acc <__sfputc_r+0x1c>
 8004ac6:	bc10      	pop	{r4}
 8004ac8:	f000 bb72 	b.w	80051b0 <__swbuf_r>
 8004acc:	6813      	ldr	r3, [r2, #0]
 8004ace:	1c58      	adds	r0, r3, #1
 8004ad0:	6010      	str	r0, [r2, #0]
 8004ad2:	7019      	strb	r1, [r3, #0]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	bc10      	pop	{r4}
 8004ad8:	4770      	bx	lr

08004ada <__sfputs_r>:
 8004ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004adc:	4606      	mov	r6, r0
 8004ade:	460f      	mov	r7, r1
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	18d5      	adds	r5, r2, r3
 8004ae4:	42ac      	cmp	r4, r5
 8004ae6:	d101      	bne.n	8004aec <__sfputs_r+0x12>
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e007      	b.n	8004afc <__sfputs_r+0x22>
 8004aec:	463a      	mov	r2, r7
 8004aee:	4630      	mov	r0, r6
 8004af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af4:	f7ff ffdc 	bl	8004ab0 <__sfputc_r>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d1f3      	bne.n	8004ae4 <__sfputs_r+0xa>
 8004afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b00 <_vfiprintf_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	460d      	mov	r5, r1
 8004b06:	4614      	mov	r4, r2
 8004b08:	4698      	mov	r8, r3
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	b09d      	sub	sp, #116	; 0x74
 8004b0e:	b118      	cbz	r0, 8004b18 <_vfiprintf_r+0x18>
 8004b10:	6a03      	ldr	r3, [r0, #32]
 8004b12:	b90b      	cbnz	r3, 8004b18 <_vfiprintf_r+0x18>
 8004b14:	f7ff fdd0 	bl	80046b8 <__sinit>
 8004b18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b1a:	07d9      	lsls	r1, r3, #31
 8004b1c:	d405      	bmi.n	8004b2a <_vfiprintf_r+0x2a>
 8004b1e:	89ab      	ldrh	r3, [r5, #12]
 8004b20:	059a      	lsls	r2, r3, #22
 8004b22:	d402      	bmi.n	8004b2a <_vfiprintf_r+0x2a>
 8004b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b26:	f7ff fecc 	bl	80048c2 <__retarget_lock_acquire_recursive>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	071b      	lsls	r3, r3, #28
 8004b2e:	d501      	bpl.n	8004b34 <_vfiprintf_r+0x34>
 8004b30:	692b      	ldr	r3, [r5, #16]
 8004b32:	b99b      	cbnz	r3, 8004b5c <_vfiprintf_r+0x5c>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4630      	mov	r0, r6
 8004b38:	f000 fb78 	bl	800522c <__swsetup_r>
 8004b3c:	b170      	cbz	r0, 8004b5c <_vfiprintf_r+0x5c>
 8004b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b40:	07dc      	lsls	r4, r3, #31
 8004b42:	d504      	bpl.n	8004b4e <_vfiprintf_r+0x4e>
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	b01d      	add	sp, #116	; 0x74
 8004b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4e:	89ab      	ldrh	r3, [r5, #12]
 8004b50:	0598      	lsls	r0, r3, #22
 8004b52:	d4f7      	bmi.n	8004b44 <_vfiprintf_r+0x44>
 8004b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b56:	f7ff feb5 	bl	80048c4 <__retarget_lock_release_recursive>
 8004b5a:	e7f3      	b.n	8004b44 <_vfiprintf_r+0x44>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b60:	2320      	movs	r3, #32
 8004b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b66:	2330      	movs	r3, #48	; 0x30
 8004b68:	f04f 0901 	mov.w	r9, #1
 8004b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b70:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004d20 <_vfiprintf_r+0x220>
 8004b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b78:	4623      	mov	r3, r4
 8004b7a:	469a      	mov	sl, r3
 8004b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b80:	b10a      	cbz	r2, 8004b86 <_vfiprintf_r+0x86>
 8004b82:	2a25      	cmp	r2, #37	; 0x25
 8004b84:	d1f9      	bne.n	8004b7a <_vfiprintf_r+0x7a>
 8004b86:	ebba 0b04 	subs.w	fp, sl, r4
 8004b8a:	d00b      	beq.n	8004ba4 <_vfiprintf_r+0xa4>
 8004b8c:	465b      	mov	r3, fp
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	4630      	mov	r0, r6
 8004b94:	f7ff ffa1 	bl	8004ada <__sfputs_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f000 80a9 	beq.w	8004cf0 <_vfiprintf_r+0x1f0>
 8004b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba0:	445a      	add	r2, fp
 8004ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a1 	beq.w	8004cf0 <_vfiprintf_r+0x1f0>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb8:	f10a 0a01 	add.w	sl, sl, #1
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	9307      	str	r3, [sp, #28]
 8004bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc6:	4654      	mov	r4, sl
 8004bc8:	2205      	movs	r2, #5
 8004bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bce:	4854      	ldr	r0, [pc, #336]	; (8004d20 <_vfiprintf_r+0x220>)
 8004bd0:	f000 fb94 	bl	80052fc <memchr>
 8004bd4:	9a04      	ldr	r2, [sp, #16]
 8004bd6:	b9d8      	cbnz	r0, 8004c10 <_vfiprintf_r+0x110>
 8004bd8:	06d1      	lsls	r1, r2, #27
 8004bda:	bf44      	itt	mi
 8004bdc:	2320      	movmi	r3, #32
 8004bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be2:	0713      	lsls	r3, r2, #28
 8004be4:	bf44      	itt	mi
 8004be6:	232b      	movmi	r3, #43	; 0x2b
 8004be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bec:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf2:	d015      	beq.n	8004c20 <_vfiprintf_r+0x120>
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	9a07      	ldr	r2, [sp, #28]
 8004bfe:	4621      	mov	r1, r4
 8004c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c04:	3b30      	subs	r3, #48	; 0x30
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d94d      	bls.n	8004ca6 <_vfiprintf_r+0x1a6>
 8004c0a:	b1b0      	cbz	r0, 8004c3a <_vfiprintf_r+0x13a>
 8004c0c:	9207      	str	r2, [sp, #28]
 8004c0e:	e014      	b.n	8004c3a <_vfiprintf_r+0x13a>
 8004c10:	eba0 0308 	sub.w	r3, r0, r8
 8004c14:	fa09 f303 	lsl.w	r3, r9, r3
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	e7d2      	b.n	8004bc6 <_vfiprintf_r+0xc6>
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	1d19      	adds	r1, r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	9103      	str	r1, [sp, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bfbb      	ittet	lt
 8004c2c:	425b      	neglt	r3, r3
 8004c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c32:	9307      	strge	r3, [sp, #28]
 8004c34:	9307      	strlt	r3, [sp, #28]
 8004c36:	bfb8      	it	lt
 8004c38:	9204      	strlt	r2, [sp, #16]
 8004c3a:	7823      	ldrb	r3, [r4, #0]
 8004c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c3e:	d10c      	bne.n	8004c5a <_vfiprintf_r+0x15a>
 8004c40:	7863      	ldrb	r3, [r4, #1]
 8004c42:	2b2a      	cmp	r3, #42	; 0x2a
 8004c44:	d134      	bne.n	8004cb0 <_vfiprintf_r+0x1b0>
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	3402      	adds	r4, #2
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9203      	str	r2, [sp, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfb8      	it	lt
 8004c54:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c58:	9305      	str	r3, [sp, #20]
 8004c5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d24 <_vfiprintf_r+0x224>
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4650      	mov	r0, sl
 8004c62:	7821      	ldrb	r1, [r4, #0]
 8004c64:	f000 fb4a 	bl	80052fc <memchr>
 8004c68:	b138      	cbz	r0, 8004c7a <_vfiprintf_r+0x17a>
 8004c6a:	2240      	movs	r2, #64	; 0x40
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	eba0 000a 	sub.w	r0, r0, sl
 8004c72:	4082      	lsls	r2, r0
 8004c74:	4313      	orrs	r3, r2
 8004c76:	3401      	adds	r4, #1
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7e:	2206      	movs	r2, #6
 8004c80:	4829      	ldr	r0, [pc, #164]	; (8004d28 <_vfiprintf_r+0x228>)
 8004c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c86:	f000 fb39 	bl	80052fc <memchr>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d03f      	beq.n	8004d0e <_vfiprintf_r+0x20e>
 8004c8e:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <_vfiprintf_r+0x22c>)
 8004c90:	bb1b      	cbnz	r3, 8004cda <_vfiprintf_r+0x1da>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	9303      	str	r3, [sp, #12]
 8004c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca0:	443b      	add	r3, r7
 8004ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca4:	e768      	b.n	8004b78 <_vfiprintf_r+0x78>
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	2001      	movs	r0, #1
 8004caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cae:	e7a6      	b.n	8004bfe <_vfiprintf_r+0xfe>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f04f 0c0a 	mov.w	ip, #10
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	3401      	adds	r4, #1
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc2:	3a30      	subs	r2, #48	; 0x30
 8004cc4:	2a09      	cmp	r2, #9
 8004cc6:	d903      	bls.n	8004cd0 <_vfiprintf_r+0x1d0>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0c6      	beq.n	8004c5a <_vfiprintf_r+0x15a>
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	e7c4      	b.n	8004c5a <_vfiprintf_r+0x15a>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd8:	e7f0      	b.n	8004cbc <_vfiprintf_r+0x1bc>
 8004cda:	ab03      	add	r3, sp, #12
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <_vfiprintf_r+0x230>)
 8004ce4:	a904      	add	r1, sp, #16
 8004ce6:	f3af 8000 	nop.w
 8004cea:	4607      	mov	r7, r0
 8004cec:	1c78      	adds	r0, r7, #1
 8004cee:	d1d6      	bne.n	8004c9e <_vfiprintf_r+0x19e>
 8004cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	d405      	bmi.n	8004d02 <_vfiprintf_r+0x202>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	059a      	lsls	r2, r3, #22
 8004cfa:	d402      	bmi.n	8004d02 <_vfiprintf_r+0x202>
 8004cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cfe:	f7ff fde1 	bl	80048c4 <__retarget_lock_release_recursive>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	065b      	lsls	r3, r3, #25
 8004d06:	f53f af1d 	bmi.w	8004b44 <_vfiprintf_r+0x44>
 8004d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0c:	e71c      	b.n	8004b48 <_vfiprintf_r+0x48>
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4630      	mov	r0, r6
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <_vfiprintf_r+0x230>)
 8004d18:	a904      	add	r1, sp, #16
 8004d1a:	f000 f87d 	bl	8004e18 <_printf_i>
 8004d1e:	e7e4      	b.n	8004cea <_vfiprintf_r+0x1ea>
 8004d20:	0800548e 	.word	0x0800548e
 8004d24:	08005494 	.word	0x08005494
 8004d28:	08005498 	.word	0x08005498
 8004d2c:	00000000 	.word	0x00000000
 8004d30:	08004adb 	.word	0x08004adb

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	4607      	mov	r7, r0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bfb8      	it	lt
 8004d46:	4613      	movlt	r3, r2
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d4e:	460c      	mov	r4, r1
 8004d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc2b      	bgt.n	8004dd4 <_printf_common+0xa0>
 8004d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d430      	bmi.n	8004dee <_printf_common+0xba>
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d023      	beq.n	8004de2 <_printf_common+0xae>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf14      	ite	ne
 8004da6:	2500      	movne	r5, #0
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	f04f 0600 	mov.w	r6, #0
 8004dae:	bf08      	it	eq
 8004db0:	68e5      	ldreq	r5, [r4, #12]
 8004db2:	f104 041a 	add.w	r4, r4, #26
 8004db6:	bf08      	it	eq
 8004db8:	1aed      	subeq	r5, r5, r3
 8004dba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dbe:	bf08      	it	eq
 8004dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfc4      	itt	gt
 8004dc8:	1a9b      	subgt	r3, r3, r2
 8004dca:	18ed      	addgt	r5, r5, r3
 8004dcc:	42b5      	cmp	r5, r6
 8004dce:	d11a      	bne.n	8004e06 <_printf_common+0xd2>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e008      	b.n	8004de6 <_printf_common+0xb2>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4652      	mov	r2, sl
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d103      	bne.n	8004dea <_printf_common+0xb6>
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	3501      	adds	r5, #1
 8004dec:	e7c1      	b.n	8004d72 <_printf_common+0x3e>
 8004dee:	2030      	movs	r0, #48	; 0x30
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dfc:	4422      	add	r2, r4
 8004dfe:	3302      	adds	r3, #2
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e04:	e7c2      	b.n	8004d8c <_printf_common+0x58>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	47c0      	blx	r8
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0e6      	beq.n	8004de2 <_printf_common+0xae>
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7d9      	b.n	8004dcc <_printf_common+0x98>

08004e18 <_printf_i>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	7e0f      	ldrb	r7, [r1, #24]
 8004e1e:	4691      	mov	r9, r2
 8004e20:	2f78      	cmp	r7, #120	; 0x78
 8004e22:	4680      	mov	r8, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	469a      	mov	sl, r3
 8004e28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e2e:	d807      	bhi.n	8004e40 <_printf_i+0x28>
 8004e30:	2f62      	cmp	r7, #98	; 0x62
 8004e32:	d80a      	bhi.n	8004e4a <_printf_i+0x32>
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f000 80d5 	beq.w	8004fe4 <_printf_i+0x1cc>
 8004e3a:	2f58      	cmp	r7, #88	; 0x58
 8004e3c:	f000 80c1 	beq.w	8004fc2 <_printf_i+0x1aa>
 8004e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e48:	e03a      	b.n	8004ec0 <_printf_i+0xa8>
 8004e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d8f6      	bhi.n	8004e40 <_printf_i+0x28>
 8004e52:	a101      	add	r1, pc, #4	; (adr r1, 8004e58 <_printf_i+0x40>)
 8004e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004e41 	.word	0x08004e41
 8004e64:	08004e41 	.word	0x08004e41
 8004e68:	08004e41 	.word	0x08004e41
 8004e6c:	08004e41 	.word	0x08004e41
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e41 	.word	0x08004e41
 8004e78:	08004e41 	.word	0x08004e41
 8004e7c:	08004e41 	.word	0x08004e41
 8004e80:	08004e41 	.word	0x08004e41
 8004e84:	08004fcb 	.word	0x08004fcb
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004f85 	.word	0x08004f85
 8004e90:	08004e41 	.word	0x08004e41
 8004e94:	08004e41 	.word	0x08004e41
 8004e98:	08004fed 	.word	0x08004fed
 8004e9c:	08004e41 	.word	0x08004e41
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004e41 	.word	0x08004e41
 8004ea8:	08004e41 	.word	0x08004e41
 8004eac:	08004f8d 	.word	0x08004f8d
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	602a      	str	r2, [r5, #0]
 8004eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0a0      	b.n	8005006 <_printf_i+0x1ee>
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	0607      	lsls	r7, r0, #24
 8004eca:	f103 0104 	add.w	r1, r3, #4
 8004ece:	6029      	str	r1, [r5, #0]
 8004ed0:	d501      	bpl.n	8004ed6 <_printf_i+0xbe>
 8004ed2:	681e      	ldr	r6, [r3, #0]
 8004ed4:	e003      	b.n	8004ede <_printf_i+0xc6>
 8004ed6:	0646      	lsls	r6, r0, #25
 8004ed8:	d5fb      	bpl.n	8004ed2 <_printf_i+0xba>
 8004eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	da03      	bge.n	8004eea <_printf_i+0xd2>
 8004ee2:	232d      	movs	r3, #45	; 0x2d
 8004ee4:	4276      	negs	r6, r6
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eea:	230a      	movs	r3, #10
 8004eec:	4859      	ldr	r0, [pc, #356]	; (8005054 <_printf_i+0x23c>)
 8004eee:	e012      	b.n	8004f16 <_printf_i+0xfe>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	6029      	str	r1, [r5, #0]
 8004ef8:	0605      	lsls	r5, r0, #24
 8004efa:	d501      	bpl.n	8004f00 <_printf_i+0xe8>
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	e002      	b.n	8004f06 <_printf_i+0xee>
 8004f00:	0641      	lsls	r1, r0, #25
 8004f02:	d5fb      	bpl.n	8004efc <_printf_i+0xe4>
 8004f04:	881e      	ldrh	r6, [r3, #0]
 8004f06:	2f6f      	cmp	r7, #111	; 0x6f
 8004f08:	bf0c      	ite	eq
 8004f0a:	2308      	moveq	r3, #8
 8004f0c:	230a      	movne	r3, #10
 8004f0e:	4851      	ldr	r0, [pc, #324]	; (8005054 <_printf_i+0x23c>)
 8004f10:	2100      	movs	r1, #0
 8004f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f16:	6865      	ldr	r5, [r4, #4]
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	bfa8      	it	ge
 8004f1c:	6821      	ldrge	r1, [r4, #0]
 8004f1e:	60a5      	str	r5, [r4, #8]
 8004f20:	bfa4      	itt	ge
 8004f22:	f021 0104 	bicge.w	r1, r1, #4
 8004f26:	6021      	strge	r1, [r4, #0]
 8004f28:	b90e      	cbnz	r6, 8004f2e <_printf_i+0x116>
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	d04b      	beq.n	8004fc6 <_printf_i+0x1ae>
 8004f2e:	4615      	mov	r5, r2
 8004f30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f34:	fb03 6711 	mls	r7, r3, r1, r6
 8004f38:	5dc7      	ldrb	r7, [r0, r7]
 8004f3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f3e:	4637      	mov	r7, r6
 8004f40:	42bb      	cmp	r3, r7
 8004f42:	460e      	mov	r6, r1
 8004f44:	d9f4      	bls.n	8004f30 <_printf_i+0x118>
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d10b      	bne.n	8004f62 <_printf_i+0x14a>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	07de      	lsls	r6, r3, #31
 8004f4e:	d508      	bpl.n	8004f62 <_printf_i+0x14a>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	6861      	ldr	r1, [r4, #4]
 8004f54:	4299      	cmp	r1, r3
 8004f56:	bfde      	ittt	le
 8004f58:	2330      	movle	r3, #48	; 0x30
 8004f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f62:	1b52      	subs	r2, r2, r5
 8004f64:	6122      	str	r2, [r4, #16]
 8004f66:	464b      	mov	r3, r9
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f8cd a000 	str.w	sl, [sp]
 8004f70:	aa03      	add	r2, sp, #12
 8004f72:	f7ff fedf 	bl	8004d34 <_printf_common>
 8004f76:	3001      	adds	r0, #1
 8004f78:	d14a      	bne.n	8005010 <_printf_i+0x1f8>
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	b004      	add	sp, #16
 8004f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f043 0320 	orr.w	r3, r3, #32
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	2778      	movs	r7, #120	; 0x78
 8004f8e:	4832      	ldr	r0, [pc, #200]	; (8005058 <_printf_i+0x240>)
 8004f90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	6829      	ldr	r1, [r5, #0]
 8004f98:	061f      	lsls	r7, r3, #24
 8004f9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f9e:	d402      	bmi.n	8004fa6 <_printf_i+0x18e>
 8004fa0:	065f      	lsls	r7, r3, #25
 8004fa2:	bf48      	it	mi
 8004fa4:	b2b6      	uxthmi	r6, r6
 8004fa6:	07df      	lsls	r7, r3, #31
 8004fa8:	bf48      	it	mi
 8004faa:	f043 0320 	orrmi.w	r3, r3, #32
 8004fae:	6029      	str	r1, [r5, #0]
 8004fb0:	bf48      	it	mi
 8004fb2:	6023      	strmi	r3, [r4, #0]
 8004fb4:	b91e      	cbnz	r6, 8004fbe <_printf_i+0x1a6>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	f023 0320 	bic.w	r3, r3, #32
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	e7a6      	b.n	8004f10 <_printf_i+0xf8>
 8004fc2:	4824      	ldr	r0, [pc, #144]	; (8005054 <_printf_i+0x23c>)
 8004fc4:	e7e4      	b.n	8004f90 <_printf_i+0x178>
 8004fc6:	4615      	mov	r5, r2
 8004fc8:	e7bd      	b.n	8004f46 <_printf_i+0x12e>
 8004fca:	682b      	ldr	r3, [r5, #0]
 8004fcc:	6826      	ldr	r6, [r4, #0]
 8004fce:	1d18      	adds	r0, r3, #4
 8004fd0:	6961      	ldr	r1, [r4, #20]
 8004fd2:	6028      	str	r0, [r5, #0]
 8004fd4:	0635      	lsls	r5, r6, #24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	d501      	bpl.n	8004fde <_printf_i+0x1c6>
 8004fda:	6019      	str	r1, [r3, #0]
 8004fdc:	e002      	b.n	8004fe4 <_printf_i+0x1cc>
 8004fde:	0670      	lsls	r0, r6, #25
 8004fe0:	d5fb      	bpl.n	8004fda <_printf_i+0x1c2>
 8004fe2:	8019      	strh	r1, [r3, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4615      	mov	r5, r2
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	e7bc      	b.n	8004f66 <_printf_i+0x14e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	602a      	str	r2, [r5, #0]
 8004ff4:	681d      	ldr	r5, [r3, #0]
 8004ff6:	6862      	ldr	r2, [r4, #4]
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 f97f 	bl	80052fc <memchr>
 8004ffe:	b108      	cbz	r0, 8005004 <_printf_i+0x1ec>
 8005000:	1b40      	subs	r0, r0, r5
 8005002:	6060      	str	r0, [r4, #4]
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	2300      	movs	r3, #0
 800500a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500e:	e7aa      	b.n	8004f66 <_printf_i+0x14e>
 8005010:	462a      	mov	r2, r5
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	47d0      	blx	sl
 800501a:	3001      	adds	r0, #1
 800501c:	d0ad      	beq.n	8004f7a <_printf_i+0x162>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	079b      	lsls	r3, r3, #30
 8005022:	d413      	bmi.n	800504c <_printf_i+0x234>
 8005024:	68e0      	ldr	r0, [r4, #12]
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	4298      	cmp	r0, r3
 800502a:	bfb8      	it	lt
 800502c:	4618      	movlt	r0, r3
 800502e:	e7a6      	b.n	8004f7e <_printf_i+0x166>
 8005030:	2301      	movs	r3, #1
 8005032:	4632      	mov	r2, r6
 8005034:	4649      	mov	r1, r9
 8005036:	4640      	mov	r0, r8
 8005038:	47d0      	blx	sl
 800503a:	3001      	adds	r0, #1
 800503c:	d09d      	beq.n	8004f7a <_printf_i+0x162>
 800503e:	3501      	adds	r5, #1
 8005040:	68e3      	ldr	r3, [r4, #12]
 8005042:	9903      	ldr	r1, [sp, #12]
 8005044:	1a5b      	subs	r3, r3, r1
 8005046:	42ab      	cmp	r3, r5
 8005048:	dcf2      	bgt.n	8005030 <_printf_i+0x218>
 800504a:	e7eb      	b.n	8005024 <_printf_i+0x20c>
 800504c:	2500      	movs	r5, #0
 800504e:	f104 0619 	add.w	r6, r4, #25
 8005052:	e7f5      	b.n	8005040 <_printf_i+0x228>
 8005054:	0800549f 	.word	0x0800549f
 8005058:	080054b0 	.word	0x080054b0

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005060:	4605      	mov	r5, r0
 8005062:	0710      	lsls	r0, r2, #28
 8005064:	460c      	mov	r4, r1
 8005066:	d457      	bmi.n	8005118 <__sflush_r+0xbc>
 8005068:	684b      	ldr	r3, [r1, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc04      	bgt.n	8005078 <__sflush_r+0x1c>
 800506e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc01      	bgt.n	8005078 <__sflush_r+0x1c>
 8005074:	2000      	movs	r0, #0
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507a:	2e00      	cmp	r6, #0
 800507c:	d0fa      	beq.n	8005074 <__sflush_r+0x18>
 800507e:	2300      	movs	r3, #0
 8005080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005084:	682f      	ldr	r7, [r5, #0]
 8005086:	6a21      	ldr	r1, [r4, #32]
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	d032      	beq.n	80050f2 <__sflush_r+0x96>
 800508c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	075a      	lsls	r2, r3, #29
 8005092:	d505      	bpl.n	80050a0 <__sflush_r+0x44>
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	1ac0      	subs	r0, r0, r3
 8005098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800509a:	b10b      	cbz	r3, 80050a0 <__sflush_r+0x44>
 800509c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800509e:	1ac0      	subs	r0, r0, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	4602      	mov	r2, r0
 80050a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a6:	4628      	mov	r0, r5
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	47b0      	blx	r6
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	d106      	bne.n	80050c0 <__sflush_r+0x64>
 80050b2:	6829      	ldr	r1, [r5, #0]
 80050b4:	291d      	cmp	r1, #29
 80050b6:	d82b      	bhi.n	8005110 <__sflush_r+0xb4>
 80050b8:	4a28      	ldr	r2, [pc, #160]	; (800515c <__sflush_r+0x100>)
 80050ba:	410a      	asrs	r2, r1
 80050bc:	07d6      	lsls	r6, r2, #31
 80050be:	d427      	bmi.n	8005110 <__sflush_r+0xb4>
 80050c0:	2200      	movs	r2, #0
 80050c2:	6062      	str	r2, [r4, #4]
 80050c4:	6922      	ldr	r2, [r4, #16]
 80050c6:	04d9      	lsls	r1, r3, #19
 80050c8:	6022      	str	r2, [r4, #0]
 80050ca:	d504      	bpl.n	80050d6 <__sflush_r+0x7a>
 80050cc:	1c42      	adds	r2, r0, #1
 80050ce:	d101      	bne.n	80050d4 <__sflush_r+0x78>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b903      	cbnz	r3, 80050d6 <__sflush_r+0x7a>
 80050d4:	6560      	str	r0, [r4, #84]	; 0x54
 80050d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d8:	602f      	str	r7, [r5, #0]
 80050da:	2900      	cmp	r1, #0
 80050dc:	d0ca      	beq.n	8005074 <__sflush_r+0x18>
 80050de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e2:	4299      	cmp	r1, r3
 80050e4:	d002      	beq.n	80050ec <__sflush_r+0x90>
 80050e6:	4628      	mov	r0, r5
 80050e8:	f7ff fbee 	bl	80048c8 <_free_r>
 80050ec:	2000      	movs	r0, #0
 80050ee:	6360      	str	r0, [r4, #52]	; 0x34
 80050f0:	e7c1      	b.n	8005076 <__sflush_r+0x1a>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b0      	blx	r6
 80050f8:	1c41      	adds	r1, r0, #1
 80050fa:	d1c8      	bne.n	800508e <__sflush_r+0x32>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0c5      	beq.n	800508e <__sflush_r+0x32>
 8005102:	2b1d      	cmp	r3, #29
 8005104:	d001      	beq.n	800510a <__sflush_r+0xae>
 8005106:	2b16      	cmp	r3, #22
 8005108:	d101      	bne.n	800510e <__sflush_r+0xb2>
 800510a:	602f      	str	r7, [r5, #0]
 800510c:	e7b2      	b.n	8005074 <__sflush_r+0x18>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	e7ae      	b.n	8005076 <__sflush_r+0x1a>
 8005118:	690f      	ldr	r7, [r1, #16]
 800511a:	2f00      	cmp	r7, #0
 800511c:	d0aa      	beq.n	8005074 <__sflush_r+0x18>
 800511e:	0793      	lsls	r3, r2, #30
 8005120:	bf18      	it	ne
 8005122:	2300      	movne	r3, #0
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	1bf6      	subs	r6, r6, r7
 800512c:	600f      	str	r7, [r1, #0]
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	2e00      	cmp	r6, #0
 8005132:	dd9f      	ble.n	8005074 <__sflush_r+0x18>
 8005134:	4633      	mov	r3, r6
 8005136:	463a      	mov	r2, r7
 8005138:	4628      	mov	r0, r5
 800513a:	6a21      	ldr	r1, [r4, #32]
 800513c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005140:	47e0      	blx	ip
 8005142:	2800      	cmp	r0, #0
 8005144:	dc06      	bgt.n	8005154 <__sflush_r+0xf8>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005150:	81a3      	strh	r3, [r4, #12]
 8005152:	e790      	b.n	8005076 <__sflush_r+0x1a>
 8005154:	4407      	add	r7, r0
 8005156:	1a36      	subs	r6, r6, r0
 8005158:	e7ea      	b.n	8005130 <__sflush_r+0xd4>
 800515a:	bf00      	nop
 800515c:	dfbffffe 	.word	0xdfbffffe

08005160 <_fflush_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b913      	cbnz	r3, 8005170 <_fflush_r+0x10>
 800516a:	2500      	movs	r5, #0
 800516c:	4628      	mov	r0, r5
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	b118      	cbz	r0, 800517a <_fflush_r+0x1a>
 8005172:	6a03      	ldr	r3, [r0, #32]
 8005174:	b90b      	cbnz	r3, 800517a <_fflush_r+0x1a>
 8005176:	f7ff fa9f 	bl	80046b8 <__sinit>
 800517a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f3      	beq.n	800516a <_fflush_r+0xa>
 8005182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005184:	07d0      	lsls	r0, r2, #31
 8005186:	d404      	bmi.n	8005192 <_fflush_r+0x32>
 8005188:	0599      	lsls	r1, r3, #22
 800518a:	d402      	bmi.n	8005192 <_fflush_r+0x32>
 800518c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800518e:	f7ff fb98 	bl	80048c2 <__retarget_lock_acquire_recursive>
 8005192:	4628      	mov	r0, r5
 8005194:	4621      	mov	r1, r4
 8005196:	f7ff ff61 	bl	800505c <__sflush_r>
 800519a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800519c:	4605      	mov	r5, r0
 800519e:	07da      	lsls	r2, r3, #31
 80051a0:	d4e4      	bmi.n	800516c <_fflush_r+0xc>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	059b      	lsls	r3, r3, #22
 80051a6:	d4e1      	bmi.n	800516c <_fflush_r+0xc>
 80051a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051aa:	f7ff fb8b 	bl	80048c4 <__retarget_lock_release_recursive>
 80051ae:	e7dd      	b.n	800516c <_fflush_r+0xc>

080051b0 <__swbuf_r>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	460e      	mov	r6, r1
 80051b4:	4614      	mov	r4, r2
 80051b6:	4605      	mov	r5, r0
 80051b8:	b118      	cbz	r0, 80051c2 <__swbuf_r+0x12>
 80051ba:	6a03      	ldr	r3, [r0, #32]
 80051bc:	b90b      	cbnz	r3, 80051c2 <__swbuf_r+0x12>
 80051be:	f7ff fa7b 	bl	80046b8 <__sinit>
 80051c2:	69a3      	ldr	r3, [r4, #24]
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	071a      	lsls	r2, r3, #28
 80051ca:	d525      	bpl.n	8005218 <__swbuf_r+0x68>
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	b31b      	cbz	r3, 8005218 <__swbuf_r+0x68>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	6922      	ldr	r2, [r4, #16]
 80051d4:	b2f6      	uxtb	r6, r6
 80051d6:	1a98      	subs	r0, r3, r2
 80051d8:	6963      	ldr	r3, [r4, #20]
 80051da:	4637      	mov	r7, r6
 80051dc:	4283      	cmp	r3, r0
 80051de:	dc04      	bgt.n	80051ea <__swbuf_r+0x3a>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	f7ff ffbc 	bl	8005160 <_fflush_r>
 80051e8:	b9e0      	cbnz	r0, 8005224 <__swbuf_r+0x74>
 80051ea:	68a3      	ldr	r3, [r4, #8]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	60a3      	str	r3, [r4, #8]
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	6022      	str	r2, [r4, #0]
 80051f6:	701e      	strb	r6, [r3, #0]
 80051f8:	6962      	ldr	r2, [r4, #20]
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d004      	beq.n	800520a <__swbuf_r+0x5a>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	07db      	lsls	r3, r3, #31
 8005204:	d506      	bpl.n	8005214 <__swbuf_r+0x64>
 8005206:	2e0a      	cmp	r6, #10
 8005208:	d104      	bne.n	8005214 <__swbuf_r+0x64>
 800520a:	4621      	mov	r1, r4
 800520c:	4628      	mov	r0, r5
 800520e:	f7ff ffa7 	bl	8005160 <_fflush_r>
 8005212:	b938      	cbnz	r0, 8005224 <__swbuf_r+0x74>
 8005214:	4638      	mov	r0, r7
 8005216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f806 	bl	800522c <__swsetup_r>
 8005220:	2800      	cmp	r0, #0
 8005222:	d0d5      	beq.n	80051d0 <__swbuf_r+0x20>
 8005224:	f04f 37ff 	mov.w	r7, #4294967295
 8005228:	e7f4      	b.n	8005214 <__swbuf_r+0x64>
	...

0800522c <__swsetup_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <__swsetup_r+0xac>)
 8005230:	4605      	mov	r5, r0
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	460c      	mov	r4, r1
 8005236:	b118      	cbz	r0, 8005240 <__swsetup_r+0x14>
 8005238:	6a03      	ldr	r3, [r0, #32]
 800523a:	b90b      	cbnz	r3, 8005240 <__swsetup_r+0x14>
 800523c:	f7ff fa3c 	bl	80046b8 <__sinit>
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005246:	0718      	lsls	r0, r3, #28
 8005248:	d422      	bmi.n	8005290 <__swsetup_r+0x64>
 800524a:	06d9      	lsls	r1, r3, #27
 800524c:	d407      	bmi.n	800525e <__swsetup_r+0x32>
 800524e:	2309      	movs	r3, #9
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	81a3      	strh	r3, [r4, #12]
 800525c:	e034      	b.n	80052c8 <__swsetup_r+0x9c>
 800525e:	0758      	lsls	r0, r3, #29
 8005260:	d512      	bpl.n	8005288 <__swsetup_r+0x5c>
 8005262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005264:	b141      	cbz	r1, 8005278 <__swsetup_r+0x4c>
 8005266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800526a:	4299      	cmp	r1, r3
 800526c:	d002      	beq.n	8005274 <__swsetup_r+0x48>
 800526e:	4628      	mov	r0, r5
 8005270:	f7ff fb2a 	bl	80048c8 <_free_r>
 8005274:	2300      	movs	r3, #0
 8005276:	6363      	str	r3, [r4, #52]	; 0x34
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	2300      	movs	r3, #0
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f043 0308 	orr.w	r3, r3, #8
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	b94b      	cbnz	r3, 80052a8 <__swsetup_r+0x7c>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800529a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529e:	d003      	beq.n	80052a8 <__swsetup_r+0x7c>
 80052a0:	4621      	mov	r1, r4
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 f85d 	bl	8005362 <__smakebuf_r>
 80052a8:	89a0      	ldrh	r0, [r4, #12]
 80052aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052ae:	f010 0301 	ands.w	r3, r0, #1
 80052b2:	d00a      	beq.n	80052ca <__swsetup_r+0x9e>
 80052b4:	2300      	movs	r3, #0
 80052b6:	60a3      	str	r3, [r4, #8]
 80052b8:	6963      	ldr	r3, [r4, #20]
 80052ba:	425b      	negs	r3, r3
 80052bc:	61a3      	str	r3, [r4, #24]
 80052be:	6923      	ldr	r3, [r4, #16]
 80052c0:	b943      	cbnz	r3, 80052d4 <__swsetup_r+0xa8>
 80052c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052c6:	d1c4      	bne.n	8005252 <__swsetup_r+0x26>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	0781      	lsls	r1, r0, #30
 80052cc:	bf58      	it	pl
 80052ce:	6963      	ldrpl	r3, [r4, #20]
 80052d0:	60a3      	str	r3, [r4, #8]
 80052d2:	e7f4      	b.n	80052be <__swsetup_r+0x92>
 80052d4:	2000      	movs	r0, #0
 80052d6:	e7f7      	b.n	80052c8 <__swsetup_r+0x9c>
 80052d8:	20000064 	.word	0x20000064

080052dc <_sbrk_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	2300      	movs	r3, #0
 80052e0:	4d05      	ldr	r5, [pc, #20]	; (80052f8 <_sbrk_r+0x1c>)
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fc f858 	bl	800139c <_sbrk>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_sbrk_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_sbrk_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000374 	.word	0x20000374

080052fc <memchr>:
 80052fc:	4603      	mov	r3, r0
 80052fe:	b510      	push	{r4, lr}
 8005300:	b2c9      	uxtb	r1, r1
 8005302:	4402      	add	r2, r0
 8005304:	4293      	cmp	r3, r2
 8005306:	4618      	mov	r0, r3
 8005308:	d101      	bne.n	800530e <memchr+0x12>
 800530a:	2000      	movs	r0, #0
 800530c:	e003      	b.n	8005316 <memchr+0x1a>
 800530e:	7804      	ldrb	r4, [r0, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	428c      	cmp	r4, r1
 8005314:	d1f6      	bne.n	8005304 <memchr+0x8>
 8005316:	bd10      	pop	{r4, pc}

08005318 <__swhatbuf_r>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	4615      	mov	r5, r2
 8005322:	2900      	cmp	r1, #0
 8005324:	461e      	mov	r6, r3
 8005326:	b096      	sub	sp, #88	; 0x58
 8005328:	da0c      	bge.n	8005344 <__swhatbuf_r+0x2c>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	2100      	movs	r1, #0
 800532e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005332:	bf0c      	ite	eq
 8005334:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005338:	2340      	movne	r3, #64	; 0x40
 800533a:	2000      	movs	r0, #0
 800533c:	6031      	str	r1, [r6, #0]
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	b016      	add	sp, #88	; 0x58
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	466a      	mov	r2, sp
 8005346:	f000 f849 	bl	80053dc <_fstat_r>
 800534a:	2800      	cmp	r0, #0
 800534c:	dbed      	blt.n	800532a <__swhatbuf_r+0x12>
 800534e:	9901      	ldr	r1, [sp, #4]
 8005350:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005354:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005358:	4259      	negs	r1, r3
 800535a:	4159      	adcs	r1, r3
 800535c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005360:	e7eb      	b.n	800533a <__swhatbuf_r+0x22>

08005362 <__smakebuf_r>:
 8005362:	898b      	ldrh	r3, [r1, #12]
 8005364:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005366:	079d      	lsls	r5, r3, #30
 8005368:	4606      	mov	r6, r0
 800536a:	460c      	mov	r4, r1
 800536c:	d507      	bpl.n	800537e <__smakebuf_r+0x1c>
 800536e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	2301      	movs	r3, #1
 8005378:	6163      	str	r3, [r4, #20]
 800537a:	b002      	add	sp, #8
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	466a      	mov	r2, sp
 8005380:	ab01      	add	r3, sp, #4
 8005382:	f7ff ffc9 	bl	8005318 <__swhatbuf_r>
 8005386:	9900      	ldr	r1, [sp, #0]
 8005388:	4605      	mov	r5, r0
 800538a:	4630      	mov	r0, r6
 800538c:	f7ff fb04 	bl	8004998 <_malloc_r>
 8005390:	b948      	cbnz	r0, 80053a6 <__smakebuf_r+0x44>
 8005392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005396:	059a      	lsls	r2, r3, #22
 8005398:	d4ef      	bmi.n	800537a <__smakebuf_r+0x18>
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	f043 0302 	orr.w	r3, r3, #2
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	e7e3      	b.n	800536e <__smakebuf_r+0xc>
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	6020      	str	r0, [r4, #0]
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	9b00      	ldr	r3, [sp, #0]
 80053b2:	6120      	str	r0, [r4, #16]
 80053b4:	6163      	str	r3, [r4, #20]
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	b15b      	cbz	r3, 80053d2 <__smakebuf_r+0x70>
 80053ba:	4630      	mov	r0, r6
 80053bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053c0:	f000 f81e 	bl	8005400 <_isatty_r>
 80053c4:	b128      	cbz	r0, 80053d2 <__smakebuf_r+0x70>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	f023 0303 	bic.w	r3, r3, #3
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	431d      	orrs	r5, r3
 80053d6:	81a5      	strh	r5, [r4, #12]
 80053d8:	e7cf      	b.n	800537a <__smakebuf_r+0x18>
	...

080053dc <_fstat_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	2300      	movs	r3, #0
 80053e0:	4d06      	ldr	r5, [pc, #24]	; (80053fc <_fstat_r+0x20>)
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	f7fb ffb2 	bl	8001352 <_fstat>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d102      	bne.n	80053f8 <_fstat_r+0x1c>
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	b103      	cbz	r3, 80053f8 <_fstat_r+0x1c>
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	bf00      	nop
 80053fc:	20000374 	.word	0x20000374

08005400 <_isatty_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	2300      	movs	r3, #0
 8005404:	4d05      	ldr	r5, [pc, #20]	; (800541c <_isatty_r+0x1c>)
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb ffb0 	bl	8001370 <_isatty>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_isatty_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_isatty_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	20000374 	.word	0x20000374

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
