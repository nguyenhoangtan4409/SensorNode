
SensorNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00005b38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d0c  08005d0c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005d0c  08005d0c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d0c  08005d0c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000068  08005d7c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005d7c  00020350  2**0
=======
  1 .text         00005e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe8  08005fe8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005fe8  08005fe8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fe8  08005fe8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000068  08006058  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08006058  000203d0  2**0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   00010d3f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000254d  00000000  00000000  00030e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5b  00000000  00000000  00034460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001997d  00000000  00000000  000351bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013eb7  00000000  00000000  0004eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093f80  00000000  00000000  000629ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005060  00000000  00000000  000f6970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000fb9d0  2**0
=======
 13 .debug_info   00013ff6  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6f  00000000  00000000  000340ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe9  00000000  00000000  00037f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003de4  00000000  00000000  00038f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171a2  00000000  00000000  0003cd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000985b0  00000000  00000000  00053ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ec8  00000000  00000000  000ec4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f2370  2**0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

<<<<<<< HEAD
08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c30 	.word	0x08005c30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005c30 	.word	0x08005c30
=======
0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f1c 	.word	0x08005f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08005f1c 	.word	0x08005f1c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af04      	add	r7, sp, #16
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];
	uint16_t temp;
	HAL_I2C_Mem_Read(ina219->ina219_i2c, (ina219->Address<<1 | 1), Register, 1, Value, 2, 1000);
<<<<<<< HEAD
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b21b      	sxth	r3, r3
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	b21b      	sxth	r3, r3
 800077a:	b299      	uxth	r1, r3
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	b29a      	uxth	r2, r3
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	2302      	movs	r3, #2
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	f002 f879 	bl	8002888 <HAL_I2C_Mem_Read>
	temp = (uint16_t)((Value[0] << 8) | Value[1]);
 8000796:	7b3b      	ldrb	r3, [r7, #12]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	b21b      	sxth	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	81fb      	strh	r3, [r7, #14]
	return temp;
 80007a6:	89fb      	ldrh	r3, [r7, #14]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <Write16>:
=======
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	b21b      	sxth	r3, r3
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	b21b      	sxth	r3, r3
 800053a:	b299      	uxth	r1, r3
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	b29a      	uxth	r2, r3
 8000540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	2302      	movs	r3, #2
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	f002 fa8b 	bl	8002a6c <HAL_I2C_Mem_Read>
	temp = (uint16_t)((Value[0] << 8) | Value[1]);
 8000556:	7b3b      	ldrb	r3, [r7, #12]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	7b7b      	ldrb	r3, [r7, #13]
 800055e:	b21b      	sxth	r3, r3
 8000560:	4313      	orrs	r3, r2
 8000562:	b21b      	sxth	r3, r3
 8000564:	81fb      	strh	r3, [r7, #14]
	return temp;
 8000566:	89fb      	ldrh	r3, [r7, #14]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Write16>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
<<<<<<< HEAD
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af04      	add	r7, sp, #16
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
 80007bc:	4613      	mov	r3, r2
 80007be:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80007c0:	883b      	ldrh	r3, [r7, #0]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80007ca:	883b      	ldrh	r3, [r7, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1 | 0), Register, 1, (uint8_t*)addr, 2, 1000);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	b299      	uxth	r1, r3
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	2302      	movs	r3, #2
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	2301      	movs	r3, #1
 80007f4:	f001 ff4e 	bl	8002694 <HAL_I2C_Mem_Write>
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <INA219_ReadBusVoltage_raw>:

uint16_t INA219_ReadBusVoltage_raw(INA219_t *ina219)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8000808:	2102      	movs	r1, #2
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa6 	bl	800075c <Read16>
 8000810:	4603      	mov	r3, r0
 8000812:	81fb      	strh	r3, [r7, #14]
	return result;
 8000814:	89fb      	ldrh	r3, [r7, #14]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <INA219_ReadShuntVolage_raw>:
uint16_t INA219_ReadShuntVolage_raw(INA219_t *ina219)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000826:	2101      	movs	r1, #1
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff97 	bl	800075c <Read16>
 800082e:	4603      	mov	r3, r0
 8000830:	81fb      	strh	r3, [r7, #14]
	return result;
 8000832:	89fb      	ldrh	r3, [r7, #14]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <INA219_ReadCurrent_raw>:
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000844:	2104      	movs	r1, #4
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff88 	bl	800075c <Read16>
 800084c:	4603      	mov	r3, r0
 800084e:	81fb      	strh	r3, [r7, #14]
	return (result);
 8000850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <INA219_ReadPower_raw>:
int16_t INA219_ReadPower_raw(INA219_t *ina219)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_POWER);
 8000864:	2103      	movs	r1, #3
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ff78 	bl	800075c <Read16>
 800086c:	4603      	mov	r3, r0
 800086e:	81fb      	strh	r3, [r7, #14]
	return (result);
 8000870:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <INA219_ReadBusVoltage_mV>:
uint16_t INA219_ReadBusVoltage_mV(INA219_t *ina219)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint16_t result = INA219_ReadBusVoltage_raw(ina219);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffbb 	bl	8000800 <INA219_ReadBusVoltage_raw>
 800088a:	4603      	mov	r3, r0
 800088c:	81fb      	strh	r3, [r7, #14]
	return ((result >> 3) * 4);
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	08db      	lsrs	r3, r3, #3
 8000892:	b29b      	uxth	r3, r3
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	b29b      	uxth	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <INA219_ReadShuntVolage_mV>:

uint16_t INA219_ReadShuntVolage_mV(INA219_t *ina219)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadShuntVolage_raw(ina219);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffb8 	bl	800081e <INA219_ReadShuntVolage_raw>
 80008ae:	4603      	mov	r3, r0
 80008b0:	81fb      	strh	r3, [r7, #14]
	return result * 0.01;
 80008b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fec6 	bl	8000648 <__aeabi_i2d>
 80008bc:	a308      	add	r3, pc, #32	; (adr r3, 80008e0 <INA219_ReadShuntVolage_mV+0x40>)
 80008be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c2:	f7ff fc45 	bl	8000150 <__aeabi_dmul>
 80008c6:	4602      	mov	r2, r0
 80008c8:	460b      	mov	r3, r1
 80008ca:	4610      	mov	r0, r2
 80008cc:	4619      	mov	r1, r3
 80008ce:	f7ff ff25 	bl	800071c <__aeabi_d2uiz>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29b      	uxth	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	47ae147b 	.word	0x47ae147b
 80008e4:	3f847ae1 	.word	0x3f847ae1

080008e8 <INA219_ReadCurrent_mA>:

int16_t INA219_ReadCurrent_mA(INA219_t *ina219)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ffa3 	bl	800083c <INA219_ReadCurrent_raw>
 80008f6:	4603      	mov	r3, r0
 80008f8:	81fb      	strh	r3, [r7, #14]
	result /= ina219_currentDivider_mA;
 80008fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <INA219_ReadCurrent_mA+0x30>)
 8000900:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000904:	fb93 f3f2 	sdiv	r3, r3, r2
 8000908:	81fb      	strh	r3, [r7, #14]
	return result;
 800090a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000086 	.word	0x20000086

0800091c <INA219_ReadPower_mW>:
int16_t INA219_ReadPower_mW(INA219_t *ina219)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadPower_raw(ina219);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff99 	bl	800085c <INA219_ReadPower_raw>
 800092a:	4603      	mov	r3, r0
 800092c:	81fb      	strh	r3, [r7, #14]
	result *=  ina219_powerMultiplier_mW;
 800092e:	89fb      	ldrh	r3, [r7, #14]
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <INA219_ReadPower_mW+0x30>)
 8000932:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000936:	b292      	uxth	r2, r2
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	81fb      	strh	r3, [r7, #14]
	return result;
 8000940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000088 	.word	0x20000088

08000950 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800095c:	2100      	movs	r1, #0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff26 	bl	80007b0 <Write16>
	HAL_Delay(100);
 8000964:	2064      	movs	r0, #100	; 0x64
 8000966:	f000 fe11 	bl	800158c <HAL_Delay>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	460b      	mov	r3, r1
 800097c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	461a      	mov	r2, r3
 8000982:	2105      	movs	r1, #5
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff13 	bl	80007b0 <Write16>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <INA219_setConfig>:
=======
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af04      	add	r7, sp, #16
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
 800057c:	4613      	mov	r3, r2
 800057e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000580:	883b      	ldrh	r3, [r7, #0]
 8000582:	0a1b      	lsrs	r3, r3, #8
 8000584:	b29b      	uxth	r3, r3
 8000586:	b2db      	uxtb	r3, r3
 8000588:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800058a:	883b      	ldrh	r3, [r7, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1 | 0), Register, 1, (uint8_t*)addr, 2, 1000);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	b29b      	uxth	r3, r3
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	b299      	uxth	r1, r3
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	9302      	str	r3, [sp, #8]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	f002 f960 	bl	8002878 <HAL_I2C_Mem_Write>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <INA219_ReadCurrent_raw>:
{
	uint16_t result = INA219_ReadShuntVolage_raw(ina219);
	return result * 0.01;
}
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
//	INA219_setCalibration(ina219, ina219_calibrationValue);

	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80005c8:	2104      	movs	r1, #4
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ffa6 	bl	800051c <Read16>
 80005d0:	4603      	mov	r3, r0
 80005d2:	81fb      	strh	r3, [r7, #14]

	return (result);
 80005d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <INA219_ReadCurrent_mA>:

int16_t INA219_ReadCurrent_mA(INA219_t *ina219)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffe9 	bl	80005c0 <INA219_ReadCurrent_raw>
 80005ee:	4603      	mov	r3, r0
 80005f0:	81fb      	strh	r3, [r7, #14]
	result /= ina219_currentDivider_mA;
 80005f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <INA219_ReadCurrent_mA+0x30>)
 80005f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8000600:	81fb      	strh	r3, [r7, #14]

	return result;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000086 	.word	0x20000086

08000614 <INA219_ReadPower_raw>:

int16_t INA219_ReadPower_raw(INA219_t *ina219)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
//	INA219_setCalibration(ina219, ina219_calibrationValue);

	int16_t result = Read16(ina219, INA219_REG_POWER);
 800061c:	2103      	movs	r1, #3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ff7c 	bl	800051c <Read16>
 8000624:	4603      	mov	r3, r0
 8000626:	81fb      	strh	r3, [r7, #14]

	return (result);
 8000628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <INA219_ReadPower_mW>:
int16_t INA219_ReadPower_mW(INA219_t *ina219)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	float result = INA219_ReadPower_raw(ina219);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffe9 	bl	8000614 <INA219_ReadPower_raw>
 8000642:	4603      	mov	r3, r0
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff feef 	bl	8000428 <__aeabi_i2f>
 800064a:	4603      	mov	r3, r0
 800064c:	60fb      	str	r3, [r7, #12]
	result *=  ina219_powerMultiplier_mW;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <INA219_ReadPower_mW+0x48>)
 8000650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fee7 	bl	8000428 <__aeabi_i2f>
 800065a:	4603      	mov	r3, r0
 800065c:	4619      	mov	r1, r3
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f7ff fd74 	bl	800014c <__aeabi_fmul>
 8000664:	4603      	mov	r3, r0
 8000666:	60fb      	str	r3, [r7, #12]
	return result;
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f7ff ff31 	bl	80004d0 <__aeabi_f2iz>
 800066e:	4603      	mov	r3, r0
 8000670:	b21b      	sxth	r3, r3
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000088 	.word	0x20000088

08000680 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800068c:	2100      	movs	r1, #0
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff ff6e 	bl	8000570 <Write16>
	HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 ff71 	bl	800157c <HAL_Delay>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	461a      	mov	r2, r3
 80006b2:	2105      	movs	r1, #5
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ff5b 	bl	8000570 <Write16>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <INA219_setConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
<<<<<<< HEAD
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff03 	bl	80007b0 <Write16>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <INA219_setCalibration_16V_6A>:
=======
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	461a      	mov	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff4b 	bl	8000570 <Write16>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <INA219_setCalibration_16V_6A>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}
void INA219_setCalibration_16V_6A(INA219_t *ina219)
{
<<<<<<< HEAD
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 80009bc:	f240 139f 	movw	r3, #415	; 0x19f
 80009c0:	81fb      	strh	r3, [r7, #14]
=======
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 80006ec:	f240 139f 	movw	r3, #415	; 0x19f
 80006f0:	81fb      	strh	r3, [r7, #14]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
<<<<<<< HEAD
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <INA219_setCalibration_16V_6A+0x40>)
 80009c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 5;    // Current LSB = 200uA per bit (1000/200 = 5)
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <INA219_setCalibration_16V_6A+0x44>)
 80009cc:	2205      	movs	r2, #5
 80009ce:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 4.0f; // Power LSB = 4mW per bit
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <INA219_setCalibration_16V_6A+0x48>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <INA219_setCalibration_16V_6A+0x40>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ffc8 	bl	8000972 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffd3 	bl	8000992 <INA219_setConfig>
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000084 	.word	0x20000084
 80009f8:	20000086 	.word	0x20000086
 80009fc:	20000088 	.word	0x20000088

08000a00 <INA219_Init>:
=======
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <INA219_setCalibration_16V_6A+0x40>)
 80006f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006f8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 5;    // Current LSB = 200uA per bit (1000/200 = 5)
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <INA219_setCalibration_16V_6A+0x44>)
 80006fc:	2205      	movs	r2, #5
 80006fe:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 4.0f; // Power LSB = 4mW per bit
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <INA219_setCalibration_16V_6A+0x48>)
 8000702:	2204      	movs	r2, #4
 8000704:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <INA219_setCalibration_16V_6A+0x40>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffc8 	bl	80006a2 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4619      	mov	r1, r3
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ffd3 	bl	80006c2 <INA219_setConfig>

}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	20000086 	.word	0x20000086
 800072c:	20000088 	.word	0x20000088

08000730 <INA219_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
<<<<<<< HEAD
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <INA219_Init+0x5c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <INA219_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	b299      	uxth	r1, r3
 8000a2e:	2302      	movs	r3, #2
 8000a30:	2203      	movs	r2, #3
 8000a32:	68b8      	ldr	r0, [r7, #8]
 8000a34:	f002 f990 	bl	8002d58 <HAL_I2C_IsDeviceReady>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d107      	bne.n	8000a52 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff ff84 	bl	8000950 <INA219_Reset>
		INA219_setCalibration_16V_6A(ina219);
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff ffb3 	bl	80009b4 <INA219_setCalibration_16V_6A>

		return 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <INA219_Init+0x54>
=======
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <INA219_Init+0x5c>)
 800074c:	2200      	movs	r2, #0
 800074e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <INA219_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	b29b      	uxth	r3, r3
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	b299      	uxth	r1, r3
 800075e:	2302      	movs	r3, #2
 8000760:	2203      	movs	r2, #3
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	f002 fbea 	bl	8002f3c <HAL_I2C_IsDeviceReady>
 8000768:	4603      	mov	r3, r0
 800076a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800076c:	7dfb      	ldrb	r3, [r7, #23]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d107      	bne.n	8000782 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff ff84 	bl	8000680 <INA219_Reset>
//		INA219_setCalibration_16V_400mA(ina219);
		INA219_setCalibration_16V_6A(ina219);
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff ffb3 	bl	80006e4 <INA219_setCalibration_16V_6A>

		return 1;
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <INA219_Init+0x54>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
	}

	else
	{
		return 0;
<<<<<<< HEAD
 8000a52:	2300      	movs	r3, #0
	}
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000086 	.word	0x20000086
 8000a60:	20000088 	.word	0x20000088

08000a64 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000782:	2300      	movs	r3, #0
	}
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000086 	.word	0x20000086
 8000790:	20000088 	.word	0x20000088

08000794 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim2.Instance)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d107      	bne.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x24>
 {
   HAL_GPIO_TogglePin(GPIOB, LEDG_Pin);
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a7e:	f001 fcab 	bl	80023d8 <HAL_GPIO_TogglePin>
   isPrint = true;
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
 }
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000110 	.word	0x20000110
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	200001f8 	.word	0x200001f8

08000a9c <main>:
=======
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim2.Instance)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d107      	bne.n	80007b8 <HAL_TIM_PeriodElapsedCallback+0x24>
 {
   HAL_GPIO_TogglePin(GPIOB, LEDG_Pin);
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007ae:	f001 ff05 	bl	80025bc <HAL_GPIO_TogglePin>
   isPrint = true;
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
 }
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000190 	.word	0x20000190
 80007c4:	40010c00 	.word	0x40010c00
 80007c8:	20000278 	.word	0x20000278

080007cc <main>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
=======
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000aa2:	f000 fd11 	bl	80014c8 <HAL_Init>
=======
 80007d2:	f000 fe71 	bl	80014b8 <HAL_Init>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000aa6:	f000 f897 	bl	8000bd8 <SystemClock_Config>
=======
 80007d6:	f000 f891 	bl	80008fc <SystemClock_Config>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000aaa:	f000 f9f3 	bl	8000e94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aae:	f000 f8e3 	bl	8000c78 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ab2:	f000 f91f 	bl	8000cf4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ab6:	f000 f999 	bl	8000dec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aba:	f000 f9c1 	bl	8000e40 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000abe:	f000 f947 	bl	8000d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000ac2:	e005      	b.n	8000ad0 <main+0x34>
  {
	  HAL_GPIO_WritePin(GPIOB, LEDR_Pin, GPIO_PIN_RESET); // on LedRed
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4834      	ldr	r0, [pc, #208]	; (8000b9c <main+0x100>)
 8000acc:	f001 fc6c 	bl	80023a8 <HAL_GPIO_WritePin>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000ad0:	2240      	movs	r2, #64	; 0x40
 8000ad2:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <main+0x104>)
 8000ad4:	4833      	ldr	r0, [pc, #204]	; (8000ba4 <main+0x108>)
 8000ad6:	f7ff ff93 	bl	8000a00 <INA219_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f1      	beq.n	8000ac4 <main+0x28>
  }
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin, GPIO_PIN_SET); 	// off LedRed
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <main+0x100>)
 8000ae8:	f001 fc5e 	bl	80023a8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000aec:	482e      	ldr	r0, [pc, #184]	; (8000ba8 <main+0x10c>)
 8000aee:	f003 fbe1 	bl	80042b4 <HAL_TIM_Base_Start_IT>

  uvbus = INA219_ReadBusVoltage_mV(&ina219);
 8000af2:	482c      	ldr	r0, [pc, #176]	; (8000ba4 <main+0x108>)
 8000af4:	f7ff fec2 	bl	800087c <INA219_ReadBusVoltage_mV>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <main+0x110>)
 8000afe:	801a      	strh	r2, [r3, #0]
  uvshunt = INA219_ReadShuntVolage_mV(&ina219);
 8000b00:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <main+0x108>)
 8000b02:	f7ff fecd 	bl	80008a0 <INA219_ReadShuntVolage_mV>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <main+0x114>)
 8000b0c:	801a      	strh	r2, [r3, #0]
  ucurrent = INA219_ReadCurrent_mA(&ina219);
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <main+0x108>)
 8000b10:	f7ff feea 	bl	80008e8 <INA219_ReadCurrent_mA>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <main+0x118>)
 8000b1a:	801a      	strh	r2, [r3, #0]
  upower = INA219_ReadPower_mW(&ina219);
 8000b1c:	4821      	ldr	r0, [pc, #132]	; (8000ba4 <main+0x108>)
 8000b1e:	f7ff fefd 	bl	800091c <INA219_ReadPower_mW>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <main+0x11c>)
 8000b28:	801a      	strh	r2, [r3, #0]
  while (1)
=======
 80007da:	f000 fa63 	bl	8000ca4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007de:	f000 f8e9 	bl	80009b4 <MX_ADC1_Init>
  MX_CAN_Init();
 80007e2:	f000 f925 	bl	8000a30 <MX_CAN_Init>
  MX_I2C1_Init();
 80007e6:	f000 f957 	bl	8000a98 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007ea:	f000 f983 	bl	8000af4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007ee:	f000 fa05 	bl	8000bfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007f2:	f000 fa2d 	bl	8000c50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007f6:	f000 f9b3 	bl	8000b60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 80007fa:	e005      	b.n	8000808 <main+0x3c>
  {
	  HAL_GPIO_WritePin(GPIOB, LEDR_Pin, GPIO_PIN_SET); // off LedRed
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	482f      	ldr	r0, [pc, #188]	; (80008c0 <main+0xf4>)
 8000804:	f001 fec2 	bl	800258c <HAL_GPIO_WritePin>
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000808:	2240      	movs	r2, #64	; 0x40
 800080a:	492e      	ldr	r1, [pc, #184]	; (80008c4 <main+0xf8>)
 800080c:	482e      	ldr	r0, [pc, #184]	; (80008c8 <main+0xfc>)
 800080e:	f7ff ff8f 	bl	8000730 <INA219_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f1      	beq.n	80007fc <main+0x30>
  }
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin, GPIO_PIN_RESET); 	// on LedRed
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	4828      	ldr	r0, [pc, #160]	; (80008c0 <main+0xf4>)
 8000820:	f001 feb4 	bl	800258c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000824:	4829      	ldr	r0, [pc, #164]	; (80008cc <main+0x100>)
 8000826:	f003 febb 	bl	80045a0 <HAL_TIM_Base_Start_IT>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
<<<<<<< HEAD
	  uint32_t temp = GetTemperature();
 8000b2a:	f000 fa0d 	bl	8000f48 <GetTemperature>
 8000b2e:	6078      	str	r0, [r7, #4]

	  if(isPrint)
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <main+0x120>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f8      	beq.n	8000b2a <main+0x8e>
	  {
		  printf("Vb: %.02u mV\n", uvbus);
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <main+0x110>)
 8000b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <main+0x124>)
 8000b42:	f004 f9f7 	bl	8004f34 <iprintf>
		  printf("Vs: %.02u mV\n", uvshunt);
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <main+0x114>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481d      	ldr	r0, [pc, #116]	; (8000bc4 <main+0x128>)
 8000b50:	f004 f9f0 	bl	8004f34 <iprintf>
		  printf("\nC: %.02u mA\n", ucurrent);
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <main+0x118>)
 8000b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <main+0x12c>)
 8000b5e:	f004 f9e9 	bl	8004f34 <iprintf>
		  printf("P: %.02u mW\n", upower);
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <main+0x11c>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4818      	ldr	r0, [pc, #96]	; (8000bcc <main+0x130>)
 8000b6c:	f004 f9e2 	bl	8004f34 <iprintf>

		  printf("T: %ld.%02ld\n", temp / 100, temp % 100);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <main+0x134>)
 8000b74:	fba2 2303 	umull	r2, r3, r2, r3
 8000b78:	0959      	lsrs	r1, r3, #5
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <main+0x134>)
 8000b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	fb00 f303 	mul.w	r3, r0, r3
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <main+0x138>)
 8000b90:	f004 f9d0 	bl	8004f34 <iprintf>
		  isPrint = false;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <main+0x120>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
  {
 8000b9a:	e7c6      	b.n	8000b2a <main+0x8e>
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	200000bc 	.word	0x200000bc
 8000ba4:	200001e8 	.word	0x200001e8
 8000ba8:	20000110 	.word	0x20000110
 8000bac:	200001f0 	.word	0x200001f0
 8000bb0:	200001f2 	.word	0x200001f2
 8000bb4:	200001f4 	.word	0x200001f4
 8000bb8:	200001f6 	.word	0x200001f6
 8000bbc:	200001f8 	.word	0x200001f8
 8000bc0:	08005c48 	.word	0x08005c48
 8000bc4:	08005c58 	.word	0x08005c58
 8000bc8:	08005c68 	.word	0x08005c68
 8000bcc:	08005c78 	.word	0x08005c78
 8000bd0:	51eb851f 	.word	0x51eb851f
 8000bd4:	08005c88 	.word	0x08005c88

08000bd8 <SystemClock_Config>:
=======
	  //Read temp
	  uint32_t temp = GetTemperature();
 800082a:	f000 faef 	bl	8000e0c <GetTemperature>
 800082e:	6078      	str	r0, [r7, #4]
	  uint32_t tempRAW = GetTemperature_raw();
 8000830:	f000 fb28 	bl	8000e84 <GetTemperature_raw>
 8000834:	6038      	str	r0, [r7, #0]

	  if(isPrint)
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <main+0x104>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0f5      	beq.n	800082a <main+0x5e>
	  {
//		uvbus = INA219_ReadBusVoltage(&ina219);
//		uvshunt = INA219_ReadShuntVolage(&ina219);
		ucurrent = INA219_ReadCurrent_mA(&ina219);
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <main+0xfc>)
 8000840:	f7ff fece 	bl	80005e0 <INA219_ReadCurrent_mA>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <main+0x108>)
 800084a:	801a      	strh	r2, [r3, #0]
		upower = INA219_ReadPower_mW(&ina219);
 800084c:	481e      	ldr	r0, [pc, #120]	; (80008c8 <main+0xfc>)
 800084e:	f7ff fef1 	bl	8000634 <INA219_ReadPower_mW>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <main+0x10c>)
 8000858:	801a      	strh	r2, [r3, #0]
		  printf("\nC: %.02u\n", ucurrent);
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <main+0x108>)
 800085c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000860:	4619      	mov	r1, r3
 8000862:	481e      	ldr	r0, [pc, #120]	; (80008dc <main+0x110>)
 8000864:	f004 fcdc 	bl	8005220 <iprintf>
		  printf("Vb: %.02u\n", uvbus);
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <main+0x114>)
 800086a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	; (80008e4 <main+0x118>)
 8000872:	f004 fcd5 	bl	8005220 <iprintf>
		  printf("Vs: %.02u\n", uvshunt);
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <main+0x11c>)
 8000878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087c:	4619      	mov	r1, r3
 800087e:	481b      	ldr	r0, [pc, #108]	; (80008ec <main+0x120>)
 8000880:	f004 fcce 	bl	8005220 <iprintf>
		  printf("P: %.02u\n", upower);
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <main+0x10c>)
 8000886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088a:	4619      	mov	r1, r3
 800088c:	4818      	ldr	r0, [pc, #96]	; (80008f0 <main+0x124>)
 800088e:	f004 fcc7 	bl	8005220 <iprintf>

		  printf("T1: %ld.%02ld\n", temp / 1000, temp % 1000);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <main+0x128>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0999      	lsrs	r1, r3, #6
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <main+0x128>)
 80008a0:	fba3 0302 	umull	r0, r3, r3, r2
 80008a4:	099b      	lsrs	r3, r3, #6
 80008a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008aa:	fb00 f303 	mul.w	r3, r0, r3
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <main+0x12c>)
 80008b4:	f004 fcb4 	bl	8005220 <iprintf>
		  isPrint = false;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <main+0x104>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
  {
 80008be:	e7b4      	b.n	800082a <main+0x5e>
 80008c0:	40010c00 	.word	0x40010c00
 80008c4:	200000e4 	.word	0x200000e4
 80008c8:	20000268 	.word	0x20000268
 80008cc:	20000190 	.word	0x20000190
 80008d0:	20000278 	.word	0x20000278
 80008d4:	20000274 	.word	0x20000274
 80008d8:	20000276 	.word	0x20000276
 80008dc:	08005f34 	.word	0x08005f34
 80008e0:	20000270 	.word	0x20000270
 80008e4:	08005f40 	.word	0x08005f40
 80008e8:	20000272 	.word	0x20000272
 80008ec:	08005f4c 	.word	0x08005f4c
 80008f0:	08005f58 	.word	0x08005f58
 80008f4:	10624dd3 	.word	0x10624dd3
 80008f8:	08005f64 	.word	0x08005f64

080008fc <SystemClock_Config>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 f9f9 	bl	8004fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
=======
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	2228      	movs	r2, #40	; 0x28
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fcdd 	bl	80052ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
<<<<<<< HEAD
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c10:	2310      	movs	r3, #16
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fd7d 	bl	800371c <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c28:	f000 f9e4 	bl	8000ff4 <Error_Handler>
=======
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	4618      	mov	r0, r3
 8000954:	f002 ffd4 	bl	8003900 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800095e:	f000 faab 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 ffea 	bl	8003c20 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c52:	f000 f9cf 	bl	8000ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c56:	2302      	movs	r3, #2
 8000c58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 f96b 	bl	8003f3c <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c6c:	f000 f9c2 	bl	8000ff4 <Error_Handler>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3750      	adds	r7, #80	; 0x50
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <MX_ADC1_Init>:
=======
 8000962:	230f      	movs	r3, #15
 8000964:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fa40 	bl	8003e04 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800098a:	f000 fa95 	bl	8000eb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800098e:	2302      	movs	r3, #2
 8000990:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000996:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fbc0 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009a6:	f000 fa87 	bl	8000eb8 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_ADC1_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
=======
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
=======
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_ADC1_Init+0x74>)
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <MX_ADC1_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_ADC1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_ADC1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_ADC1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_ADC1_Init+0x74>)
 8000ca2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ca6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_ADC1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_ADC1_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_ADC1_Init+0x74>)
 8000cb6:	f000 fc8d 	bl	80015d4 <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 f998 	bl	8000ff4 <Error_Handler>
=======
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009c6:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <MX_ADC1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_ADC1_Init+0x74>)
 80009f2:	f000 fde7 	bl	80015c4 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009fc:	f000 fa5c 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /** Configure Regular Channel
  */
<<<<<<< HEAD
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_ADC1_Init+0x74>)
 8000cd6:	f000 ff41 	bl	8001b5c <HAL_ADC_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ce0:	f000 f988 	bl	8000ff4 <Error_Handler>
=======
  sConfig.Channel = ADC_CHANNEL_4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_ADC1_Init+0x74>)
 8000a12:	f001 f89b 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a1c:	f000 fa4c 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	40012400 	.word	0x40012400

08000cf4 <MX_I2C1_Init>:
=======
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	40012400 	.word	0x40012400

08000a30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_CAN_Init+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_CAN_Init+0x60>)
 8000a7e:	f001 f9f8 	bl	8001e72 <HAL_CAN_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 fa16 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000bc 	.word	0x200000bc
 8000a94:	40006400 	.word	0x40006400

08000a98 <MX_I2C1_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
=======
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_I2C1_Init+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x58>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d32:	f001 fb6b 	bl	800240c <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d3c:	f000 f95a 	bl	8000ff4 <Error_Handler>
=======
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000a9e:	4a13      	ldr	r2, [pc, #76]	; (8000aec <MX_I2C1_Init+0x54>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_I2C1_Init+0x58>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad6:	f001 fd8b 	bl	80025f0 <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 f9ea 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000bc 	.word	0x200000bc
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	000186a0 	.word	0x000186a0

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
=======
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000e4 	.word	0x200000e4
 8000aec:	40005400 	.word	0x40005400
 8000af0:	000186a0 	.word	0x000186a0

08000af4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
=======
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE BEGIN TIM2_Init 0 */

<<<<<<< HEAD
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d76:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d84:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000d98:	f003 fa3c 	bl	8004214 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000da2:	f000 f927 	bl	8000ff4 <Error_Handler>
=======
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000afa:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <MX_SPI1_Init+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b28:	2218      	movs	r2, #24
 8000b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b40:	220a      	movs	r2, #10
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_SPI1_Init+0x64>)
 8000b46:	f003 fc57 	bl	80043f8 <HAL_SPI_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b50:	f000 f9b2 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000db4:	f003 fbd8 	bl	8004568 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dbe:	f000 f919 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_TIM2_Init+0x98>)
 8000dd0:	f003 fdae 	bl	8004930 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dda:	f000 f90b 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000110 	.word	0x20000110

08000dec <MX_USART1_UART_Init>:
=======
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000138 	.word	0x20000138
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000b86:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000b94:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba6:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000ba8:	f003 fcaa 	bl	8004500 <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bb2:	f000 f981 	bl	8000eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000bc4:	f003 fe46 	bl	8004854 <HAL_TIM_ConfigClockSource>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bce:	f000 f973 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_TIM2_Init+0x98>)
 8000be0:	f004 f81c 	bl	8004c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bea:	f000 f965 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000190 	.word	0x20000190

08000bfc <MX_USART1_UART_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
=======
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART1_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f003 fdf4 	bl	8004a10 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f8e1 	bl	8000ff4 <Error_Handler>
=======
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART1_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f004 f862 	bl	8004cfc <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f93b 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000158 	.word	0x20000158
 8000e3c:	40013800 	.word	0x40013800

08000e40 <MX_USART2_UART_Init>:
=======
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001d8 	.word	0x200001d8
 8000c4c:	40013800 	.word	0x40013800

08000c50 <MX_USART2_UART_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
=======
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_USART2_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e78:	f003 fdca 	bl	8004a10 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f000 f8b7 	bl	8000ff4 <Error_Handler>
=======
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_USART2_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c88:	f004 f838 	bl	8004cfc <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f911 	bl	8000eb8 <Error_Handler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001a0 	.word	0x200001a0
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_GPIO_Init>:
=======
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000220 	.word	0x20000220
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <MX_GPIO_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
=======
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
<<<<<<< HEAD
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_GPIO_Init+0xa8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000ee0:	f001 fa62 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4812      	ldr	r0, [pc, #72]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000ef8:	f001 f8d2 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin;
 8000efc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4619      	mov	r1, r3
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000f16:	f001 f8c3 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_INT_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_GPIO_Init+0xb0>)
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0xac>)
 8000f30:	f001 f8b6 	bl	80020a0 <HAL_GPIO_Init>
=======
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a48      	ldr	r2, [pc, #288]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a42      	ldr	r2, [pc, #264]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a3c      	ldr	r2, [pc, #240]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <MX_GPIO_Init+0x154>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_MCU1_0_GPIO_Port, XSHUT_MCU1_0_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <MX_GPIO_Init+0x158>)
 8000d20:	f001 fc34 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f641 4108 	movw	r1, #7176	; 0x1c08
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <MX_GPIO_Init+0x15c>)
 8000d2c:	f001 fc2e 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_BOOT_Pin|MPU_RST_Pin|XSHUT_MCU1_1_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 8000d36:	4832      	ldr	r0, [pc, #200]	; (8000e00 <MX_GPIO_Init+0x15c>)
 8000d38:	f001 fc28 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d42:	4830      	ldr	r0, [pc, #192]	; (8000e04 <MX_GPIO_Init+0x160>)
 8000d44:	f001 fc22 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO1_MCU1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_MCU1_0_Pin;
 8000d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_GPIO_Init+0x164>)
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <MX_GPIO_Init+0x158>)
 8000d5e:	f001 fa91 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : XSHUT_MCU1_0_Pin */
  GPIO_InitStruct.Pin = XSHUT_MCU1_0_Pin;
 8000d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSHUT_MCU1_0_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4820      	ldr	r0, [pc, #128]	; (8000dfc <MX_GPIO_Init+0x158>)
 8000d7c:	f001 fa82 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin;
 8000d80:	2303      	movs	r3, #3
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	481b      	ldr	r0, [pc, #108]	; (8000e00 <MX_GPIO_Init+0x15c>)
 8000d94:	f001 fa76 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin MPU_BOOT_Pin
                           MPU_RST_Pin PB3 XSHUT_MCU1_1_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin|MPU_BOOT_Pin
 8000d98:	f64d 5308 	movw	r3, #56584	; 0xdd08
 8000d9c:	613b      	str	r3, [r7, #16]
                          |MPU_RST_Pin|GPIO_PIN_3|XSHUT_MCU1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_GPIO_Init+0x15c>)
 8000db2:	f001 fa67 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU_INT_Pin GPIO1_MCU1_1_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin|GPIO1_MCU1_1_Pin;
 8000db6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_GPIO_Init+0x164>)
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_GPIO_Init+0x15c>)
 8000dcc:	f001 fa5a 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4619      	mov	r1, r3
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x160>)
 8000dea:	f001 fa4b 	bl	8002284 <HAL_GPIO_Init>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	10110000 	.word	0x10110000

08000f48 <GetTemperature>:
=======
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	40010800 	.word	0x40010800
 8000e08:	10110000 	.word	0x10110000

08000e0c <GetTemperature>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/* USER CODE BEGIN 4 */
uint32_t GetTemperature(void)
{
<<<<<<< HEAD
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
	uint32_t ADC_val = GetTemperature_raw();
 8000f4e:	f000 f837 	bl	8000fc0 <GetTemperature_raw>
 8000f52:	60f8      	str	r0, [r7, #12]

  uint32_t temp = (ADC_val * 5 * 100) / 4095;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f5a:	fb03 f202 	mul.w	r2, r3, r2
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <GetTemperature+0x74>)
 8000f60:	fba3 1302 	umull	r1, r3, r3, r2
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	0852      	lsrs	r2, r2, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	0adb      	lsrs	r3, r3, #11
 8000f6c:	60bb      	str	r3, [r7, #8]
  uint32_t temp_decimal = ((ADC_val * 5) % 4095) * 100 / 4095;
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	1899      	adds	r1, r3, r2
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <GetTemperature+0x74>)
 8000f78:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7c:	1aca      	subs	r2, r1, r3
 8000f7e:	0852      	lsrs	r2, r2, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	0ada      	lsrs	r2, r3, #11
 8000f84:	4613      	mov	r3, r2
 8000f86:	031b      	lsls	r3, r3, #12
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	1aca      	subs	r2, r1, r3
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	fb03 f202 	mul.w	r2, r3, r2
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <GetTemperature+0x74>)
 8000f94:	fba3 1302 	umull	r1, r3, r3, r2
 8000f98:	1ad2      	subs	r2, r2, r3
 8000f9a:	0852      	lsrs	r2, r2, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	0adb      	lsrs	r3, r3, #11
 8000fa0:	607b      	str	r3, [r7, #4]

  uint32_t temperature = temp * 100 + temp_decimal;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2264      	movs	r2, #100	; 0x64
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	603b      	str	r3, [r7, #0]
  return temperature;
 8000fb0:	683b      	ldr	r3, [r7, #0]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	00100101 	.word	0x00100101

08000fc0 <GetTemperature_raw>:
uint32_t GetTemperature_raw(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint32_t ADC_val;

  HAL_ADC_Start(&hadc1);
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <GetTemperature_raw+0x30>)
 8000fc8:	f000 fbdc 	bl	8001784 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 2000);
 8000fcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <GetTemperature_raw+0x30>)
 8000fd2:	f000 fcb1 	bl	8001938 <HAL_ADC_PollForConversion>
  ADC_val = HAL_ADC_GetValue(&hadc1);
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <GetTemperature_raw+0x30>)
 8000fd8:	f000 fdb4 	bl	8001b44 <HAL_ADC_GetValue>
 8000fdc:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <GetTemperature_raw+0x30>)
 8000fe0:	f000 fc7e 	bl	80018e0 <HAL_ADC_Stop>

  return ADC_val;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <Error_Handler>:
=======
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
	uint32_t ADC_val = GetTemperature_raw();
 8000e12:	f000 f837 	bl	8000e84 <GetTemperature_raw>
 8000e16:	60f8      	str	r0, [r7, #12]

  uint32_t temp = (ADC_val * 5 * 100) / 4095;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e1e:	fb03 f202 	mul.w	r2, r3, r2
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <GetTemperature+0x74>)
 8000e24:	fba3 1302 	umull	r1, r3, r3, r2
 8000e28:	1ad2      	subs	r2, r2, r3
 8000e2a:	0852      	lsrs	r2, r2, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	0adb      	lsrs	r3, r3, #11
 8000e30:	60bb      	str	r3, [r7, #8]
  uint32_t temp_decimal = ((ADC_val * 5) % 4095) * 100 / 4095;
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	1899      	adds	r1, r3, r2
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <GetTemperature+0x74>)
 8000e3c:	fba3 2301 	umull	r2, r3, r3, r1
 8000e40:	1aca      	subs	r2, r1, r3
 8000e42:	0852      	lsrs	r2, r2, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	0ada      	lsrs	r2, r3, #11
 8000e48:	4613      	mov	r3, r2
 8000e4a:	031b      	lsls	r3, r3, #12
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	1aca      	subs	r2, r1, r3
 8000e50:	2364      	movs	r3, #100	; 0x64
 8000e52:	fb03 f202 	mul.w	r2, r3, r2
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <GetTemperature+0x74>)
 8000e58:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	0852      	lsrs	r2, r2, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	0adb      	lsrs	r3, r3, #11
 8000e64:	607b      	str	r3, [r7, #4]

  uint32_t temperature = temp * 100 + temp_decimal;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2264      	movs	r2, #100	; 0x64
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	603b      	str	r3, [r7, #0]
  return temperature;
 8000e74:	683b      	ldr	r3, [r7, #0]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	00100101 	.word	0x00100101

08000e84 <GetTemperature_raw>:
uint32_t GetTemperature_raw(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	uint32_t ADC_val;

  HAL_ADC_Start(&hadc1);
 8000e8a:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <GetTemperature_raw+0x30>)
 8000e8c:	f000 fc72 	bl	8001774 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 2000);
 8000e90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <GetTemperature_raw+0x30>)
 8000e96:	f000 fd47 	bl	8001928 <HAL_ADC_PollForConversion>
  ADC_val = HAL_ADC_GetValue(&hadc1);
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <GetTemperature_raw+0x30>)
 8000e9c:	f000 fe4a 	bl	8001b34 <HAL_ADC_GetValue>
 8000ea0:	6078      	str	r0, [r7, #4]
  HAL_ADC_Stop(&hadc1);
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <GetTemperature_raw+0x30>)
 8000ea4:	f000 fd14 	bl	80018d0 <HAL_ADC_Stop>

  return ADC_val;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000008c 	.word	0x2000008c

08000eb8 <Error_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
=======
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
=======
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000ffc:	e7fe      	b.n	8000ffc <Error_Handler+0x8>
	...

08001000 <HAL_MspInit>:
=======
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
=======
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_MspInit+0x5c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_MspInit+0x5c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
=======
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
<<<<<<< HEAD
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_MspInit+0x60>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_MspInit+0x60>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6053      	str	r3, [r2, #4]
=======
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_MspInit+0x60>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_MspInit+0x60>)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6053      	str	r3, [r2, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000

08001064 <HAL_ADC_MspInit>:
=======
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000

08000f28 <HAL_ADC_MspInit>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_ADC_MspInit+0x6c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d121      	bne.n	80010c8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_ADC_MspInit+0x70>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_ADC_MspInit+0x70>)
 800108a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_ADC_MspInit+0x70>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_ADC_MspInit+0x70>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_ADC_MspInit+0x70>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_TEMPT_Pin_Pin;
 80010b4:	2301      	movs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b8:	2303      	movs	r3, #3
 80010ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_TEMPT_Pin_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_ADC_MspInit+0x74>)
 80010c4:	f000 ffec 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40012400 	.word	0x40012400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010800 	.word	0x40010800

080010dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_I2C_MspInit+0x70>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d123      	bne.n	8001144 <HAL_I2C_MspInit+0x68>
=======
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <HAL_ADC_MspInit+0x6c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d121      	bne.n	8000f8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_ADC_MspInit+0x70>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_ADC_MspInit+0x70>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_ADC_MspInit+0x70>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_ADC_MspInit+0x70>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <HAL_ADC_MspInit+0x70>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_ADC_MspInit+0x70>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_Temp_Pin_Pin|ADC_TEMPT_Pin;
 8000f78:	2311      	movs	r3, #17
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_ADC_MspInit+0x74>)
 8000f88:	f001 f97c 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40012400 	.word	0x40012400
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <HAL_CAN_MspInit+0x8c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d131      	bne.n	8001024 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_CAN_MspInit+0x90>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <HAL_CAN_MspInit+0x90>)
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	61d3      	str	r3, [r2, #28]
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_CAN_MspInit+0x90>)
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_CAN_MspInit+0x90>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_CAN_MspInit+0x90>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_CAN_MspInit+0x90>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <HAL_CAN_MspInit+0x94>)
 8001006:	f001 f93d 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_CAN_MspInit+0x94>)
 8001020:	f001 f930 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40006400 	.word	0x40006400
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800

08001038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <HAL_I2C_MspInit+0x70>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d123      	bne.n	80010a0 <HAL_I2C_MspInit+0x68>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_I2C_MspInit+0x74>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_I2C_MspInit+0x74>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_I2C_MspInit+0x74>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
=======
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_I2C_MspInit+0x74>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_I2C_MspInit+0x74>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_I2C_MspInit+0x74>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8001114:	23c0      	movs	r3, #192	; 0xc0
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <HAL_I2C_MspInit+0x78>)
 8001128:	f000 ffba 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_I2C_MspInit+0x74>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_I2C_MspInit+0x74>)
 8001132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001136:	61d3      	str	r3, [r2, #28]
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_I2C_MspInit+0x74>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
=======
 8001070:	23c0      	movs	r3, #192	; 0xc0
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <HAL_I2C_MspInit+0x78>)
 8001084:	f001 f8fe 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0x74>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_I2C_MspInit+0x74>)
 800108e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001092:	61d3      	str	r3, [r2, #28]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_I2C_MspInit+0x74>)
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40005400 	.word	0x40005400
 8001150:	40021000 	.word	0x40021000
 8001154:	40010c00 	.word	0x40010c00

08001158 <HAL_TIM_Base_MspInit>:
=======
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <HAL_SPI_MspInit>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001168:	d113      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x3a>
=======
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <HAL_SPI_MspInit+0x88>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d12f      	bne.n	8001134 <HAL_SPI_MspInit+0x80>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
<<<<<<< HEAD
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_TIM_Base_MspInit+0x44>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_TIM_Base_MspInit+0x44>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_TIM_Base_MspInit+0x44>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	201c      	movs	r0, #28
 8001188:	f000 ff53 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800118c:	201c      	movs	r0, #28
 800118e:	f000 ff6c 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_UART_MspInit>:
=======
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 80010da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_SPI_MspInit+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001104:	23a0      	movs	r3, #160	; 0xa0
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <HAL_SPI_MspInit+0x90>)
 8001118:	f001 f8b4 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800111c:	2340      	movs	r3, #64	; 0x40
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_SPI_MspInit+0x90>)
 8001130:	f001 f8a8 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40013000 	.word	0x40013000
 8001140:	40021000 	.word	0x40021000
 8001144:	40010800 	.word	0x40010800

08001148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001158:	d113      	bne.n	8001182 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_TIM_Base_MspInit+0x44>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <HAL_TIM_Base_MspInit+0x44>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_TIM_Base_MspInit+0x44>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	201c      	movs	r0, #28
 8001178:	f001 f84d 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800117c:	201c      	movs	r0, #28
 800117e:	f001 f866 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_UART_MspInit>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a37      	ldr	r2, [pc, #220]	; (8001298 <HAL_UART_MspInit+0xf8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d132      	bne.n	8001226 <HAL_UART_MspInit+0x86>
=======
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a37      	ldr	r2, [pc, #220]	; (8001288 <HAL_UART_MspInit+0xf8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d132      	bne.n	8001216 <HAL_UART_MspInit+0x86>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_UART_MspInit+0xfc>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a35      	ldr	r2, [pc, #212]	; (800129c <HAL_UART_MspInit+0xfc>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <HAL_UART_MspInit+0xfc>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_UART_MspInit+0xfc>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a2f      	ldr	r2, [pc, #188]	; (800129c <HAL_UART_MspInit+0xfc>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_UART_MspInit+0xfc>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
=======
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <HAL_UART_MspInit+0xfc>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a35      	ldr	r2, [pc, #212]	; (800128c <HAL_UART_MspInit+0xfc>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <HAL_UART_MspInit+0xfc>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_UART_MspInit+0xfc>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a2f      	ldr	r2, [pc, #188]	; (800128c <HAL_UART_MspInit+0xfc>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_UART_MspInit+0xfc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	4619      	mov	r1, r3
 8001204:	4826      	ldr	r0, [pc, #152]	; (80012a0 <HAL_UART_MspInit+0x100>)
 8001206:	f000 ff4b 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4619      	mov	r1, r3
 800121e:	4820      	ldr	r0, [pc, #128]	; (80012a0 <HAL_UART_MspInit+0x100>)
 8001220:	f000 ff3e 	bl	80020a0 <HAL_GPIO_Init>
=======
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <HAL_UART_MspInit+0x100>)
 80011f6:	f001 f845 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4619      	mov	r1, r3
 800120e:	4820      	ldr	r0, [pc, #128]	; (8001290 <HAL_UART_MspInit+0x100>)
 8001210:	f001 f838 	bl	8002284 <HAL_GPIO_Init>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001224:	e034      	b.n	8001290 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_UART_MspInit+0x104>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d12f      	bne.n	8001290 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_UART_MspInit+0xfc>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0xfc>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123a:	61d3      	str	r3, [r2, #28]
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_UART_MspInit+0xfc>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_UART_MspInit+0xfc>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_UART_MspInit+0xfc>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_MspInit+0xfc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001260:	2304      	movs	r3, #4
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	4619      	mov	r1, r3
 8001272:	480b      	ldr	r0, [pc, #44]	; (80012a0 <HAL_UART_MspInit+0x100>)
 8001274:	f000 ff14 	bl	80020a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001278:	2308      	movs	r3, #8
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_UART_MspInit+0x100>)
 800128c:	f000 ff08 	bl	80020a0 <HAL_GPIO_Init>
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40013800 	.word	0x40013800
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40004400 	.word	0x40004400

080012a8 <NMI_Handler>:
=======
 8001214:	e034      	b.n	8001280 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_UART_MspInit+0x104>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d12f      	bne.n	8001280 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_UART_MspInit+0xfc>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_UART_MspInit+0xfc>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_UART_MspInit+0xfc>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_UART_MspInit+0xfc>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <HAL_UART_MspInit+0xfc>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0xfc>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001250:	2304      	movs	r3, #4
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_UART_MspInit+0x100>)
 8001264:	f001 f80e 	bl	8002284 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001268:	2308      	movs	r3, #8
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_MspInit+0x100>)
 800127c:	f001 f802 	bl	8002284 <HAL_GPIO_Init>
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40013800 	.word	0x40013800
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800
 8001294:	40004400 	.word	0x40004400

08001298 <NMI_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
=======
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:
=======
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
=======
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:
=======
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
=======
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:
=======
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
=======
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:
=======
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
=======
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:
=======
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
=======
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:
=======
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <DebugMon_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
=======
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:
=======
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
=======
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:
=======
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <SysTick_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
=======
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80012ee:	f000 f931 	bl	8001554 <HAL_IncTick>
=======
 80012de:	f000 f931 	bl	8001544 <HAL_IncTick>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <TIM2_IRQHandler>:
=======
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <TIM2_IRQHandler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
=======
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM2_IRQHandler+0x10>)
 80012fe:	f003 f82b 	bl	8004358 <HAL_TIM_IRQHandler>
=======
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM2_IRQHandler+0x10>)
 80012ee:	f003 f9a9 	bl	8004644 <HAL_TIM_IRQHandler>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000110 	.word	0x20000110

0800130c <_read>:
=======
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000190 	.word	0x20000190

080012fc <_read>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
=======
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
  }

  return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
=======
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e009      	b.n	800136c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f879 	bl	8001458 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf1      	blt.n	8001358 <_write+0x12>
  }
  return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_close>:

int _close(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a4:	605a      	str	r2, [r3, #4]
  return 0;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <_isatty>:

int _isatty(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ba:	2301      	movs	r3, #1
=======
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f879 	bl	8001448 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf1      	blt.n	8001348 <_write+0x12>
  }
  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:

int _close(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

<<<<<<< HEAD
080013c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
=======
08001384 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001394:	605a      	str	r2, [r3, #4]
  return 0;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <_isatty>:

int _isatty(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <_sbrk>:
=======
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
	...

080013d0 <_sbrk>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
=======
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
=======
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
=======
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f003 fe34 	bl	800507c <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20005000 	.word	0x20005000
 8001440:	00000400 	.word	0x00000400
 8001444:	200001fc 	.word	0x200001fc
 8001448:	20000350 	.word	0x20000350

0800144c <SystemInit>:
=======
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f003 ffb2 	bl	8005368 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20005000 	.word	0x20005000
 8001430:	00000400 	.word	0x00000400
 8001434:	2000027c 	.word	0x2000027c
 8001438:	200003d0 	.word	0x200003d0

0800143c <SystemInit>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
=======
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <__io_putchar>:
=======
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <__io_putchar>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
<<<<<<< HEAD
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <__io_putchar+0x20>)
 800146a:	f003 fb21 	bl	8004ab0 <HAL_UART_Transmit>
	return ch;
 800146e:	687b      	ldr	r3, [r7, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000158 	.word	0x20000158

0800147c <Reset_Handler>:
=======
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001450:	1d39      	adds	r1, r7, #4
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2201      	movs	r2, #1
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <__io_putchar+0x20>)
 800145a:	f003 fc9f 	bl	8004d9c <HAL_UART_Transmit>
	return ch;
 800145e:	687b      	ldr	r3, [r7, #4]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200001d8 	.word	0x200001d8

0800146c <Reset_Handler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
<<<<<<< HEAD
 800147c:	f7ff ffe6 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001482:	490c      	ldr	r1, [pc, #48]	; (80014b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001484:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001498:	4c09      	ldr	r4, [pc, #36]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f003 fdef 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff faf7 	bl	8000a9c <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014b8:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 80014bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014c0:	20000350 	.word	0x20000350

080014c4 <ADC1_2_IRQHandler>:
=======
 800146c:	f7ff ffe6 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001472:	490c      	ldr	r1, [pc, #48]	; (80014a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001488:	4c09      	ldr	r4, [pc, #36]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f003 ff6d 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff f997 	bl	80007cc <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014a8:	08005ff0 	.word	0x08005ff0
  ldr r2, =_sbss
 80014ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014b0:	200003d0 	.word	0x200003d0

080014b4 <ADC1_2_IRQHandler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
=======
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
=======
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
=======
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fd9f 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fd8c 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
=======
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 fe99 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fcf6 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fdb7 	bl	8002086 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
=======
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 feb1 	bl	800226a <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 fd7f 	bl	8002032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
=======
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 fe79 	bl	8002216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
=======
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	20000008 	.word	0x20000008
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_IncTick>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20000008 	.word	0x20000008
 8001574:	20000200 	.word	0x20000200

08001578 <HAL_GetTick>:
=======
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000008 	.word	0x20000008
 8001564:	20000280 	.word	0x20000280

08001568 <HAL_GetTick>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000200 	.word	0x20000200

0800158c <HAL_Delay>:
=======
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000280 	.word	0x20000280

0800157c <HAL_Delay>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff fff0 	bl	8001578 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffe0 	bl	8001578 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_ADC_Init>:
=======
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fff0 	bl	8001568 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffe0 	bl	8001568 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_ADC_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0be      	b.n	8001774 <HAL_ADC_Init+0x1a0>
=======
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0be      	b.n	8001764 <HAL_ADC_Init+0x1a0>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
=======
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fd26 	bl	8001064 <HAL_ADC_MspInit>
=======
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fc90 	bl	8000f28 <HAL_ADC_MspInit>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fbf1 	bl	8001e00 <ADC_ConversionStop_Disable>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]
=======
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fbf1 	bl	8001df0 <ADC_ConversionStop_Disable>
 800160e:	4603      	mov	r3, r0
 8001610:	75fb      	strb	r3, [r7, #23]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
<<<<<<< HEAD
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 8099 	bne.w	8001762 <HAL_ADC_Init+0x18e>
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8095 	bne.w	8001762 <HAL_ADC_Init+0x18e>
=======
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 8099 	bne.w	8001752 <HAL_ADC_Init+0x18e>
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 8095 	bne.w	8001752 <HAL_ADC_Init+0x18e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001640:	f023 0302 	bic.w	r3, r3, #2
 8001644:	f043 0202 	orr.w	r2, r3, #2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001630:	f023 0302 	bic.w	r3, r3, #2
 8001634:	f043 0202 	orr.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
<<<<<<< HEAD
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001654:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7b1b      	ldrb	r3, [r3, #12]
 800165a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800165c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	4313      	orrs	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
=======
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001644:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7b1b      	ldrb	r3, [r3, #12]
 800164a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800164c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	4313      	orrs	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
<<<<<<< HEAD
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800166c:	d003      	beq.n	8001676 <HAL_ADC_Init+0xa2>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <HAL_ADC_Init+0xa8>
 8001676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167a:	e000      	b.n	800167e <HAL_ADC_Init+0xaa>
 800167c:	2300      	movs	r3, #0
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
=======
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165c:	d003      	beq.n	8001666 <HAL_ADC_Init+0xa2>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <HAL_ADC_Init+0xa8>
 8001666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166a:	e000      	b.n	800166e <HAL_ADC_Init+0xaa>
 800166c:	2300      	movs	r3, #0
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
<<<<<<< HEAD
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7d1b      	ldrb	r3, [r3, #20]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d119      	bne.n	80016c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7b1b      	ldrb	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_ADC_Init+0xd4>
=======
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7d1b      	ldrb	r3, [r3, #20]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d119      	bne.n	80016b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <HAL_ADC_Init+0xd4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
<<<<<<< HEAD
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	3b01      	subs	r3, #1
 800169a:	035a      	lsls	r2, r3, #13
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e00b      	b.n	80016c0 <HAL_ADC_Init+0xec>
=======
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	3b01      	subs	r3, #1
 800168a:	035a      	lsls	r2, r3, #13
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	e00b      	b.n	80016b0 <HAL_ADC_Init+0xec>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
<<<<<<< HEAD
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
=======
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
<<<<<<< HEAD
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <HAL_ADC_Init+0x1a8>)
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6093      	str	r3, [r2, #8]
=======
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_ADC_Init+0x1a8>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6093      	str	r3, [r2, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f0:	d003      	beq.n	80016fa <HAL_ADC_Init+0x126>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d104      	bne.n	8001704 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	3b01      	subs	r3, #1
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	430a      	orrs	r2, r1
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_Init+0x126>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d104      	bne.n	80016f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	051b      	lsls	r3, r3, #20
 80016f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	430a      	orrs	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
<<<<<<< HEAD
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_ADC_Init+0x1ac>)
 8001720:	4013      	ands	r3, r2
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	429a      	cmp	r2, r3
 8001726:	d10b      	bne.n	8001740 <HAL_ADC_Init+0x16c>
=======
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_ADC_Init+0x1ac>)
 8001710:	4013      	ands	r3, r2
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	429a      	cmp	r2, r3
 8001716:	d10b      	bne.n	8001730 <HAL_ADC_Init+0x16c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	f023 0303 	bic.w	r3, r3, #3
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800173e:	e018      	b.n	8001772 <HAL_ADC_Init+0x19e>
=======
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800172e:	e018      	b.n	8001762 <HAL_ADC_Init+0x19e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f023 0312 	bic.w	r3, r3, #18
 8001748:	f043 0210 	orr.w	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f023 0312 	bic.w	r3, r3, #18
 8001738:	f043 0210 	orr.w	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001760:	e007      	b.n	8001772 <HAL_ADC_Init+0x19e>
=======
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x19e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	f043 0210 	orr.w	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
=======
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	f043 0210 	orr.w	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	ffe1f7fd 	.word	0xffe1f7fd
 8001780:	ff1f0efe 	.word	0xff1f0efe

08001784 <HAL_ADC_Start>:
=======
 8001762:	7dfb      	ldrb	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	ffe1f7fd 	.word	0xffe1f7fd
 8001770:	ff1f0efe 	.word	0xff1f0efe

08001774 <HAL_ADC_Start>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
=======
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADC_Start+0x1a>
 800179a:	2302      	movs	r3, #2
 800179c:	e098      	b.n	80018d0 <HAL_ADC_Start+0x14c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fad0 	bl	8001d4c <ADC_Enable>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 8087 	bne.w	80018c6 <HAL_ADC_Start+0x142>
=======
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_ADC_Start+0x1a>
 800178a:	2302      	movs	r3, #2
 800178c:	e098      	b.n	80018c0 <HAL_ADC_Start+0x14c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fad0 	bl	8001d3c <ADC_Enable>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 8087 	bne.w	80018b6 <HAL_ADC_Start+0x142>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
<<<<<<< HEAD
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <HAL_ADC_Start+0x154>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d105      	bne.n	80017e2 <HAL_ADC_Start+0x5e>
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_ADC_Start+0x158>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <HAL_ADC_Start+0x154>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_Start+0x5e>
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_ADC_Start+0x158>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d115      	bne.n	80017fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d026      	beq.n	800184a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001804:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800180c:	e01d      	b.n	800184a <HAL_ADC_Start+0xc6>
=======
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d026      	beq.n	800183a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017fc:	e01d      	b.n	800183a <HAL_ADC_Start+0xc6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
<<<<<<< HEAD
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
<<<<<<< HEAD
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <HAL_ADC_Start+0x158>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d004      	beq.n	800182e <HAL_ADC_Start+0xaa>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <HAL_ADC_Start+0x154>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10d      	bne.n	800184a <HAL_ADC_Start+0xc6>
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_ADC_Start+0x158>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001842:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_ADC_Start+0x158>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_ADC_Start+0xaa>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_ADC_Start+0x154>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10d      	bne.n	800183a <HAL_ADC_Start+0xc6>
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_ADC_Start+0x158>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001832:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f023 0206 	bic.w	r2, r3, #6
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
 8001862:	e002      	b.n	800186a <HAL_ADC_Start+0xe6>
=======
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f023 0206 	bic.w	r2, r3, #6
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
 8001852:	e002      	b.n	800185a <HAL_ADC_Start+0xe6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
<<<<<<< HEAD
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f06f 0202 	mvn.w	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
=======
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f06f 0202 	mvn.w	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
<<<<<<< HEAD
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001886:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800188a:	d113      	bne.n	80018b4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_ADC_Start+0x154>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d105      	bne.n	80018a2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_ADC_Start+0x158>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d108      	bne.n	80018b4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	e00c      	b.n	80018ce <HAL_ADC_Start+0x14a>
=======
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001876:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800187a:	d113      	bne.n	80018a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_ADC_Start+0x154>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d105      	bne.n	8001892 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_ADC_Start+0x158>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	e00c      	b.n	80018be <HAL_ADC_Start+0x14a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
<<<<<<< HEAD
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e003      	b.n	80018ce <HAL_ADC_Start+0x14a>
=======
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	e003      	b.n	80018be <HAL_ADC_Start+0x14a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
    
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40012800 	.word	0x40012800
 80018dc:	40012400 	.word	0x40012400

080018e0 <HAL_ADC_Stop>:
=======
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40012800 	.word	0x40012800
 80018cc:	40012400 	.word	0x40012400

080018d0 <HAL_ADC_Stop>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]
=======
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Stop+0x1a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e01a      	b.n	8001930 <HAL_ADC_Stop+0x50>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_Stop+0x1a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e01a      	b.n	8001920 <HAL_ADC_Stop+0x50>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fa7c 	bl	8001e00 <ADC_ConversionStop_Disable>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fa7c 	bl	8001df0 <ADC_ConversionStop_Disable>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_ADC_PollForConversion>:
=======
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_ADC_PollForConversion>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
<<<<<<< HEAD
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
=======
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
<<<<<<< HEAD
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
=======
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 800194e:	f7ff fe13 	bl	8001578 <HAL_GetTick>
 8001952:	6178      	str	r0, [r7, #20]
=======
 800193e:	f7ff fe13 	bl	8001568 <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
<<<<<<< HEAD
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f043 0220 	orr.w	r2, r3, #32
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0d3      	b.n	8001b22 <HAL_ADC_PollForConversion+0x1ea>
=======
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	f043 0220 	orr.w	r2, r3, #32
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0d3      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ea>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
<<<<<<< HEAD
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d131      	bne.n	80019ec <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d12a      	bne.n	80019ec <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001996:	e021      	b.n	80019dc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199e:	d01d      	beq.n	80019dc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x7e>
 80019a6:	f7ff fde7 	bl	8001578 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d212      	bcs.n	80019dc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10b      	bne.n	80019dc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0a2      	b.n	8001b22 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0d6      	beq.n	8001998 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ea:	e070      	b.n	8001ace <HAL_ADC_PollForConversion+0x196>
=======
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d131      	bne.n	80019dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12a      	bne.n	80019dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001986:	e021      	b.n	80019cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198e:	d01d      	beq.n	80019cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <HAL_ADC_PollForConversion+0x7e>
 8001996:	f7ff fde7 	bl	8001568 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d212      	bcs.n	80019cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f043 0204 	orr.w	r2, r3, #4
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0a2      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0d6      	beq.n	8001988 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019da:	e070      	b.n	8001abe <HAL_ADC_PollForConversion+0x196>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
<<<<<<< HEAD
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_ADC_PollForConversion+0x1f4>)
 80019ee:	681c      	ldr	r4, [r3, #0]
 80019f0:	2002      	movs	r0, #2
 80019f2:	f002 fb59 	bl	80040a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80019f6:	4603      	mov	r3, r0
 80019f8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6919      	ldr	r1, [r3, #16]
 8001a02:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_ADC_PollForConversion+0x1f8>)
 8001a04:	400b      	ands	r3, r1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x104>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68d9      	ldr	r1, [r3, #12]
 8001a10:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <HAL_ADC_PollForConversion+0x1fc>)
 8001a12:	400b      	ands	r3, r1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d111      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x104>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_ADC_PollForConversion+0x200>)
 8001a20:	400b      	ands	r3, r1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_ADC_PollForConversion+0x100>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_ADC_PollForConversion+0x204>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_PollForConversion+0x100>
 8001a34:	2314      	movs	r3, #20
 8001a36:	e020      	b.n	8001a7a <HAL_ADC_PollForConversion+0x142>
 8001a38:	2329      	movs	r3, #41	; 0x29
 8001a3a:	e01e      	b.n	8001a7a <HAL_ADC_PollForConversion+0x142>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6919      	ldr	r1, [r3, #16]
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_ADC_PollForConversion+0x200>)
 8001a44:	400b      	ands	r3, r1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x120>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68d9      	ldr	r1, [r3, #12]
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <HAL_ADC_PollForConversion+0x204>)
 8001a52:	400b      	ands	r3, r1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_ADC_PollForConversion+0x13c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6919      	ldr	r1, [r3, #16]
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_ADC_PollForConversion+0x208>)
 8001a60:	400b      	ands	r3, r1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x140>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68d9      	ldr	r1, [r3, #12]
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_ADC_PollForConversion+0x208>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x140>
 8001a74:	2354      	movs	r3, #84	; 0x54
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_PollForConversion+0x142>
 8001a78:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a80:	e021      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d01a      	beq.n	8001ac0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_ADC_PollForConversion+0x168>
 8001a90:	f7ff fd72 	bl	8001578 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d20f      	bcs.n	8001ac0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d90b      	bls.n	8001ac0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f043 0204 	orr.w	r2, r3, #4
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e030      	b.n	8001b22 <HAL_ADC_PollForConversion+0x1ea>
=======
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <HAL_ADC_PollForConversion+0x1f4>)
 80019de:	681c      	ldr	r4, [r3, #0]
 80019e0:	2002      	movs	r0, #2
 80019e2:	f002 fc53 	bl	800428c <HAL_RCCEx_GetPeriphCLKFreq>
 80019e6:	4603      	mov	r3, r0
 80019e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_ADC_PollForConversion+0x1f8>)
 80019f4:	400b      	ands	r3, r1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x104>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68d9      	ldr	r1, [r3, #12]
 8001a00:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <HAL_ADC_PollForConversion+0x1fc>)
 8001a02:	400b      	ands	r3, r1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d111      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x104>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6919      	ldr	r1, [r3, #16]
 8001a0e:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <HAL_ADC_PollForConversion+0x200>)
 8001a10:	400b      	ands	r3, r1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x100>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68d9      	ldr	r1, [r3, #12]
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_ADC_PollForConversion+0x204>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x100>
 8001a24:	2314      	movs	r3, #20
 8001a26:	e020      	b.n	8001a6a <HAL_ADC_PollForConversion+0x142>
 8001a28:	2329      	movs	r3, #41	; 0x29
 8001a2a:	e01e      	b.n	8001a6a <HAL_ADC_PollForConversion+0x142>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6919      	ldr	r1, [r3, #16]
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <HAL_ADC_PollForConversion+0x200>)
 8001a34:	400b      	ands	r3, r1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x120>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_ADC_PollForConversion+0x204>)
 8001a42:	400b      	ands	r3, r1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <HAL_ADC_PollForConversion+0x13c>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_ADC_PollForConversion+0x208>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x140>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68d9      	ldr	r1, [r3, #12]
 8001a5c:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_ADC_PollForConversion+0x208>)
 8001a5e:	400b      	ands	r3, r1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x140>
 8001a64:	2354      	movs	r3, #84	; 0x54
 8001a66:	e000      	b.n	8001a6a <HAL_ADC_PollForConversion+0x142>
 8001a68:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a70:	e021      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d01a      	beq.n	8001ab0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x168>
 8001a80:	f7ff fd72 	bl	8001568 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d20f      	bcs.n	8001ab0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d90b      	bls.n	8001ab0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f043 0204 	orr.w	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e030      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ea>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
<<<<<<< HEAD
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d8d9      	bhi.n	8001a82 <HAL_ADC_PollForConversion+0x14a>
=======
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d8d9      	bhi.n	8001a72 <HAL_ADC_PollForConversion+0x14a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0212 	mvn.w	r2, #18
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f06f 0212 	mvn.w	r2, #18
 8001ac6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
<<<<<<< HEAD
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001af2:	d115      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ade:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ae2:	d115      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
<<<<<<< HEAD
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd90      	pop	{r4, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	24924924 	.word	0x24924924
 8001b34:	00924924 	.word	0x00924924
 8001b38:	12492492 	.word	0x12492492
 8001b3c:	00492492 	.word	0x00492492
 8001b40:	00249249 	.word	0x00249249

08001b44 <HAL_ADC_GetValue>:
=======
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	24924924 	.word	0x24924924
 8001b24:	00924924 	.word	0x00924924
 8001b28:	12492492 	.word	0x12492492
 8001b2c:	00492492 	.word	0x00492492
 8001b30:	00249249 	.word	0x00249249

08001b34 <HAL_ADC_GetValue>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
=======
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
<<<<<<< HEAD
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_ADC_ConfigChannel>:
=======
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_ConfigChannel>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
<<<<<<< HEAD
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
=======
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x20>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e0dc      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1da>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x20>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0dc      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x1da>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	d81c      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b05      	subs	r3, #5
 8001b9e:	221f      	movs	r2, #31
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b05      	subs	r3, #5
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc4:	e03c      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xe4>
=======
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d81c      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b05      	subs	r3, #5
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b05      	subs	r3, #5
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb4:	e03c      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d81c      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b23      	subs	r3, #35	; 0x23
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b23      	subs	r3, #35	; 0x23
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
 8001c06:	e01b      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xe4>
=======
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d81c      	bhi.n	8001bf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b23      	subs	r3, #35	; 0x23
 8001bd0:	221f      	movs	r2, #31
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4019      	ands	r1, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf6:	e01b      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
<<<<<<< HEAD
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b41      	subs	r3, #65	; 0x41
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b41      	subs	r3, #65	; 0x41
 8001c0a:	221f      	movs	r2, #31
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b41      	subs	r3, #65	; 0x41
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
<<<<<<< HEAD
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d91c      	bls.n	8001c82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4019      	ands	r1, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6898      	ldr	r0, [r3, #8]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	fa00 f203 	lsl.w	r2, r0, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	e019      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x15a>
=======
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	d91c      	bls.n	8001c72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68d9      	ldr	r1, [r3, #12]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	e019      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x15a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
<<<<<<< HEAD
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6919      	ldr	r1, [r3, #16]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	2207      	movs	r2, #7
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4019      	ands	r1, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]
=======
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6919      	ldr	r1, [r3, #16]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6898      	ldr	r0, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
<<<<<<< HEAD
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d132      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
=======
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d003      	beq.n	8001cb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb2:	2b11      	cmp	r3, #17
 8001cb4:	d132      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
<<<<<<< HEAD
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d125      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d126      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d11a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
=======
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d125      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d126      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d11a      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0c9a      	lsrs	r2, r3, #18
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x1b2>
 8001d1a:	e007      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1d0>
=======
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9a      	lsrs	r2, r3, #18
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x1b2>
 8001d0a:	e007      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
=======
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40012400 	.word	0x40012400
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <ADC_Enable>:
=======
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40012400 	.word	0x40012400
 8001d34:	20000000 	.word	0x20000000
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <ADC_Enable>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
=======
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
<<<<<<< HEAD
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d040      	beq.n	8001dec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	609a      	str	r2, [r3, #8]
=======
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d040      	beq.n	8001ddc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	609a      	str	r2, [r3, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <ADC_Enable+0xac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <ADC_Enable+0xb0>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d88:	e002      	b.n	8001d90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <ADC_Enable+0x3e>
=======
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <ADC_Enable+0xac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <ADC_Enable+0xb0>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d78:	e002      	b.n	8001d80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <ADC_Enable+0x3e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001d96:	f7ff fbef 	bl	8001578 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	e01f      	b.n	8001dde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d9e:	f7ff fbeb 	bl	8001578 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d918      	bls.n	8001dde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d011      	beq.n	8001dde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e007      	b.n	8001dee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d1d8      	bne.n	8001d9e <ADC_Enable+0x52>
=======
 8001d86:	f7ff fbef 	bl	8001568 <HAL_GetTick>
 8001d8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d8c:	e01f      	b.n	8001dce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d8e:	f7ff fbeb 	bl	8001568 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d918      	bls.n	8001dce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d011      	beq.n	8001dce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e007      	b.n	8001dde <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d1d8      	bne.n	8001d8e <ADC_Enable+0x52>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <ADC_ConversionStop_Disable>:
=======
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <ADC_ConversionStop_Disable>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12e      	bne.n	8001e78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2a:	f7ff fba5 	bl	8001578 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e30:	e01b      	b.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e32:	f7ff fba1 	bl	8001578 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d914      	bls.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10d      	bne.n	8001e6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e007      	b.n	8001e7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d0dc      	beq.n	8001e32 <ADC_ConversionStop_Disable+0x32>
=======
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d12e      	bne.n	8001e68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e1a:	f7ff fba5 	bl	8001568 <HAL_GetTick>
 8001e1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e20:	e01b      	b.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e22:	f7ff fba1 	bl	8001568 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d914      	bls.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10d      	bne.n	8001e5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d0dc      	beq.n	8001e22 <ADC_ConversionStop_Disable+0x32>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <__NVIC_SetPriorityGrouping>:
=======
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0ed      	b.n	8002060 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff f885 	bl	8000fa0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea6:	f7ff fb5f 	bl	8001568 <HAL_GetTick>
 8001eaa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eac:	e012      	b.n	8001ed4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eae:	f7ff fb5b 	bl	8001568 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b0a      	cmp	r3, #10
 8001eba:	d90b      	bls.n	8001ed4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0c5      	b.n	8002060 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0e5      	beq.n	8001eae <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0202 	bic.w	r2, r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef2:	f7ff fb39 	bl	8001568 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef8:	e012      	b.n	8001f20 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efa:	f7ff fb35 	bl	8001568 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d90b      	bls.n	8001f20 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2205      	movs	r2, #5
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e09f      	b.n	8002060 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1e5      	bne.n	8001efa <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7e1b      	ldrb	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e007      	b.n	8001f58 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e5b      	ldrb	r3, [r3, #25]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d108      	bne.n	8001f72 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e007      	b.n	8001f82 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e9b      	ldrb	r3, [r3, #26]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e007      	b.n	8001fac <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0220 	bic.w	r2, r2, #32
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7edb      	ldrb	r3, [r3, #27]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0210 	bic.w	r2, r2, #16
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e007      	b.n	8001fd6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0210 	orr.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f1b      	ldrb	r3, [r3, #28]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0208 	orr.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e007      	b.n	8002000 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0208 	bic.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7f5b      	ldrb	r3, [r3, #29]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d108      	bne.n	800201a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0204 	orr.w	r2, r2, #4
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e007      	b.n	800202a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0204 	bic.w	r2, r2, #4
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	ea42 0103 	orr.w	r1, r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <__NVIC_SetPriorityGrouping>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
=======
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
=======
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <__NVIC_EnableIRQ+0x34>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
=======
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4906      	ldr	r1, [pc, #24]	; (8002100 <__NVIC_EnableIRQ+0x34>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
=======
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
=======
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Config>:
=======
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <SysTick_Config>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff90 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
=======
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021cc:	d301      	bcc.n	80021d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00f      	b.n	80021f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <SysTick_Config+0x40>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021da:	210f      	movs	r1, #15
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f7ff ff90 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <SysTick_Config+0x40>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <SysTick_Config+0x40>)
 80021ec:	2207      	movs	r2, #7
 80021ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
=======
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff2d 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
=======
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff2d 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SetPriority>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
=======
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002044:	f7ff ff42 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
=======
 8002228:	f7ff ff42 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 800222c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff90 	bl	8002158 <NVIC_EncodePriority>
 8002238:	4602      	mov	r2, r0
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff5f 	bl	8002104 <__NVIC_SetPriority>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_EnableIRQ>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
=======
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff35 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
=======
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff35 	bl	80020cc <__NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa2 	bl	8001fd8 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_GPIO_Init>:
=======
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffa2 	bl	80021bc <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_GPIO_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80020a0:	b480      	push	{r7}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002284:	b480      	push	{r7}
 8002286:	b08b      	sub	sp, #44	; 0x2c
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
=======
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 80020b2:	e169      	b.n	8002388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b4:	2201      	movs	r2, #1
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f040 8158 	bne.w	8002382 <HAL_GPIO_Init+0x2e2>
=======
 8002296:	e169      	b.n	800256c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002298:	2201      	movs	r2, #1
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f040 8158 	bne.w	8002566 <HAL_GPIO_Init+0x2e2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a9a      	ldr	r2, [pc, #616]	; (8002340 <HAL_GPIO_Init+0x2a0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d05e      	beq.n	800219a <HAL_GPIO_Init+0xfa>
 80020dc:	4a98      	ldr	r2, [pc, #608]	; (8002340 <HAL_GPIO_Init+0x2a0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d875      	bhi.n	80021ce <HAL_GPIO_Init+0x12e>
 80020e2:	4a98      	ldr	r2, [pc, #608]	; (8002344 <HAL_GPIO_Init+0x2a4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d058      	beq.n	800219a <HAL_GPIO_Init+0xfa>
 80020e8:	4a96      	ldr	r2, [pc, #600]	; (8002344 <HAL_GPIO_Init+0x2a4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d86f      	bhi.n	80021ce <HAL_GPIO_Init+0x12e>
 80020ee:	4a96      	ldr	r2, [pc, #600]	; (8002348 <HAL_GPIO_Init+0x2a8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d052      	beq.n	800219a <HAL_GPIO_Init+0xfa>
 80020f4:	4a94      	ldr	r2, [pc, #592]	; (8002348 <HAL_GPIO_Init+0x2a8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d869      	bhi.n	80021ce <HAL_GPIO_Init+0x12e>
 80020fa:	4a94      	ldr	r2, [pc, #592]	; (800234c <HAL_GPIO_Init+0x2ac>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d04c      	beq.n	800219a <HAL_GPIO_Init+0xfa>
 8002100:	4a92      	ldr	r2, [pc, #584]	; (800234c <HAL_GPIO_Init+0x2ac>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d863      	bhi.n	80021ce <HAL_GPIO_Init+0x12e>
 8002106:	4a92      	ldr	r2, [pc, #584]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d046      	beq.n	800219a <HAL_GPIO_Init+0xfa>
 800210c:	4a90      	ldr	r2, [pc, #576]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d85d      	bhi.n	80021ce <HAL_GPIO_Init+0x12e>
 8002112:	2b12      	cmp	r3, #18
 8002114:	d82a      	bhi.n	800216c <HAL_GPIO_Init+0xcc>
 8002116:	2b12      	cmp	r3, #18
 8002118:	d859      	bhi.n	80021ce <HAL_GPIO_Init+0x12e>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <HAL_GPIO_Init+0x80>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	0800219b 	.word	0x0800219b
 8002124:	08002175 	.word	0x08002175
 8002128:	08002187 	.word	0x08002187
 800212c:	080021c9 	.word	0x080021c9
 8002130:	080021cf 	.word	0x080021cf
 8002134:	080021cf 	.word	0x080021cf
 8002138:	080021cf 	.word	0x080021cf
 800213c:	080021cf 	.word	0x080021cf
 8002140:	080021cf 	.word	0x080021cf
 8002144:	080021cf 	.word	0x080021cf
 8002148:	080021cf 	.word	0x080021cf
 800214c:	080021cf 	.word	0x080021cf
 8002150:	080021cf 	.word	0x080021cf
 8002154:	080021cf 	.word	0x080021cf
 8002158:	080021cf 	.word	0x080021cf
 800215c:	080021cf 	.word	0x080021cf
 8002160:	080021cf 	.word	0x080021cf
 8002164:	0800217d 	.word	0x0800217d
 8002168:	08002191 	.word	0x08002191
 800216c:	4a79      	ldr	r2, [pc, #484]	; (8002354 <HAL_GPIO_Init+0x2b4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0xfa>
=======
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a9a      	ldr	r2, [pc, #616]	; (8002524 <HAL_GPIO_Init+0x2a0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d05e      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022c0:	4a98      	ldr	r2, [pc, #608]	; (8002524 <HAL_GPIO_Init+0x2a0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d875      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022c6:	4a98      	ldr	r2, [pc, #608]	; (8002528 <HAL_GPIO_Init+0x2a4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d058      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022cc:	4a96      	ldr	r2, [pc, #600]	; (8002528 <HAL_GPIO_Init+0x2a4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d86f      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022d2:	4a96      	ldr	r2, [pc, #600]	; (800252c <HAL_GPIO_Init+0x2a8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d052      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022d8:	4a94      	ldr	r2, [pc, #592]	; (800252c <HAL_GPIO_Init+0x2a8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d869      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022de:	4a94      	ldr	r2, [pc, #592]	; (8002530 <HAL_GPIO_Init+0x2ac>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d04c      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022e4:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_GPIO_Init+0x2ac>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d863      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022ea:	4a92      	ldr	r2, [pc, #584]	; (8002534 <HAL_GPIO_Init+0x2b0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d046      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022f0:	4a90      	ldr	r2, [pc, #576]	; (8002534 <HAL_GPIO_Init+0x2b0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d85d      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d82a      	bhi.n	8002350 <HAL_GPIO_Init+0xcc>
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d859      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_GPIO_Init+0x80>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	0800237f 	.word	0x0800237f
 8002308:	08002359 	.word	0x08002359
 800230c:	0800236b 	.word	0x0800236b
 8002310:	080023ad 	.word	0x080023ad
 8002314:	080023b3 	.word	0x080023b3
 8002318:	080023b3 	.word	0x080023b3
 800231c:	080023b3 	.word	0x080023b3
 8002320:	080023b3 	.word	0x080023b3
 8002324:	080023b3 	.word	0x080023b3
 8002328:	080023b3 	.word	0x080023b3
 800232c:	080023b3 	.word	0x080023b3
 8002330:	080023b3 	.word	0x080023b3
 8002334:	080023b3 	.word	0x080023b3
 8002338:	080023b3 	.word	0x080023b3
 800233c:	080023b3 	.word	0x080023b3
 8002340:	080023b3 	.word	0x080023b3
 8002344:	080023b3 	.word	0x080023b3
 8002348:	08002361 	.word	0x08002361
 800234c:	08002375 	.word	0x08002375
 8002350:	4a79      	ldr	r2, [pc, #484]	; (8002538 <HAL_GPIO_Init+0x2b4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0xfa>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8002172:	e02c      	b.n	80021ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e029      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	3304      	adds	r3, #4
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e024      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	3308      	adds	r3, #8
 800218c:	623b      	str	r3, [r7, #32]
          break;
 800218e:	e01f      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	330c      	adds	r3, #12
 8002196:	623b      	str	r3, [r7, #32]
          break;
 8002198:	e01a      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021a2:	2304      	movs	r3, #4
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e013      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b0:	2308      	movs	r3, #8
 80021b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	611a      	str	r2, [r3, #16]
          break;
 80021ba:	e009      	b.n	80021d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021bc:	2308      	movs	r3, #8
 80021be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	615a      	str	r2, [r3, #20]
          break;
 80021c6:	e003      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
          break;
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x130>
          break;
 80021ce:	bf00      	nop
=======
 8002356:	e02c      	b.n	80023b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	623b      	str	r3, [r7, #32]
          break;
 800235e:	e029      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	3304      	adds	r3, #4
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e024      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	3308      	adds	r3, #8
 8002370:	623b      	str	r3, [r7, #32]
          break;
 8002372:	e01f      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	330c      	adds	r3, #12
 800237a:	623b      	str	r3, [r7, #32]
          break;
 800237c:	e01a      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002386:	2304      	movs	r3, #4
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e013      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002394:	2308      	movs	r3, #8
 8002396:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	611a      	str	r2, [r3, #16]
          break;
 800239e:	e009      	b.n	80023b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a0:	2308      	movs	r3, #8
 80023a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	615a      	str	r2, [r3, #20]
          break;
 80023aa:	e003      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
          break;
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          break;
 80023b2:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2bff      	cmp	r3, #255	; 0xff
 80021d4:	d801      	bhi.n	80021da <HAL_GPIO_Init+0x13a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_Init+0x13e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2bff      	cmp	r3, #255	; 0xff
 80021e4:	d802      	bhi.n	80021ec <HAL_GPIO_Init+0x14c>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	e002      	b.n	80021f2 <HAL_GPIO_Init+0x152>
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	3b08      	subs	r3, #8
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	210f      	movs	r1, #15
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	401a      	ands	r2, r3
 8002204:	6a39      	ldr	r1, [r7, #32]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	431a      	orrs	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	601a      	str	r2, [r3, #0]
=======
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d801      	bhi.n	80023be <HAL_GPIO_Init+0x13a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e001      	b.n	80023c2 <HAL_GPIO_Init+0x13e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2bff      	cmp	r3, #255	; 0xff
 80023c8:	d802      	bhi.n	80023d0 <HAL_GPIO_Init+0x14c>
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	e002      	b.n	80023d6 <HAL_GPIO_Init+0x152>
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3b08      	subs	r3, #8
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	210f      	movs	r1, #15
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	431a      	orrs	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80b1 	beq.w	8002382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002220:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x2b8>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a4c      	ldr	r2, [pc, #304]	; (8002358 <HAL_GPIO_Init+0x2b8>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_GPIO_Init+0x2b8>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002238:	4a48      	ldr	r2, [pc, #288]	; (800235c <HAL_GPIO_Init+0x2bc>)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4013      	ands	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <HAL_GPIO_Init+0x2c0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_GPIO_Init+0x1ec>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3f      	ldr	r2, [pc, #252]	; (8002364 <HAL_GPIO_Init+0x2c4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00d      	beq.n	8002288 <HAL_GPIO_Init+0x1e8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3e      	ldr	r2, [pc, #248]	; (8002368 <HAL_GPIO_Init+0x2c8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <HAL_GPIO_Init+0x1e4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3d      	ldr	r2, [pc, #244]	; (800236c <HAL_GPIO_Init+0x2cc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_GPIO_Init+0x1e0>
 800227c:	2303      	movs	r3, #3
 800227e:	e006      	b.n	800228e <HAL_GPIO_Init+0x1ee>
 8002280:	2304      	movs	r3, #4
 8002282:	e004      	b.n	800228e <HAL_GPIO_Init+0x1ee>
 8002284:	2302      	movs	r3, #2
 8002286:	e002      	b.n	800228e <HAL_GPIO_Init+0x1ee>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_GPIO_Init+0x1ee>
 800228c:	2300      	movs	r3, #0
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	4093      	lsls	r3, r2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800229e:	492f      	ldr	r1, [pc, #188]	; (800235c <HAL_GPIO_Init+0x2bc>)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80b1 	beq.w	8002566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002404:	4b4d      	ldr	r3, [pc, #308]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_GPIO_Init+0x2b8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_GPIO_Init+0x2bc>)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	; (8002544 <HAL_GPIO_Init+0x2c0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_GPIO_Init+0x1ec>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a3f      	ldr	r2, [pc, #252]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00d      	beq.n	800246c <HAL_GPIO_Init+0x1e8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3e      	ldr	r2, [pc, #248]	; (800254c <HAL_GPIO_Init+0x2c8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d007      	beq.n	8002468 <HAL_GPIO_Init+0x1e4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3d      	ldr	r2, [pc, #244]	; (8002550 <HAL_GPIO_Init+0x2cc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_GPIO_Init+0x1e0>
 8002460:	2303      	movs	r3, #3
 8002462:	e006      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 8002464:	2304      	movs	r3, #4
 8002466:	e004      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 8002468:	2302      	movs	r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 8002470:	2300      	movs	r3, #0
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002482:	492f      	ldr	r1, [pc, #188]	; (8002540 <HAL_GPIO_Init+0x2bc>)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	492c      	ldr	r1, [pc, #176]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x234>
=======
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	492c      	ldr	r1, [pc, #176]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x234>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4928      	ldr	r1, [pc, #160]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
=======
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4928      	ldr	r1, [pc, #160]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4922      	ldr	r1, [pc, #136]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x25c>
=======
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x25c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	491e      	ldr	r1, [pc, #120]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
=======
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	491e      	ldr	r1, [pc, #120]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	60cb      	str	r3, [r1, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4918      	ldr	r1, [pc, #96]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x284>
=======
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4918      	ldr	r1, [pc, #96]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x284>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	43db      	mvns	r3, r3
 800231e:	4914      	ldr	r1, [pc, #80]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 8002320:	4013      	ands	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
=======
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	4914      	ldr	r1, [pc, #80]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d021      	beq.n	8002374 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	490e      	ldr	r1, [pc, #56]	; (8002370 <HAL_GPIO_Init+0x2d0>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e021      	b.n	8002382 <HAL_GPIO_Init+0x2e2>
 800233e:	bf00      	nop
 8002340:	10320000 	.word	0x10320000
 8002344:	10310000 	.word	0x10310000
 8002348:	10220000 	.word	0x10220000
 800234c:	10210000 	.word	0x10210000
 8002350:	10120000 	.word	0x10120000
 8002354:	10110000 	.word	0x10110000
 8002358:	40021000 	.word	0x40021000
 800235c:	40010000 	.word	0x40010000
 8002360:	40010800 	.word	0x40010800
 8002364:	40010c00 	.word	0x40010c00
 8002368:	40011000 	.word	0x40011000
 800236c:	40011400 	.word	0x40011400
 8002370:	40010400 	.word	0x40010400
=======
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d021      	beq.n	8002558 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e021      	b.n	8002566 <HAL_GPIO_Init+0x2e2>
 8002522:	bf00      	nop
 8002524:	10320000 	.word	0x10320000
 8002528:	10310000 	.word	0x10310000
 800252c:	10220000 	.word	0x10220000
 8002530:	10210000 	.word	0x10210000
 8002534:	10120000 	.word	0x10120000
 8002538:	10110000 	.word	0x10110000
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	40010800 	.word	0x40010800
 8002548:	40010c00 	.word	0x40010c00
 800254c:	40011000 	.word	0x40011000
 8002550:	40011400 	.word	0x40011400
 8002554:	40010400 	.word	0x40010400
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	43db      	mvns	r3, r3
 800237c:	4909      	ldr	r1, [pc, #36]	; (80023a4 <HAL_GPIO_Init+0x304>)
 800237e:	4013      	ands	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
=======
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_GPIO_Init+0x304>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	43db      	mvns	r3, r3
 8002560:	4909      	ldr	r1, [pc, #36]	; (8002588 <HAL_GPIO_Init+0x304>)
 8002562:	4013      	ands	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }

	position++;
<<<<<<< HEAD
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	3301      	adds	r3, #1
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	f47f ae8e 	bne.w	80020b4 <HAL_GPIO_Init+0x14>
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	372c      	adds	r7, #44	; 0x2c
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_WritePin>:
=======
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3301      	adds	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f ae8e 	bne.w	8002298 <HAL_GPIO_Init+0x14>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	372c      	adds	r7, #44	; 0x2c
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40010400 	.word	0x40010400

0800258c <HAL_GPIO_WritePin>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
=======
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]
=======
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 80023c4:	e003      	b.n	80023ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_TogglePin>:
=======
 80025a8:	e003      	b.n	80025b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_TogglePin>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
=======
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43d9      	mvns	r1, r3
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	611a      	str	r2, [r3, #16]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <HAL_I2C_Init>:
=======
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43d9      	mvns	r1, r3
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	400b      	ands	r3, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_I2C_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
=======
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e12b      	b.n	8002676 <HAL_I2C_Init+0x26a>
=======
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e12b      	b.n	800285a <HAL_I2C_Init+0x26a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe fe52 	bl	80010dc <HAL_I2C_MspInit>
=======
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fd0e 	bl	8001038 <HAL_I2C_MspInit>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002470:	f001 fd1e 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8002474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a81      	ldr	r2, [pc, #516]	; (8002680 <HAL_I2C_Init+0x274>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d807      	bhi.n	8002490 <HAL_I2C_Init+0x84>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a80      	ldr	r2, [pc, #512]	; (8002684 <HAL_I2C_Init+0x278>)
 8002484:	4293      	cmp	r3, r2
 8002486:	bf94      	ite	ls
 8002488:	2301      	movls	r3, #1
 800248a:	2300      	movhi	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e006      	b.n	800249e <HAL_I2C_Init+0x92>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a7d      	ldr	r2, [pc, #500]	; (8002688 <HAL_I2C_Init+0x27c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	bf94      	ite	ls
 8002498:	2301      	movls	r3, #1
 800249a:	2300      	movhi	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0e7      	b.n	8002676 <HAL_I2C_Init+0x26a>
=======
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002654:	f001 fd1e 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a81      	ldr	r2, [pc, #516]	; (8002864 <HAL_I2C_Init+0x274>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d807      	bhi.n	8002674 <HAL_I2C_Init+0x84>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a80      	ldr	r2, [pc, #512]	; (8002868 <HAL_I2C_Init+0x278>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e006      	b.n	8002682 <HAL_I2C_Init+0x92>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a7d      	ldr	r2, [pc, #500]	; (800286c <HAL_I2C_Init+0x27c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0e7      	b.n	800285a <HAL_I2C_Init+0x26a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a78      	ldr	r2, [pc, #480]	; (800268c <HAL_I2C_Init+0x280>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9b      	lsrs	r3, r3, #18
 80024b0:	60bb      	str	r3, [r7, #8]
=======
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a78      	ldr	r2, [pc, #480]	; (8002870 <HAL_I2C_Init+0x280>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9b      	lsrs	r3, r3, #18
 8002694:	60bb      	str	r3, [r7, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
=======
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <HAL_I2C_Init+0x274>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d802      	bhi.n	80024e0 <HAL_I2C_Init+0xd4>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3301      	adds	r3, #1
 80024de:	e009      	b.n	80024f4 <HAL_I2C_Init+0xe8>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	4a69      	ldr	r2, [pc, #420]	; (8002690 <HAL_I2C_Init+0x284>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	3301      	adds	r3, #1
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6213      	str	r3, [r2, #32]
=======
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a6a      	ldr	r2, [pc, #424]	; (8002864 <HAL_I2C_Init+0x274>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d802      	bhi.n	80026c4 <HAL_I2C_Init+0xd4>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3301      	adds	r3, #1
 80026c2:	e009      	b.n	80026d8 <HAL_I2C_Init+0xe8>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a69      	ldr	r2, [pc, #420]	; (8002874 <HAL_I2C_Init+0x284>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	3301      	adds	r3, #1
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	6213      	str	r3, [r2, #32]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	495c      	ldr	r1, [pc, #368]	; (8002680 <HAL_I2C_Init+0x274>)
 8002510:	428b      	cmp	r3, r1
 8002512:	d819      	bhi.n	8002548 <HAL_I2C_Init+0x13c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e59      	subs	r1, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002528:	400b      	ands	r3, r1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_I2C_Init+0x138>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1e59      	subs	r1, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fbb1 f3f3 	udiv	r3, r1, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002542:	e051      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 8002544:	2304      	movs	r3, #4
 8002546:	e04f      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_I2C_Init+0x168>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e012      	b.n	800259a <HAL_I2C_Init+0x18e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	0099      	lsls	r1, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	fbb0 f3f3 	udiv	r3, r0, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Init+0x196>
 800259e:	2301      	movs	r3, #1
 80025a0:	e022      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <HAL_I2C_Init+0x1bc>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e58      	subs	r0, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	440b      	add	r3, r1
 80025b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	e00f      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	6809      	ldr	r1, [r1, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61cb      	str	r3, [r1, #28]
=======
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	495c      	ldr	r1, [pc, #368]	; (8002864 <HAL_I2C_Init+0x274>)
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d819      	bhi.n	800272c <HAL_I2C_Init+0x13c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e59      	subs	r1, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb1 f3f3 	udiv	r3, r1, r3
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800270c:	400b      	ands	r3, r1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_I2C_Init+0x138>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e59      	subs	r1, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	e051      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002728:	2304      	movs	r3, #4
 800272a:	e04f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_I2C_Init+0x168>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e012      	b.n	800277e <HAL_I2C_Init+0x18e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x196>
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10e      	bne.n	80027ac <HAL_I2C_Init+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e58      	subs	r0, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	440b      	add	r3, r1
 800279c:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027aa:	e00f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	0099      	lsls	r1, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6809      	ldr	r1, [r1, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61cb      	str	r3, [r1, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
=======
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6911      	ldr	r1, [r2, #16]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6093      	str	r3, [r2, #8]
=======
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6911      	ldr	r1, [r2, #16]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6093      	str	r3, [r2, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	000186a0 	.word	0x000186a0
 8002684:	001e847f 	.word	0x001e847f
 8002688:	003d08ff 	.word	0x003d08ff
 800268c:	431bde83 	.word	0x431bde83
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <HAL_I2C_Mem_Write>:
=======
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	000186a0 	.word	0x000186a0
 8002868:	001e847f 	.word	0x001e847f
 800286c:	003d08ff 	.word	0x003d08ff
 8002870:	431bde83 	.word	0x431bde83
 8002874:	10624dd3 	.word	0x10624dd3

08002878 <HAL_I2C_Mem_Write>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ae:	f7fe ff63 	bl	8001578 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]
=======
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002892:	f7fe fe69 	bl	8001568 <HAL_GetTick>
 8002896:	6178      	str	r0, [r7, #20]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b20      	cmp	r3, #32
 80026be:	f040 80d9 	bne.w	8002874 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2319      	movs	r3, #25
 80026c8:	2201      	movs	r2, #1
 80026ca:	496d      	ldr	r1, [pc, #436]	; (8002880 <HAL_I2C_Mem_Write+0x1ec>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fdef 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	e0cc      	b.n	8002876 <HAL_I2C_Mem_Write+0x1e2>
=======
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	f040 80d9 	bne.w	8002a58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2319      	movs	r3, #25
 80028ac:	2201      	movs	r2, #1
 80028ae:	496d      	ldr	r1, [pc, #436]	; (8002a64 <HAL_I2C_Mem_Write+0x1ec>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fdef 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	e0cc      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Mem_Write+0x56>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e0c5      	b.n	8002876 <HAL_I2C_Mem_Write+0x1e2>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d007      	beq.n	8002710 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
=======
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Mem_Write+0x56>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e0c5      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d007      	beq.n	80028f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2221      	movs	r2, #33	; 0x21
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_I2C_Mem_Write+0x1f0>)
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002752:	88f8      	ldrh	r0, [r7, #6]
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4603      	mov	r3, r0
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fc26 	bl	8002fb4 <I2C_RequestMemoryWrite>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d052      	beq.n	8002814 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e081      	b.n	8002876 <HAL_I2C_Mem_Write+0x1e2>
=======
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2221      	movs	r2, #33	; 0x21
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <HAL_I2C_Mem_Write+0x1f0>)
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002936:	88f8      	ldrh	r0, [r7, #6]
 8002938:	893a      	ldrh	r2, [r7, #8]
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4603      	mov	r3, r0
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fc26 	bl	8003198 <I2C_RequestMemoryWrite>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d052      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e081      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 feb4 	bl	80034e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b04      	cmp	r3, #4
 8002788:	d107      	bne.n	800279a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002798:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_I2C_Mem_Write+0x1e2>
=======
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 feb4 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b04      	cmp	r3, #4
 800296c:	d107      	bne.n	800297e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06b      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d11b      	bne.n	8002814 <HAL_I2C_Mem_Write+0x180>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d017      	beq.n	8002814 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1aa      	bne.n	8002772 <HAL_I2C_Mem_Write+0xde>
=======
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_I2C_Mem_Write+0x180>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1aa      	bne.n	8002956 <HAL_I2C_Mem_Write+0xde>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fea7 	bl	8003574 <I2C_WaitOnBTFFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b04      	cmp	r3, #4
 8002832:	d107      	bne.n	8002844 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e016      	b.n	8002876 <HAL_I2C_Mem_Write+0x1e2>
=======
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fea7 	bl	8003758 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e016      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_I2C_Mem_Write+0x1e2>
=======
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	00100002 	.word	0x00100002
 8002884:	ffff0000 	.word	0xffff0000

08002888 <HAL_I2C_Mem_Read>:
=======
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	00100002 	.word	0x00100002
 8002a68:	ffff0000 	.word	0xffff0000

08002a6c <HAL_I2C_Mem_Read>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4603      	mov	r3, r0
 8002898:	817b      	strh	r3, [r7, #10]
 800289a:	460b      	mov	r3, r1
 800289c:	813b      	strh	r3, [r7, #8]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028a6:	f7fe fe67 	bl	8001578 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	813b      	strh	r3, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a8a:	f7fe fd6d 	bl	8001568 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	f040 8244 	bne.w	8002d42 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2319      	movs	r3, #25
 80028c0:	2201      	movs	r2, #1
 80028c2:	4982      	ldr	r1, [pc, #520]	; (8002acc <HAL_I2C_Mem_Read+0x244>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fcf3 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
 80028d2:	e237      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
=======
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	f040 8244 	bne.w	8002f26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2319      	movs	r3, #25
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4982      	ldr	r1, [pc, #520]	; (8002cb0 <HAL_I2C_Mem_Read+0x244>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fcf3 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e237      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Mem_Read+0x5a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e230      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d007      	beq.n	8002908 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
=======
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x5a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e230      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d007      	beq.n	8002aec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2222      	movs	r2, #34	; 0x22
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a62      	ldr	r2, [pc, #392]	; (8002ad0 <HAL_I2C_Mem_Read+0x248>)
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294a:	88f8      	ldrh	r0, [r7, #6]
 800294c:	893a      	ldrh	r2, [r7, #8]
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4603      	mov	r3, r0
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fbc0 	bl	80030e0 <I2C_RequestMemoryRead>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e1ec      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	2b00      	cmp	r3, #0
 8002970:	d113      	bne.n	800299a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	e1c0      	b.n	8002d1c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d11e      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029b2:	b672      	cpsid	i
}
 80029b4:	bf00      	nop
=======
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2222      	movs	r2, #34	; 0x22
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <HAL_I2C_Mem_Read+0x248>)
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b2e:	88f8      	ldrh	r0, [r7, #6]
 8002b30:	893a      	ldrh	r2, [r7, #8]
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fbc0 	bl	80032c4 <I2C_RequestMemoryRead>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1ec      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e1c0      	b.n	8002f00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d11e      	bne.n	8002bc4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b96:	b672      	cpsid	i
}
 8002b98:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029dc:	b662      	cpsie	i
}
 80029de:	e035      	b.n	8002a4c <HAL_I2C_Mem_Read+0x1c4>
=======
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bc0:	b662      	cpsie	i
}
 8002bc2:	e035      	b.n	8002c30 <HAL_I2C_Mem_Read+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
<<<<<<< HEAD
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d11e      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029f8:	b672      	cpsid	i
}
 80029fa:	bf00      	nop
=======
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11e      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
}
 8002bde:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a22:	b662      	cpsie	i
}
 8002a24:	e012      	b.n	8002a4c <HAL_I2C_Mem_Read+0x1c4>
=======
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c06:	b662      	cpsie	i
}
 8002c08:	e012      	b.n	8002c30 <HAL_I2C_Mem_Read+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002a4c:	e166      	b.n	8002d1c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	f200 811f 	bhi.w	8002c96 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d123      	bne.n	8002aa8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fdcd 	bl	8003604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e167      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
=======
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c30:	e166      	b.n	8002f00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	f200 811f 	bhi.w	8002e7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d123      	bne.n	8002c8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fdcd 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e167      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa6:	e139      	b.n	8002d1c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d152      	bne.n	8002b56 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <HAL_I2C_Mem_Read+0x24c>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fbf8 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e13c      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000
 8002ad4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	bf00      	nop
=======
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c8a:	e139      	b.n	8002f00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d152      	bne.n	8002d3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <HAL_I2C_Mem_Read+0x24c>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fbf8 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e13c      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000
 8002cb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cbc:	b672      	cpsid	i
}
 8002cbe:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b1e:	b662      	cpsie	i
}
 8002b20:	bf00      	nop
=======
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d02:	b662      	cpsie	i
}
 8002d04:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b54:	e0e2      	b.n	8002d1c <HAL_I2C_Mem_Read+0x494>
=======
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d38:	e0e2      	b.n	8002f00 <HAL_I2C_Mem_Read+0x494>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	497b      	ldr	r1, [pc, #492]	; (8002d4c <HAL_I2C_Mem_Read+0x4c4>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fba5 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0e9      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
=======
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	2200      	movs	r2, #0
 8002d42:	497b      	ldr	r1, [pc, #492]	; (8002f30 <HAL_I2C_Mem_Read+0x4c4>)
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fba5 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0e9      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b80:	b672      	cpsid	i
}
 8002b82:	bf00      	nop
=======
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d64:	b672      	cpsid	i
}
 8002d66:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bb6:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_I2C_Mem_Read+0x4c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	08db      	lsrs	r3, r3, #3
 8002bbc:	4a65      	ldr	r2, [pc, #404]	; (8002d54 <HAL_I2C_Mem_Read+0x4cc>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0a1a      	lsrs	r2, r3, #8
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00da      	lsls	r2, r3, #3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d118      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfe:	b662      	cpsie	i
}
 8002c00:	bf00      	nop
=======
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d9a:	4b66      	ldr	r3, [pc, #408]	; (8002f34 <HAL_I2C_Mem_Read+0x4c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	08db      	lsrs	r3, r3, #3
 8002da0:	4a65      	ldr	r2, [pc, #404]	; (8002f38 <HAL_I2C_Mem_Read+0x4cc>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a1a      	lsrs	r2, r3, #8
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002de2:	b662      	cpsie	i
}
 8002de4:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e09a      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d1d9      	bne.n	8002bd0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c5e:	b662      	cpsie	i
}
 8002c60:	bf00      	nop
=======
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e09a      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d1d9      	bne.n	8002db4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e42:	b662      	cpsie	i
}
 8002e44:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c94:	e042      	b.n	8002d1c <HAL_I2C_Mem_Read+0x494>
=======
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e78:	e042      	b.n	8002f00 <HAL_I2C_Mem_Read+0x494>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fcb2 	bl	8003604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e04c      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
=======
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fcb2 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e04c      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d118      	bne.n	8002d1c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f ae94 	bne.w	8002a4e <HAL_I2C_Mem_Read+0x1c6>
=======
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d118      	bne.n	8002f00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f47f ae94 	bne.w	8002c32 <HAL_I2C_Mem_Read+0x1c6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_Mem_Read+0x4bc>
=======
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	00010004 	.word	0x00010004
 8002d50:	20000000 	.word	0x20000000
 8002d54:	14f8b589 	.word	0x14f8b589

08002d58 <HAL_I2C_IsDeviceReady>:
=======
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010004 	.word	0x00010004
 8002f34:	20000000 	.word	0x20000000
 8002f38:	14f8b589 	.word	0x14f8b589

08002f3c <HAL_I2C_IsDeviceReady>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
<<<<<<< HEAD
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7fe fc06 	bl	8001578 <HAL_GetTick>
 8002d6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
=======
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7fe fb0c 	bl	8001568 <HAL_GetTick>
 8002f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 8111 	bne.w	8002fa2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2319      	movs	r3, #25
 8002d86:	2201      	movs	r2, #1
 8002d88:	4988      	ldr	r1, [pc, #544]	; (8002fac <HAL_I2C_IsDeviceReady+0x254>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa90 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	e104      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
=======
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 8111 	bne.w	8003186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2319      	movs	r3, #25
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4988      	ldr	r1, [pc, #544]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa90 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e104      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2C_IsDeviceReady+0x50>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0fd      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d007      	beq.n	8002dce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
=======
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2C_IsDeviceReady+0x50>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0fd      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d007      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2224      	movs	r2, #36	; 0x24
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a70      	ldr	r2, [pc, #448]	; (8002fb0 <HAL_I2C_IsDeviceReady+0x258>)
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2224      	movs	r2, #36	; 0x24
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a70      	ldr	r2, [pc, #448]	; (8003194 <HAL_I2C_IsDeviceReady+0x258>)
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fa4e 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e28:	d103      	bne.n	8002e32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0b6      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
=======
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa4e 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d103      	bne.n	8003016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b6      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e44:	611a      	str	r2, [r3, #16]
=======
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003028:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002e46:	f7fe fb97 	bl	8001578 <HAL_GetTick>
 8002e4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e7a:	e025      	b.n	8002ec8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7fe fb7c 	bl	8001578 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <HAL_I2C_IsDeviceReady+0x13a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	22a0      	movs	r2, #160	; 0xa0
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_I2C_IsDeviceReady+0x188>
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_I2C_IsDeviceReady+0x188>
 8002eda:	7dbb      	ldrb	r3, [r7, #22]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0cd      	beq.n	8002e7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d129      	bne.n	8002f4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2319      	movs	r3, #25
 8002f22:	2201      	movs	r2, #1
 8002f24:	4921      	ldr	r1, [pc, #132]	; (8002fac <HAL_I2C_IsDeviceReady+0x254>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f9c2 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e036      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e02c      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
=======
 800302a:	f7fe fa9d 	bl	8001568 <HAL_GetTick>
 800302e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800305e:	e025      	b.n	80030ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fe fa82 	bl	8001568 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <HAL_I2C_IsDeviceReady+0x13a>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22a0      	movs	r2, #160	; 0xa0
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2ba0      	cmp	r3, #160	; 0xa0
 80030b6:	d005      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030be:	7dbb      	ldrb	r3, [r7, #22]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0cd      	beq.n	8003060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d129      	bne.n	800312e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	4921      	ldr	r1, [pc, #132]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f9c2 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e036      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e02c      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2319      	movs	r3, #25
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	490f      	ldr	r1, [pc, #60]	; (8002fac <HAL_I2C_IsDeviceReady+0x254>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f99e 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e012      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
=======
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2319      	movs	r3, #25
 800314e:	2201      	movs	r2, #1
 8003150:	490f      	ldr	r1, [pc, #60]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f99e 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e012      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }

      /* Increment Trials */
      I2C_Trials++;
<<<<<<< HEAD
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f4ff af32 	bcc.w	8002df2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x24c>
=======
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3301      	adds	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	f4ff af32 	bcc.w	8002fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	00100002 	.word	0x00100002
 8002fb0:	ffff0000 	.word	0xffff0000

08002fb4 <I2C_RequestMemoryWrite>:
=======
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000

08003198 <I2C_RequestMemoryWrite>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f960 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003004:	d103      	bne.n	800300e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e05f      	b.n	80030d2 <I2C_RequestMemoryWrite+0x11e>
=======
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	4608      	mov	r0, r1
 80031a2:	4611      	mov	r1, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	817b      	strh	r3, [r7, #10]
 80031aa:	460b      	mov	r3, r1
 80031ac:	813b      	strh	r3, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f960 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e8:	d103      	bne.n	80031f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e05f      	b.n	80032b6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	492d      	ldr	r1, [pc, #180]	; (80030dc <I2C_RequestMemoryWrite+0x128>)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f9bb 	bl	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e04c      	b.n	80030d2 <I2C_RequestMemoryWrite+0x11e>
=======
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	492d      	ldr	r1, [pc, #180]	; (80032c0 <I2C_RequestMemoryWrite+0x128>)
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f9bb 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e04c      	b.n	80032b6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa46 	bl	80034e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b04      	cmp	r3, #4
 8003064:	d107      	bne.n	8003076 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e02b      	b.n	80030d2 <I2C_RequestMemoryWrite+0x11e>
=======
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003234:	6a39      	ldr	r1, [r7, #32]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa46 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b04      	cmp	r3, #4
 8003248:	d107      	bne.n	800325a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e02b      	b.n	80032b6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003080:	893b      	ldrh	r3, [r7, #8]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	611a      	str	r2, [r3, #16]
 800308a:	e021      	b.n	80030d0 <I2C_RequestMemoryWrite+0x11c>
=======
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	e021      	b.n	80032b4 <I2C_RequestMemoryWrite+0x11c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 800308c:	893b      	ldrh	r3, [r7, #8]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	b29b      	uxth	r3, r3
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa20 	bl	80034e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d107      	bne.n	80030c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e005      	b.n	80030d2 <I2C_RequestMemoryWrite+0x11e>
=======
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	b29b      	uxth	r3, r3
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	6a39      	ldr	r1, [r7, #32]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fa20 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b04      	cmp	r3, #4
 8003294:	d107      	bne.n	80032a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e005      	b.n	80032b6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 80030c6:	893b      	ldrh	r3, [r7, #8]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	00010002 	.word	0x00010002

080030e0 <I2C_RequestMemoryRead>:
=======
 80032aa:	893b      	ldrh	r3, [r7, #8]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	00010002 	.word	0x00010002

080032c4 <I2C_RequestMemoryRead>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	460b      	mov	r3, r1
 80030f4:	813b      	strh	r3, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003108:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	2200      	movs	r2, #0
 8003122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f8c2 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d103      	bne.n	800314a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0aa      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
=======
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	2200      	movs	r2, #0
 8003306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8c2 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003324:	d103      	bne.n	800332e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0aa      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800315c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	6a3a      	ldr	r2, [r7, #32]
 8003162:	4952      	ldr	r1, [pc, #328]	; (80032ac <I2C_RequestMemoryRead+0x1cc>)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f91d 	bl	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e097      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
=======
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	4952      	ldr	r1, [pc, #328]	; (8003490 <I2C_RequestMemoryRead+0x1cc>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f91d 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e097      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	6a39      	ldr	r1, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f9a8 	bl	80034e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d107      	bne.n	80031b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e076      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
=======
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f9a8 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b04      	cmp	r3, #4
 8003384:	d107      	bne.n	8003396 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e076      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031bc:	893b      	ldrh	r3, [r7, #8]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e021      	b.n	800320c <I2C_RequestMemoryRead+0x12c>
=======
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a0:	893b      	ldrh	r3, [r7, #8]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]
 80033aa:	e021      	b.n	80033f0 <I2C_RequestMemoryRead+0x12c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 80031c8:	893b      	ldrh	r3, [r7, #8]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	6a39      	ldr	r1, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f982 	bl	80034e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d107      	bne.n	80031fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e050      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
=======
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	6a39      	ldr	r1, [r7, #32]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f982 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d107      	bne.n	80033e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e050      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 8003202:	893b      	ldrh	r3, [r7, #8]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	611a      	str	r2, [r3, #16]
=======
 80033e6:	893b      	ldrh	r3, [r7, #8]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f967 	bl	80034e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003232:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e035      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
=======
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	6a39      	ldr	r1, [r7, #32]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f967 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b04      	cmp	r3, #4
 8003406:	d107      	bne.n	8003418 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e035      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003246:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	2200      	movs	r2, #0
 8003250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f82b 	bl	80032b0 <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800326e:	d103      	bne.n	8003278 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e013      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
=======
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2200      	movs	r2, #0
 8003434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f82b 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003452:	d103      	bne.n	800345c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e013      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
<<<<<<< HEAD
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	4906      	ldr	r1, [pc, #24]	; (80032ac <I2C_RequestMemoryRead+0x1cc>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f886 	bl	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	00010002 	.word	0x00010002

080032b0 <I2C_WaitOnFlagUntilTimeout>:
=======
 8003460:	897b      	ldrh	r3, [r7, #10]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	6a3a      	ldr	r2, [r7, #32]
 8003474:	4906      	ldr	r1, [pc, #24]	; (8003490 <I2C_RequestMemoryRead+0x1cc>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f886 	bl	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c0:	e048      	b.n	8003354 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d044      	beq.n	8003354 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe f955 	bl	8001578 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d139      	bne.n	8003354 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10d      	bne.n	8003306 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	e00c      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	43da      	mvns	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	429a      	cmp	r2, r3
 8003324:	d116      	bne.n	8003354 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e023      	b.n	800339c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10d      	bne.n	800337a <I2C_WaitOnFlagUntilTimeout+0xca>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	e00c      	b.n	8003394 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	429a      	cmp	r2, r3
 8003398:	d093      	beq.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a4:	e048      	b.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d044      	beq.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe f85b 	bl	8001568 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d139      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	e00c      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d116      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e023      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	e00c      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d093      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b2:	e071      	b.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d123      	bne.n	800340c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e067      	b.n	80034dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003596:	e071      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d123      	bne.n	80035f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e067      	b.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d041      	beq.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fe f8b0 	bl	8001578 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d136      	bne.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10c      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4013      	ands	r3, r2
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	e00b      	b.n	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e021      	b.n	80034dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	0c1b      	lsrs	r3, r3, #16
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10c      	bne.n	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	43da      	mvns	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e00b      	b.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f af6d 	bne.w	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d041      	beq.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f8:	f7fd ffb6 	bl	8001568 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d302      	bcc.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d136      	bne.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10c      	bne.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf14      	ite	ne
 800362a:	2301      	movne	r3, #1
 800362c:	2300      	moveq	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	e00b      	b.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	43da      	mvns	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e021      	b.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10c      	bne.n	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e00b      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af6d 	bne.w	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f0:	e034      	b.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f8e3 	bl	80036be <I2C_IsAcknowledgeFailed>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e034      	b.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8e3 	bl	80038a2 <I2C_IsAcknowledgeFailed>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e034      	b.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d028      	beq.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fe f835 	bl	8001578 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11d      	bne.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d016      	beq.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e007      	b.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d1c3      	bne.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d028      	beq.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fd ff3b 	bl	8001568 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11d      	bne.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d016      	beq.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d1c3      	bne.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003580:	e034      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f89b 	bl	80036be <I2C_IsAcknowledgeFailed>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e034      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f89b 	bl	80038a2 <I2C_IsAcknowledgeFailed>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e034      	b.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d028      	beq.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fd ffed 	bl	8001578 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d11d      	bne.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d016      	beq.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d1c3      	bne.n	8003582 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d028      	beq.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fd fef3 	bl	8001568 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11d      	bne.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d016      	beq.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d1c3      	bne.n	8003766 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003610:	e049      	b.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d119      	bne.n	8003654 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0210 	mvn.w	r2, #16
 8003628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e030      	b.n	80036b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
=======
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f4:	e049      	b.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d119      	bne.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e030      	b.n	800389a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8003654:	f7fd ff90 	bl	8001578 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11d      	bne.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d016      	beq.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e007      	b.n	80036b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d1ae      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
=======
 8003838:	f7fd fe96 	bl	8001568 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11d      	bne.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d016      	beq.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e007      	b.n	800389a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d1ae      	bne.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_IsAcknowledgeFailed>:
=======
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <I2C_IsAcknowledgeFailed>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d11b      	bne.n	800370e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <HAL_RCC_OscConfig>:
=======
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d11b      	bne.n	80038f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_RCC_OscConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
=======
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e272      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
=======
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e272      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8087 	beq.w	800384a <HAL_RCC_OscConfig+0x12e>
=======
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8087 	beq.w	8003a2e <HAL_RCC_OscConfig+0x12e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 800373c:	4b92      	ldr	r3, [pc, #584]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b04      	cmp	r3, #4
 8003746:	d00c      	beq.n	8003762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003748:	4b8f      	ldr	r3, [pc, #572]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b08      	cmp	r3, #8
 8003752:	d112      	bne.n	800377a <HAL_RCC_OscConfig+0x5e>
 8003754:	4b8c      	ldr	r3, [pc, #560]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d10b      	bne.n	800377a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003762:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d06c      	beq.n	8003848 <HAL_RCC_OscConfig+0x12c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d168      	bne.n	8003848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e24c      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
=======
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00c      	beq.n	8003946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800392c:	4b8f      	ldr	r3, [pc, #572]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d112      	bne.n	800395e <HAL_RCC_OscConfig+0x5e>
 8003938:	4b8c      	ldr	r3, [pc, #560]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d10b      	bne.n	800395e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003946:	4b89      	ldr	r3, [pc, #548]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d06c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x12c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d168      	bne.n	8003a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e24c      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x76>
 8003784:	4b80      	ldr	r3, [pc, #512]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7f      	ldr	r2, [pc, #508]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e02e      	b.n	80037f0 <HAL_RCC_OscConfig+0xd4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x98>
 800379a:	4b7b      	ldr	r3, [pc, #492]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b78      	ldr	r3, [pc, #480]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a77      	ldr	r2, [pc, #476]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0xd4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0xbc>
 80037be:	4b72      	ldr	r3, [pc, #456]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a71      	ldr	r2, [pc, #452]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0xd4>
 80037d8:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6a      	ldr	r2, [pc, #424]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b68      	ldr	r3, [pc, #416]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a67      	ldr	r2, [pc, #412]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]
=======
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x76>
 8003968:	4b80      	ldr	r3, [pc, #512]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7f      	ldr	r2, [pc, #508]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	e02e      	b.n	80039d4 <HAL_RCC_OscConfig+0xd4>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7a      	ldr	r2, [pc, #488]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b78      	ldr	r3, [pc, #480]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a77      	ldr	r2, [pc, #476]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e01d      	b.n	80039d4 <HAL_RCC_OscConfig+0xd4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0xbc>
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a71      	ldr	r2, [pc, #452]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0xd4>
 80039bc:	4b6b      	ldr	r3, [pc, #428]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a67      	ldr	r2, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d2:	6013      	str	r3, [r2, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fd febe 	bl	8001578 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7fd feba 	bl	8001578 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e200      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0xe4>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x12e>
=======
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fd fdc4 	bl	8001568 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd fdc0 	bl	8001568 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e200      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0xe4>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x12e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003820:	f7fd feaa 	bl	8001578 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7fd fea6 	bl	8001578 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1ec      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x10c>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	bf00      	nop
=======
 8003a04:	f7fd fdb0 	bl	8001568 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fdac 	bl	8001568 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1ec      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x10c>
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_OscConfig+0x202>
=======
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d063      	beq.n	8003b02 <HAL_RCC_OscConfig+0x202>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8003856:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b08      	cmp	r3, #8
 800386c:	d11c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x18c>
 800386e:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x176>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e1c0      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
=======
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a46:	4b49      	ldr	r3, [pc, #292]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d11c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x18c>
 8003a52:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d116      	bne.n	8003a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	4b43      	ldr	r3, [pc, #268]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_RCC_OscConfig+0x176>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e1c0      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003892:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4939      	ldr	r1, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	e03a      	b.n	800391e <HAL_RCC_OscConfig+0x202>
=======
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4939      	ldr	r1, [pc, #228]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	e03a      	b.n	8003b02 <HAL_RCC_OscConfig+0x202>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <HAL_RCC_OscConfig+0x270>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fd fe5f 	bl	8001578 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038be:	f7fd fe5b 	bl	8001578 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1a1      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x1a2>
=======
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fd65 	bl	8001568 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fd fd61 	bl	8001568 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e1a1      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80038dc:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4927      	ldr	r1, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x202>
=======
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4927      	ldr	r1, [pc, #156]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	e015      	b.n	8003b02 <HAL_RCC_OscConfig+0x202>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x270>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fe3e 	bl	8001578 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7fd fe3a 	bl	8001578 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e180      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1e4>
=======
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fd fd44 	bl	8001568 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae4:	f7fd fd40 	bl	8001568 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e180      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af6:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03a      	beq.n	80039a0 <HAL_RCC_OscConfig+0x284>
=======
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d03a      	beq.n	8003b84 <HAL_RCC_OscConfig+0x284>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d019      	beq.n	8003966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b17      	ldr	r3, [pc, #92]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7fd fe1e 	bl	8001578 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7fd fe1a 	bl	8001578 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e160      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x224>
=======
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d019      	beq.n	8003b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_RCC_OscConfig+0x274>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1c:	f7fd fd24 	bl	8001568 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fd fd20 	bl	8001568 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e160      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_RCC_OscConfig+0x26c>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x224>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800395e:	2001      	movs	r0, #1
 8003960:	f000 face 	bl	8003f00 <RCC_Delay>
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x284>
=======
 8003b42:	2001      	movs	r0, #1
 8003b44:	f000 face 	bl	80040e4 <RCC_Delay>
 8003b48:	e01c      	b.n	8003b84 <HAL_RCC_OscConfig+0x284>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fd fe04 	bl	8001578 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003972:	e00f      	b.n	8003994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd fe00 	bl	8001578 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d908      	bls.n	8003994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e146      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	42420000 	.word	0x42420000
 8003990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e9      	bne.n	8003974 <HAL_RCC_OscConfig+0x258>
=======
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_RCC_OscConfig+0x274>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b50:	f7fd fd0a 	bl	8001568 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b56:	e00f      	b.n	8003b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fd fd06 	bl	8001568 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d908      	bls.n	8003b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e146      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	42420000 	.word	0x42420000
 8003b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e9      	bne.n	8003b58 <HAL_RCC_OscConfig+0x258>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a6 	beq.w	8003afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]
=======
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a6 	beq.w	8003cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80039b2:	4b8b      	ldr	r3, [pc, #556]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4a87      	ldr	r2, [pc, #540]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	61d3      	str	r3, [r2, #28]
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039da:	4b82      	ldr	r3, [pc, #520]	; (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d118      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e6:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7e      	ldr	r2, [pc, #504]	; (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f2:	f7fd fdc1 	bl	8001578 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fd fdbd 	bl	8001578 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b64      	cmp	r3, #100	; 0x64
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e103      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x2de>
=======
 8003b96:	4b8b      	ldr	r3, [pc, #556]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10d      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	61d3      	str	r3, [r2, #28]
 8003bae:	4b85      	ldr	r3, [pc, #532]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b82      	ldr	r3, [pc, #520]	; (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d118      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bca:	4b7f      	ldr	r3, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7e      	ldr	r2, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fcc7 	bl	8001568 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fd fcc3 	bl	8001568 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	; 0x64
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e103      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b75      	ldr	r3, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x4c8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x2de>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x312>
 8003a20:	4b6f      	ldr	r3, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a6e      	ldr	r2, [pc, #440]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	e02d      	b.n	8003a8a <HAL_RCC_OscConfig+0x36e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x334>
 8003a36:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6213      	str	r3, [r2, #32]
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCC_OscConfig+0x36e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x356>
 8003a58:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a60      	ldr	r2, [pc, #384]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4a5d      	ldr	r2, [pc, #372]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6213      	str	r3, [r2, #32]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x36e>
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a5a      	ldr	r2, [pc, #360]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a57      	ldr	r2, [pc, #348]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d015      	beq.n	8003abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a92:	f7fd fd71 	bl	8001578 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd fd6d 	bl	8001578 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0b1      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCC_OscConfig+0x37e>
 8003abc:	e014      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3cc>
=======
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x312>
 8003c04:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e02d      	b.n	8003c6e <HAL_RCC_OscConfig+0x36e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x334>
 8003c1a:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a69      	ldr	r2, [pc, #420]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6213      	str	r3, [r2, #32]
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4a66      	ldr	r2, [pc, #408]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6213      	str	r3, [r2, #32]
 8003c32:	e01c      	b.n	8003c6e <HAL_RCC_OscConfig+0x36e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x356>
 8003c3c:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a60      	ldr	r2, [pc, #384]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	4b5e      	ldr	r3, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a5d      	ldr	r2, [pc, #372]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6213      	str	r3, [r2, #32]
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x36e>
 8003c56:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a5a      	ldr	r2, [pc, #360]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d015      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd fc77 	bl	8001568 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fc73 	bl	8001568 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0b1      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RCC_OscConfig+0x37e>
 8003ca0:	e014      	b.n	8003ccc <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003abe:	f7fd fd5b 	bl	8001578 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fd57 	bl	8001578 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e09b      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ee      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x3aa>
=======
 8003ca2:	f7fd fc61 	bl	8001568 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fc5d 	bl	8001568 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e09b      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc0:	4b40      	ldr	r3, [pc, #256]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ee      	bne.n	8003caa <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aee:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4a3b      	ldr	r2, [pc, #236]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af8:	61d3      	str	r3, [r2, #28]
=======
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	61d3      	str	r3, [r2, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8087 	beq.w	8003c12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d061      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d146      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x48a>
=======
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8087 	beq.w	8003df6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce8:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d061      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d146      	bne.n	8003d8a <HAL_RCC_OscConfig+0x48a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fd fd2b 	bl	8001578 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fd fd27 	bl	8001578 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e06d      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x40a>
=======
 8003cfc:	4b33      	ldr	r3, [pc, #204]	; (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fd fc31 	bl	8001568 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fd fc2d 	bl	8001568 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e06d      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x40a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d108      	bne.n	8003b60 <HAL_RCC_OscConfig+0x444>
=======
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	d108      	bne.n	8003d44 <HAL_RCC_OscConfig+0x444>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4921      	ldr	r1, [pc, #132]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
=======
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a19      	ldr	r1, [r3, #32]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	430b      	orrs	r3, r1
 8003b72:	491b      	ldr	r1, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fcfb 	bl	8001578 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fd fcf7 	bl	8001578 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e03d      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x46a>
 8003ba4:	e035      	b.n	8003c12 <HAL_RCC_OscConfig+0x4f6>
=======
 8003d44:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a19      	ldr	r1, [r3, #32]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	430b      	orrs	r3, r1
 8003d56:	491b      	ldr	r1, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd fc01 	bl	8001568 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd fbfd 	bl	8001568 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e03d      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x46a>
 8003d88:	e035      	b.n	8003df6 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fd fce4 	bl	8001578 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fd fce0 	bl	8001578 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e026      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x498>
 8003bd2:	e01e      	b.n	8003c12 <HAL_RCC_OscConfig+0x4f6>
=======
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd fbea 	bl	8001568 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fbe6 	bl	8001568 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e026      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x498>
 8003db6:	e01e      	b.n	8003df6 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e019      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	42420060 	.word	0x42420060
=======
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e019      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42420060 	.word	0x42420060
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_OscConfig+0x500>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
=======
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_OscConfig+0x500>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_RCC_ClockConfig>:
=======
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_RCC_ClockConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
=======
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0d0      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0d0      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003c34:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d910      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b67      	ldr	r3, [pc, #412]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4965      	ldr	r1, [pc, #404]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
=======
 8003e18:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d910      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	4965      	ldr	r1, [pc, #404]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003c52:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b8      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0b8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x92>
=======
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x92>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c94:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c9e:	6053      	str	r3, [r2, #4]
=======
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e60:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e82:	6053      	str	r3, [r2, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003ca0:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	494d      	ldr	r1, [pc, #308]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
=======
 8003e84:	4b50      	ldr	r3, [pc, #320]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	494d      	ldr	r1, [pc, #308]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d040      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x120>
=======
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d040      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e07f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d115      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07f      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e073      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e073      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003cee:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06b      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4936      	ldr	r1, [pc, #216]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fd fc32 	bl	8001578 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd fc2e 	bl	8001578 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e053      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf8>
=======
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e06b      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b39      	ldr	r3, [pc, #228]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4936      	ldr	r1, [pc, #216]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fb38 	bl	8001568 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fd fb34 	bl	8001568 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e053      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d210      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	4922      	ldr	r1, [pc, #136]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
=======
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d210      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0207 	bic.w	r2, r3, #7
 8003f3a:	4922      	ldr	r1, [pc, #136]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e032      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e032      	b.n	8003fba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4916      	ldr	r1, [pc, #88]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
=======
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4916      	ldr	r1, [pc, #88]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	490e      	ldr	r1, [pc, #56]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
=======
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003dae:	f000 f821 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	490a      	ldr	r1, [pc, #40]	; (8003de8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x1cc>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1d0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fb90 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08005c98 	.word	0x08005c98
 8003dec:	20000000 	.word	0x20000000
 8003df0:	20000004 	.word	0x20000004

08003df4 <HAL_RCC_GetSysClockFreq>:
=======
 8003f92:	f000 f821 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fa96 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08005f74 	.word	0x08005f74
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000004 	.word	0x20000004

08003fd8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
=======
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
=======
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x30>
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x36>
 8003e22:	e027      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x80>
=======
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d002      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x30>
 8004002:	2b08      	cmp	r3, #8
 8004004:	d003      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x36>
 8004006:	e027      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x80>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e26:	613b      	str	r3, [r7, #16]
      break;
 8003e28:	e027      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x86>
=======
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_RCC_GetSysClockFreq+0x98>)
 800400a:	613b      	str	r3, [r7, #16]
      break;
 800400c:	e027      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0c9b      	lsrs	r3, r3, #18
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x70>
=======
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	0c9b      	lsrs	r3, r3, #18
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x70>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	0c5b      	lsrs	r3, r3, #17
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	60bb      	str	r3, [r7, #8]
=======
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_RCC_GetSysClockFreq+0x94>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	0c5b      	lsrs	r3, r3, #17
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	4a11      	ldr	r2, [pc, #68]	; (8004078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004032:	5cd3      	ldrb	r3, [r2, r3]
 8004034:	60bb      	str	r3, [r7, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e56:	fb03 f202 	mul.w	r2, r3, r2
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e004      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x7a>
=======
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <HAL_RCC_GetSysClockFreq+0x98>)
 800403a:	fb03 f202 	mul.w	r2, r3, r2
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e004      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x7a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	613b      	str	r3, [r7, #16]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x86>
=======
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0c      	ldr	r2, [pc, #48]	; (800407c <HAL_RCC_GetSysClockFreq+0xa4>)
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	613b      	str	r3, [r7, #16]
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e76:	613b      	str	r3, [r7, #16]
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	693b      	ldr	r3, [r7, #16]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	007a1200 	.word	0x007a1200
 8003e90:	08005cb0 	.word	0x08005cb0
 8003e94:	08005cc0 	.word	0x08005cc0
 8003e98:	003d0900 	.word	0x003d0900

08003e9c <HAL_RCC_GetHCLKFreq>:
=======
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_RCC_GetSysClockFreq+0x98>)
 800405a:	613b      	str	r3, [r7, #16]
      break;
 800405c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405e:	693b      	ldr	r3, [r7, #16]
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	007a1200 	.word	0x007a1200
 8004074:	08005f8c 	.word	0x08005f8c
 8004078:	08005f9c 	.word	0x08005f9c
 800407c:	003d0900 	.word	0x003d0900

08004080 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b02      	ldr	r3, [pc, #8]	; (8003eac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	20000000 	.word	0x20000000

08003eb0 <HAL_RCC_GetPCLK1Freq>:
=======
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b02      	ldr	r3, [pc, #8]	; (8004090 <HAL_RCC_GetHCLKFreq+0x10>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	20000000 	.word	0x20000000

08004094 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb4:	f7ff fff2 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	08005ca8 	.word	0x08005ca8

08003ed8 <HAL_RCC_GetPCLK2Freq>:
=======
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004098:	f7ff fff2 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	08005f84 	.word	0x08005f84

080040bc <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	08005ca8 	.word	0x08005ca8

08003f00 <RCC_Delay>:
=======
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c0:	f7ff ffde 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	0adb      	lsrs	r3, r3, #11
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	08005f84 	.word	0x08005f84

080040e4 <RCC_Delay>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <RCC_Delay+0x34>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <RCC_Delay+0x38>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0a5b      	lsrs	r3, r3, #9
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f1c:	bf00      	nop
  }
  while (Delay --);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	60fa      	str	r2, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <RCC_Delay+0x1c>
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	20000000 	.word	0x20000000
 8003f38:	10624dd3 	.word	0x10624dd3

08003f3c <HAL_RCCEx_PeriphCLKConfig>:
=======
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <RCC_Delay+0x34>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <RCC_Delay+0x38>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0a5b      	lsrs	r3, r3, #9
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004100:	bf00      	nop
  }
  while (Delay --);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	60fa      	str	r2, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f9      	bne.n	8004100 <RCC_Delay+0x1c>
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	20000000 	.word	0x20000000
 800411c:	10624dd3 	.word	0x10624dd3

08004120 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
=======
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d07d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	75fb      	strb	r3, [r7, #23]
=======
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d07d      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	4a4b      	ldr	r2, [pc, #300]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f72:	61d3      	str	r3, [r2, #28]
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d118      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a42      	ldr	r2, [pc, #264]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9c:	f7fd faec 	bl	8001578 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa4:	f7fd fae8 	bl	8001578 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e06d      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 8004140:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10d      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414c:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	4a4b      	ldr	r2, [pc, #300]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	61d3      	str	r3, [r2, #28]
 8004158:	4b49      	ldr	r3, [pc, #292]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004164:	2301      	movs	r3, #1
 8004166:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	4b46      	ldr	r3, [pc, #280]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d118      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a42      	ldr	r2, [pc, #264]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004180:	f7fd f9f2 	bl	8001568 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	e008      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004188:	f7fd f9ee 	bl	8001568 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e06d      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8003fc2:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02e      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d027      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d014      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fd fab7 	bl	8001578 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd fab3 	bl	8001578 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e036      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ee      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd2>
=======
 80041a6:	4b36      	ldr	r3, [pc, #216]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02e      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d027      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041d4:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d014      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fd f9bd 	bl	8001568 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	e00a      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd f9b9 	bl	8001568 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e036      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ee      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4917      	ldr	r1, [pc, #92]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	4313      	orrs	r3, r2
 8004040:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004052:	61d3      	str	r3, [r2, #28]
=======
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4917      	ldr	r1, [pc, #92]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	4313      	orrs	r3, r2
 8004224:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	490b      	ldr	r1, [pc, #44]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]
=======
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	490b      	ldr	r1, [pc, #44]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x154>
=======
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x154>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4904      	ldr	r1, [pc, #16]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
=======
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	4904      	ldr	r1, [pc, #16]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004270:	4313      	orrs	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
<<<<<<< HEAD
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	40007000 	.word	0x40007000
 80040a4:	42420440 	.word	0x42420440

080040a8 <HAL_RCCEx_GetPeriphCLKFreq>:
=======
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
 8004288:	42420440 	.word	0x42420440

0800428c <HAL_RCCEx_GetPeriphCLKFreq>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
<<<<<<< HEAD
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
=======
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
=======
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
<<<<<<< HEAD
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	f200 808a 	bhi.w	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d045      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d075      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
=======
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	f200 808a 	bhi.w	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d045      	beq.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d075      	beq.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
<<<<<<< HEAD
 80040de:	e082      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040e6:	4b45      	ldr	r3, [pc, #276]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d07b      	beq.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0c9b      	lsrs	r3, r3, #18
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	4a41      	ldr	r2, [pc, #260]	; (8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80040fc:	5cd3      	ldrb	r3, [r2, r3]
 80040fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d015      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	0c5b      	lsrs	r3, r3, #17
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004124:	4a38      	ldr	r2, [pc, #224]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fbb2 f2f3 	udiv	r2, r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	e004      	b.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4a34      	ldr	r2, [pc, #208]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800414c:	d102      	bne.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	61bb      	str	r3, [r7, #24]
      break;
 8004152:	e04a      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4a2d      	ldr	r2, [pc, #180]	; (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
      break;
 8004162:	e042      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004174:	d108      	bne.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e01f      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004192:	d109      	bne.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80041a0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e00f      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b2:	d11c      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80041c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041c4:	61bb      	str	r3, [r7, #24]
      break;
 80041c6:	e012      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041c8:	e011      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041ca:	f7ff fe85 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	0b9b      	lsrs	r3, r3, #14
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	3301      	adds	r3, #1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	61bb      	str	r3, [r7, #24]
      break;
 80041e4:	e004      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041ee:	bf00      	nop
    }
  }
  return (frequency);
 80041f0:	69bb      	ldr	r3, [r7, #24]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	08005cc4 	.word	0x08005cc4
 8004204:	08005cd4 	.word	0x08005cd4
 8004208:	007a1200 	.word	0x007a1200
 800420c:	003d0900 	.word	0x003d0900
 8004210:	aaaaaaab 	.word	0xaaaaaaab

08004214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
=======
 80042c2:	e082      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042c4:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042ca:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d07b      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0c9b      	lsrs	r3, r3, #18
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	4a41      	ldr	r2, [pc, #260]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d015      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ee:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	0c5b      	lsrs	r3, r3, #17
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004308:	4a38      	ldr	r2, [pc, #224]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4a34      	ldr	r2, [pc, #208]	; (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004324:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d102      	bne.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	61bb      	str	r3, [r7, #24]
      break;
 8004336:	e04a      	b.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	61bb      	str	r3, [r7, #24]
      break;
 8004346:	e042      	b.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004358:	d108      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e01f      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004376:	d109      	bne.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004384:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e00f      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004396:	d11c      	bne.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d016      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80043a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043a8:	61bb      	str	r3, [r7, #24]
      break;
 80043aa:	e012      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043ac:	e011      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043ae:	f7ff fe85 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	0b9b      	lsrs	r3, r3, #14
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	3301      	adds	r3, #1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	61bb      	str	r3, [r7, #24]
      break;
 80043c8:	e004      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043d2:	bf00      	nop
    }
  }
  return (frequency);
 80043d4:	69bb      	ldr	r3, [r7, #24]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	08005fa0 	.word	0x08005fa0
 80043e8:	08005fb0 	.word	0x08005fb0
 80043ec:	007a1200 	.word	0x007a1200
 80043f0:	003d0900 	.word	0x003d0900
 80043f4:	aaaaaaab 	.word	0xaaaaaaab

080043f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e041      	b.n	80042aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc ff8c 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 fa74 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_TIM_Base_Start_IT>:
=======
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e076      	b.n	80044f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441a:	d009      	beq.n	8004430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
 8004422:	e005      	b.n	8004430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc fe32 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004466:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	ea42 0103 	orr.w	r1, r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	0c1a      	lsrs	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 0204 	and.w	r2, r2, #4
 80044d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e041      	b.n	8004596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fe0e 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 fa74 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_TIM_Base_Start_IT>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
=======
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d001      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e03a      	b.n	8004342 <HAL_TIM_Base_Start_IT+0x8e>
=======
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d001      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e03a      	b.n	800462e <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIM_Base_Start_IT+0x98>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x58>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d009      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x58>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a14      	ldr	r2, [pc, #80]	; (8004350 <HAL_TIM_Base_Start_IT+0x9c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x58>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a13      	ldr	r2, [pc, #76]	; (8004354 <HAL_TIM_Base_Start_IT+0xa0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b06      	cmp	r3, #6
 800431c:	d010      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	e007      	b.n	8004340 <HAL_TIM_Base_Start_IT+0x8c>
=======
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a18      	ldr	r2, [pc, #96]	; (8004638 <HAL_TIM_Base_Start_IT+0x98>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x58>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d009      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x58>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a14      	ldr	r2, [pc, #80]	; (800463c <HAL_TIM_Base_Start_IT+0x9c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x58>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a13      	ldr	r2, [pc, #76]	; (8004640 <HAL_TIM_Base_Start_IT+0xa0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d111      	bne.n	800461c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d010      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	e007      	b.n	800462c <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
=======
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800

08004358 <HAL_TIM_IRQHandler>:
=======
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800

08004644 <HAL_TIM_IRQHandler>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0202 	mvn.w	r2, #2
 8004384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x4a>
=======
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0202 	mvn.w	r2, #2
 8004670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9b4 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0x56>
=======
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f9b4 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0x56>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9a7 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f9b6 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
=======
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9a7 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f9b6 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0204 	mvn.w	r2, #4
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x9e>
=======
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0204 	mvn.w	r2, #4
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f98a 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xaa>
=======
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f98a 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f97d 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f98c 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
=======
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f97d 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f98c 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0208 	mvn.w	r2, #8
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2204      	movs	r2, #4
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0xf2>
=======
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0208 	mvn.w	r2, #8
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2204      	movs	r2, #4
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f960 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xfe>
=======
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f960 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f953 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f962 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
=======
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f953 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f962 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0210 	mvn.w	r2, #16
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2208      	movs	r2, #8
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x146>
=======
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b10      	cmp	r3, #16
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b10      	cmp	r3, #16
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0210 	mvn.w	r2, #16
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2208      	movs	r2, #8
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0x146>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f936 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x152>
=======
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f936 	bl	80049f4 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0x152>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f929 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f938 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
=======
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f929 	bl	80049e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f938 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10e      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0201 	mvn.w	r2, #1
 80044d4:	611a      	str	r2, [r3, #16]
=======
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10e      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0201 	mvn.w	r2, #1
 80047c0:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fac4 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
=======
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fb ffe6 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d107      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004500:	611a      	str	r2, [r3, #16]
=======
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047ec:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fa7b 	bl	80049fe <HAL_TIMEx_BreakCallback>
=======
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa7b 	bl	8004cea <HAL_TIMEx_BreakCallback>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d10e      	bne.n	8004534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d107      	bne.n	8004534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800452c:	611a      	str	r2, [r3, #16]
=======
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004818:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8fc 	bl	800472c <HAL_TIM_TriggerCallback>
=======
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8fc 	bl	8004a18 <HAL_TIM_TriggerCallback>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d10e      	bne.n	8004560 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b20      	cmp	r3, #32
 800454e:	d107      	bne.n	8004560 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0220 	mvn.w	r2, #32
 8004558:	611a      	str	r2, [r3, #16]
=======
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b20      	cmp	r3, #32
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b20      	cmp	r3, #32
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0220 	mvn.w	r2, #32
 8004844:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa46 	bl	80049ec <HAL_TIMEx_CommutCallback>
=======
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa46 	bl	8004cd8 <HAL_TIMEx_CommutCallback>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_ConfigClockSource>:
=======
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_ConfigClockSource>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
=======
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIM_ConfigClockSource+0x1c>
 8004580:	2302      	movs	r3, #2
 8004582:	e0b4      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x186>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIM_ConfigClockSource+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e0b4      	b.n	80049da <HAL_TIM_ConfigClockSource+0x186>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045bc:	d03e      	beq.n	800463c <HAL_TIM_ConfigClockSource+0xd4>
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c2:	f200 8087 	bhi.w	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	f000 8086 	beq.w	80046da <HAL_TIM_ConfigClockSource+0x172>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d87f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b70      	cmp	r3, #112	; 0x70
 80045d6:	d01a      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xa6>
 80045d8:	2b70      	cmp	r3, #112	; 0x70
 80045da:	d87b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b60      	cmp	r3, #96	; 0x60
 80045de:	d050      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x11a>
 80045e0:	2b60      	cmp	r3, #96	; 0x60
 80045e2:	d877      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b50      	cmp	r3, #80	; 0x50
 80045e6:	d03c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xfa>
 80045e8:	2b50      	cmp	r3, #80	; 0x50
 80045ea:	d873      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d058      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x13a>
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d86f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b30      	cmp	r3, #48	; 0x30
 80045f6:	d064      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 80045f8:	2b30      	cmp	r3, #48	; 0x30
 80045fa:	d86b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d060      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d867      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05c      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d05a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 800460c:	e062      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a8:	d03e      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0xd4>
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ae:	f200 8087 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	f000 8086 	beq.w	80049c6 <HAL_TIM_ConfigClockSource+0x172>
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048be:	d87f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b70      	cmp	r3, #112	; 0x70
 80048c2:	d01a      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xa6>
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d87b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d050      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x11a>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d877      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d03c      	beq.n	800494e <HAL_TIM_ConfigClockSource+0xfa>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d873      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d058      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x13a>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d86f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d064      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d86b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d060      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d867      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d05a      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	e062      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800461e:	f000 f968 	bl	80048f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	609a      	str	r2, [r3, #8]
      break;
 800463a:	e04f      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
=======
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	f000 f968 	bl	8004bde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800491c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	609a      	str	r2, [r3, #8]
      break;
 8004926:	e04f      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	f000 f951 	bl	80048f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800465e:	609a      	str	r2, [r3, #8]
      break;
 8004660:	e03c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
=======
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004938:	f000 f951 	bl	8004bde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494a:	609a      	str	r2, [r3, #8]
      break;
 800494c:	e03c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	461a      	mov	r2, r3
 8004670:	f000 f8c8 	bl	8004804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2150      	movs	r1, #80	; 0x50
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f91f 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004680:	e02c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
=======
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	461a      	mov	r2, r3
 800495c:	f000 f8c8 	bl	8004af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2150      	movs	r1, #80	; 0x50
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f91f 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 800496c:	e02c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800468e:	461a      	mov	r2, r3
 8004690:	f000 f8e6 	bl	8004860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2160      	movs	r1, #96	; 0x60
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f90f 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 80046a0:	e01c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
=======
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	461a      	mov	r2, r3
 800497c:	f000 f8e6 	bl	8004b4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2160      	movs	r1, #96	; 0x60
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f90f 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 800498c:	e01c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 f8a8 	bl	8004804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f8ff 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 80046c0:	e00c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
=======
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	461a      	mov	r2, r3
 800499c:	f000 f8a8 	bl	8004af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2140      	movs	r1, #64	; 0x40
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f8ff 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 80049ac:	e00c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 f8f6 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 80046d2:	e003      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
=======
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 f8f6 	bl	8004baa <TIM_ITRx_SetConfig>
      break;
 80049be:	e003      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e000      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
=======
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_IC_CaptureCallback>:
=======
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
=======
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
=======
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_TriggerCallback>:
=======
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIM_TriggerCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
=======
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
	...

08004740 <TIM_Base_SetConfig>:
=======
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
	...

08004a2c <TIM_Base_SetConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <TIM_Base_SetConfig+0xb8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <TIM_Base_SetConfig+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a25      	ldr	r2, [pc, #148]	; (8004800 <TIM_Base_SetConfig+0xc0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <TIM_Base_SetConfig+0xb8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <TIM_Base_SetConfig+0xbc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <TIM_Base_SetConfig+0xc0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
=======
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a29      	ldr	r2, [pc, #164]	; (8004ae4 <TIM_Base_SetConfig+0xb8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00b      	beq.n	8004a5c <TIM_Base_SetConfig+0x30>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d007      	beq.n	8004a5c <TIM_Base_SetConfig+0x30>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <TIM_Base_SetConfig+0xbc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_Base_SetConfig+0x30>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a25      	ldr	r2, [pc, #148]	; (8004aec <TIM_Base_SetConfig+0xc0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d108      	bne.n	8004a6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <TIM_Base_SetConfig+0xb8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0x62>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0x62>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <TIM_Base_SetConfig+0xbc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0x62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a18      	ldr	r2, [pc, #96]	; (8004aec <TIM_Base_SetConfig+0xc0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <TIM_Base_SetConfig+0xb8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <TIM_Base_SetConfig+0xb8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d103      	bne.n	8004ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800

08004804 <TIM_TI1_ConfigInputStage>:
=======
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	615a      	str	r2, [r3, #20]
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800

08004af0 <TIM_TI1_ConfigInputStage>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
=======
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 030a 	bic.w	r3, r3, #10
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <TIM_TI2_ConfigInputStage>:
=======
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f023 0201 	bic.w	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 030a 	bic.w	r3, r3, #10
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <TIM_TI2_ConfigInputStage>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
=======
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	031b      	lsls	r3, r3, #12
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <TIM_ITRx_SetConfig>:
=======
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	031b      	lsls	r3, r3, #12
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <TIM_ITRx_SetConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
=======
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f043 0307 	orr.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <TIM_ETR_SetConfig>:
=======
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f043 0307 	orr.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <TIM_ETR_SetConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800490c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	021a      	lsls	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	431a      	orrs	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4313      	orrs	r3, r2
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	609a      	str	r2, [r3, #8]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8004bde:	b480      	push	{r7}
 8004be0:	b087      	sub	sp, #28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	021a      	lsls	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	609a      	str	r2, [r3, #8]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
=======
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004944:	2302      	movs	r3, #2
 8004946:	e046      	b.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d009      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
=======
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e046      	b.n	8004cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d009      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10c      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800

080049ec <HAL_TIMEx_CommutCallback>:
=======
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800

08004cd8 <HAL_TIMEx_CommutCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
=======
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <HAL_TIMEx_BreakCallback>:
=======
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIMEx_BreakCallback>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
=======
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UART_Init>:
=======
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <HAL_UART_Init>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e042      	b.n	8004aa8 <HAL_UART_Init+0x98>
=======
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e042      	b.n	8004d94 <HAL_UART_Init+0x98>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fbb2 	bl	80011a0 <HAL_UART_MspInit>
=======
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fa34 	bl	8001190 <HAL_UART_MspInit>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2224      	movs	r2, #36	; 0x24
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f91d 	bl	8004c94 <UART_SetConfig>
=======
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f91d 	bl	8004f80 <UART_SetConfig>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_UART_Transmit>:
=======
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_Transmit>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d16d      	bne.n	8004bac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Transmit+0x2c>
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e066      	b.n	8004bae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aee:	f7fc fd43 	bl	8001578 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Transmit+0x6c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Transmit+0x74>
=======
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d16d      	bne.n	8004e98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_UART_Transmit+0x2c>
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e066      	b.n	8004e9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2221      	movs	r2, #33	; 0x21
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dda:	f7fc fbc5 	bl	8001568 <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df4:	d108      	bne.n	8004e08 <HAL_UART_Transmit+0x6c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e003      	b.n	8004e10 <HAL_UART_Transmit+0x74>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b24:	e02a      	b.n	8004b7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f840 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e036      	b.n	8004bae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e007      	b.n	8004b6e <HAL_UART_Transmit+0xbe>
=======
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e10:	e02a      	b.n	8004e68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f840 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e036      	b.n	8004e9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	3302      	adds	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e007      	b.n	8004e5a <HAL_UART_Transmit+0xbe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1cf      	bne.n	8004b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2140      	movs	r1, #64	; 0x40
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f810 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e006      	b.n	8004bae <HAL_UART_Transmit+0xfe>
=======
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1cf      	bne.n	8004e12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f810 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <HAL_UART_Transmit+0xfe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_UART_Transmit+0xfe>
=======
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_UART_Transmit+0xfe>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_WaitOnFlagUntilTimeout>:
=======
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b090      	sub	sp, #64	; 0x40
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	e050      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d04c      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd6:	f7fc fccf 	bl	8001578 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d241      	bcs.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b090      	sub	sp, #64	; 0x40
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb2:	e050      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d04c      	beq.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec2:	f7fc fb51 	bl	8001568 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d241      	bcs.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c06:	637a      	str	r2, [r7, #52]	; 0x34
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8004c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e5      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c3a:	623a      	str	r2, [r7, #32]
 8004c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	69f9      	ldr	r1, [r7, #28]
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e00f      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d09f      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	613b      	str	r3, [r7, #16]
   return(result);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f26:	623a      	str	r2, [r7, #32]
 8004f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	69f9      	ldr	r1, [r7, #28]
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e00f      	b.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d09f      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3740      	adds	r7, #64	; 0x40
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UART_SetConfig>:
=======
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3740      	adds	r7, #64	; 0x40
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <UART_SetConfig>:
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
=======
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	611a      	str	r2, [r3, #16]
=======
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	611a      	str	r2, [r3, #16]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cce:	f023 030c 	bic.w	r3, r3, #12
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	60d3      	str	r3, [r2, #12]
=======
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fba:	f023 030c 	bic.w	r3, r3, #12
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	60d3      	str	r3, [r2, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <UART_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7ff f8ec 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x76>
=======
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <UART_SetConfig+0x114>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fe8:	f7ff f868 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	e002      	b.n	8004ff6 <UART_SetConfig+0x76>
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8004d04:	f7ff f8d4 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8004d08:	60f8      	str	r0, [r7, #12]
=======
 8004ff0:	f7ff f850 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 8004ff4:	60f8      	str	r0, [r7, #12]
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <UART_SetConfig+0x118>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	0119      	lsls	r1, r3, #4
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <UART_SetConfig+0x118>)
 8004d42:	fba3 0302 	umull	r0, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2064      	movs	r0, #100	; 0x64
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <UART_SetConfig+0x118>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d60:	4419      	add	r1, r3
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <UART_SetConfig+0x118>)
 8004d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2064      	movs	r0, #100	; 0x64
 8004d82:	fb00 f303 	mul.w	r3, r0, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	3332      	adds	r3, #50	; 0x32
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <UART_SetConfig+0x118>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40013800 	.word	0x40013800
 8004dac:	51eb851f 	.word	0x51eb851f

08004db0 <std>:
 8004db0:	2300      	movs	r3, #0
 8004db2:	b510      	push	{r4, lr}
 8004db4:	4604      	mov	r4, r0
 8004db6:	e9c0 3300 	strd	r3, r3, [r0]
 8004dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dbe:	6083      	str	r3, [r0, #8]
 8004dc0:	8181      	strh	r1, [r0, #12]
 8004dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8004dc4:	81c2      	strh	r2, [r0, #14]
 8004dc6:	6183      	str	r3, [r0, #24]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	2208      	movs	r2, #8
 8004dcc:	305c      	adds	r0, #92	; 0x5c
 8004dce:	f000 f906 	bl	8004fde <memset>
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <std+0x58>)
 8004dd4:	6224      	str	r4, [r4, #32]
 8004dd6:	6263      	str	r3, [r4, #36]	; 0x24
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <std+0x5c>)
 8004dda:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <std+0x60>)
 8004dde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <std+0x64>)
 8004de2:	6323      	str	r3, [r4, #48]	; 0x30
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <std+0x68>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d006      	beq.n	8004df8 <std+0x48>
 8004dea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004dee:	4294      	cmp	r4, r2
 8004df0:	d002      	beq.n	8004df8 <std+0x48>
 8004df2:	33d0      	adds	r3, #208	; 0xd0
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d105      	bne.n	8004e04 <std+0x54>
 8004df8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e00:	f000 b966 	b.w	80050d0 <__retarget_lock_init_recursive>
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	bf00      	nop
 8004e08:	08004f59 	.word	0x08004f59
 8004e0c:	08004f7b 	.word	0x08004f7b
 8004e10:	08004fb3 	.word	0x08004fb3
 8004e14:	08004fd7 	.word	0x08004fd7
 8004e18:	20000204 	.word	0x20000204

08004e1c <stdio_exit_handler>:
 8004e1c:	4a02      	ldr	r2, [pc, #8]	; (8004e28 <stdio_exit_handler+0xc>)
 8004e1e:	4903      	ldr	r1, [pc, #12]	; (8004e2c <stdio_exit_handler+0x10>)
 8004e20:	4803      	ldr	r0, [pc, #12]	; (8004e30 <stdio_exit_handler+0x14>)
 8004e22:	f000 b869 	b.w	8004ef8 <_fwalk_sglue>
 8004e26:	bf00      	nop
 8004e28:	2000000c 	.word	0x2000000c
 8004e2c:	08005971 	.word	0x08005971
 8004e30:	20000018 	.word	0x20000018

08004e34 <cleanup_stdio>:
 8004e34:	6841      	ldr	r1, [r0, #4]
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <cleanup_stdio+0x34>)
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	d001      	beq.n	8004e44 <cleanup_stdio+0x10>
 8004e40:	f000 fd96 	bl	8005970 <_fflush_r>
 8004e44:	68a1      	ldr	r1, [r4, #8]
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <cleanup_stdio+0x38>)
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	d002      	beq.n	8004e52 <cleanup_stdio+0x1e>
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f000 fd8f 	bl	8005970 <_fflush_r>
 8004e52:	68e1      	ldr	r1, [r4, #12]
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <cleanup_stdio+0x3c>)
 8004e56:	4299      	cmp	r1, r3
 8004e58:	d004      	beq.n	8004e64 <cleanup_stdio+0x30>
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e60:	f000 bd86 	b.w	8005970 <_fflush_r>
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	bf00      	nop
 8004e68:	20000204 	.word	0x20000204
 8004e6c:	2000026c 	.word	0x2000026c
 8004e70:	200002d4 	.word	0x200002d4

08004e74 <global_stdio_init.part.0>:
 8004e74:	b510      	push	{r4, lr}
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <global_stdio_init.part.0+0x30>)
 8004e78:	4c0b      	ldr	r4, [pc, #44]	; (8004ea8 <global_stdio_init.part.0+0x34>)
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <global_stdio_init.part.0+0x38>)
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	2104      	movs	r1, #4
 8004e82:	2200      	movs	r2, #0
 8004e84:	f7ff ff94 	bl	8004db0 <std>
 8004e88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2109      	movs	r1, #9
 8004e90:	f7ff ff8e 	bl	8004db0 <std>
 8004e94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e98:	2202      	movs	r2, #2
 8004e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e9e:	2112      	movs	r1, #18
 8004ea0:	f7ff bf86 	b.w	8004db0 <std>
 8004ea4:	2000033c 	.word	0x2000033c
 8004ea8:	20000204 	.word	0x20000204
 8004eac:	08004e1d 	.word	0x08004e1d

08004eb0 <__sfp_lock_acquire>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <__sfp_lock_acquire+0x8>)
 8004eb2:	f000 b90e 	b.w	80050d2 <__retarget_lock_acquire_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	20000345 	.word	0x20000345

08004ebc <__sfp_lock_release>:
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <__sfp_lock_release+0x8>)
 8004ebe:	f000 b909 	b.w	80050d4 <__retarget_lock_release_recursive>
 8004ec2:	bf00      	nop
 8004ec4:	20000345 	.word	0x20000345

08004ec8 <__sinit>:
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
 8004ecc:	f7ff fff0 	bl	8004eb0 <__sfp_lock_acquire>
 8004ed0:	6a23      	ldr	r3, [r4, #32]
 8004ed2:	b11b      	cbz	r3, 8004edc <__sinit+0x14>
 8004ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed8:	f7ff bff0 	b.w	8004ebc <__sfp_lock_release>
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <__sinit+0x28>)
 8004ede:	6223      	str	r3, [r4, #32]
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <__sinit+0x2c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f5      	bne.n	8004ed4 <__sinit+0xc>
 8004ee8:	f7ff ffc4 	bl	8004e74 <global_stdio_init.part.0>
 8004eec:	e7f2      	b.n	8004ed4 <__sinit+0xc>
 8004eee:	bf00      	nop
 8004ef0:	08004e35 	.word	0x08004e35
 8004ef4:	2000033c 	.word	0x2000033c

08004ef8 <_fwalk_sglue>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	4607      	mov	r7, r0
 8004efe:	4688      	mov	r8, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	2600      	movs	r6, #0
 8004f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f08:	f1b9 0901 	subs.w	r9, r9, #1
 8004f0c:	d505      	bpl.n	8004f1a <_fwalk_sglue+0x22>
 8004f0e:	6824      	ldr	r4, [r4, #0]
 8004f10:	2c00      	cmp	r4, #0
 8004f12:	d1f7      	bne.n	8004f04 <_fwalk_sglue+0xc>
 8004f14:	4630      	mov	r0, r6
 8004f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d907      	bls.n	8004f30 <_fwalk_sglue+0x38>
 8004f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f24:	3301      	adds	r3, #1
 8004f26:	d003      	beq.n	8004f30 <_fwalk_sglue+0x38>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c0      	blx	r8
 8004f2e:	4306      	orrs	r6, r0
 8004f30:	3568      	adds	r5, #104	; 0x68
 8004f32:	e7e9      	b.n	8004f08 <_fwalk_sglue+0x10>

08004f34 <iprintf>:
 8004f34:	b40f      	push	{r0, r1, r2, r3}
 8004f36:	b507      	push	{r0, r1, r2, lr}
 8004f38:	4906      	ldr	r1, [pc, #24]	; (8004f54 <iprintf+0x20>)
 8004f3a:	ab04      	add	r3, sp, #16
 8004f3c:	6808      	ldr	r0, [r1, #0]
 8004f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f42:	6881      	ldr	r1, [r0, #8]
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	f000 f9e3 	bl	8005310 <_vfiprintf_r>
 8004f4a:	b003      	add	sp, #12
 8004f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f50:	b004      	add	sp, #16
 8004f52:	4770      	bx	lr
 8004f54:	20000064 	.word	0x20000064

08004f58 <__sread>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f60:	f000 f868 	bl	8005034 <_read_r>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	bfab      	itete	ge
 8004f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f6c:	181b      	addge	r3, r3, r0
 8004f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f72:	bfac      	ite	ge
 8004f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f76:	81a3      	strhlt	r3, [r4, #12]
 8004f78:	bd10      	pop	{r4, pc}

08004f7a <__swrite>:
 8004f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7e:	461f      	mov	r7, r3
 8004f80:	898b      	ldrh	r3, [r1, #12]
 8004f82:	4605      	mov	r5, r0
 8004f84:	05db      	lsls	r3, r3, #23
 8004f86:	460c      	mov	r4, r1
 8004f88:	4616      	mov	r6, r2
 8004f8a:	d505      	bpl.n	8004f98 <__swrite+0x1e>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	f000 f83c 	bl	8005010 <_lseek_r>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fae:	f000 b853 	b.w	8005058 <_write_r>

08004fb2 <__sseek>:
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 f829 	bl	8005010 <_lseek_r>
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	bf15      	itete	ne
 8004fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fce:	81a3      	strheq	r3, [r4, #12]
 8004fd0:	bf18      	it	ne
 8004fd2:	81a3      	strhne	r3, [r4, #12]
 8004fd4:	bd10      	pop	{r4, pc}

08004fd6 <__sclose>:
 8004fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fda:	f000 b809 	b.w	8004ff0 <_close_r>

08004fde <memset>:
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4402      	add	r2, r0
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d100      	bne.n	8004fe8 <memset+0xa>
 8004fe6:	4770      	bx	lr
 8004fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fec:	e7f9      	b.n	8004fe2 <memset+0x4>
	...

08004ff0 <_close_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4d05      	ldr	r5, [pc, #20]	; (800500c <_close_r+0x1c>)
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	f7fc f9bf 	bl	800137e <_close>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_close_r+0x1a>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_close_r+0x1a>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	20000340 	.word	0x20000340

08005010 <_lseek_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	2200      	movs	r2, #0
 800501a:	4d05      	ldr	r5, [pc, #20]	; (8005030 <_lseek_r+0x20>)
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f7fc f9d1 	bl	80013c6 <_lseek>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_lseek_r+0x1e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_lseek_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000340 	.word	0x20000340

08005034 <_read_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	2200      	movs	r2, #0
 800503e:	4d05      	ldr	r5, [pc, #20]	; (8005054 <_read_r+0x20>)
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fc f962 	bl	800130c <_read>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_read_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_read_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000340 	.word	0x20000340

08005058 <_write_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4604      	mov	r4, r0
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	2200      	movs	r2, #0
 8005062:	4d05      	ldr	r5, [pc, #20]	; (8005078 <_write_r+0x20>)
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fc f96d 	bl	8001346 <_write>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_write_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_write_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	20000340 	.word	0x20000340

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	; (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000064 	.word	0x20000064

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	2600      	movs	r6, #0
 800508c:	4d0c      	ldr	r5, [pc, #48]	; (80050c0 <__libc_init_array+0x38>)
 800508e:	4c0d      	ldr	r4, [pc, #52]	; (80050c4 <__libc_init_array+0x3c>)
 8005090:	1b64      	subs	r4, r4, r5
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	f000 fdca 	bl	8005c30 <_init>
 800509c:	2600      	movs	r6, #0
 800509e:	4d0a      	ldr	r5, [pc, #40]	; (80050c8 <__libc_init_array+0x40>)
 80050a0:	4c0a      	ldr	r4, [pc, #40]	; (80050cc <__libc_init_array+0x44>)
 80050a2:	1b64      	subs	r4, r4, r5
 80050a4:	10a4      	asrs	r4, r4, #2
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08005d0c 	.word	0x08005d0c
 80050c4:	08005d0c 	.word	0x08005d0c
 80050c8:	08005d0c 	.word	0x08005d0c
 80050cc:	08005d10 	.word	0x08005d10

080050d0 <__retarget_lock_init_recursive>:
 80050d0:	4770      	bx	lr

080050d2 <__retarget_lock_acquire_recursive>:
 80050d2:	4770      	bx	lr

080050d4 <__retarget_lock_release_recursive>:
 80050d4:	4770      	bx	lr
	...

080050d8 <_free_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4605      	mov	r5, r0
 80050dc:	2900      	cmp	r1, #0
 80050de:	d040      	beq.n	8005162 <_free_r+0x8a>
 80050e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e4:	1f0c      	subs	r4, r1, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfb8      	it	lt
 80050ea:	18e4      	addlt	r4, r4, r3
 80050ec:	f000 f8dc 	bl	80052a8 <__malloc_lock>
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <_free_r+0x8c>)
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	b933      	cbnz	r3, 8005104 <_free_r+0x2c>
 80050f6:	6063      	str	r3, [r4, #4]
 80050f8:	6014      	str	r4, [r2, #0]
 80050fa:	4628      	mov	r0, r5
 80050fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005100:	f000 b8d8 	b.w	80052b4 <__malloc_unlock>
 8005104:	42a3      	cmp	r3, r4
 8005106:	d908      	bls.n	800511a <_free_r+0x42>
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	1821      	adds	r1, r4, r0
 800510c:	428b      	cmp	r3, r1
 800510e:	bf01      	itttt	eq
 8005110:	6819      	ldreq	r1, [r3, #0]
 8005112:	685b      	ldreq	r3, [r3, #4]
 8005114:	1809      	addeq	r1, r1, r0
 8005116:	6021      	streq	r1, [r4, #0]
 8005118:	e7ed      	b.n	80050f6 <_free_r+0x1e>
 800511a:	461a      	mov	r2, r3
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b10b      	cbz	r3, 8005124 <_free_r+0x4c>
 8005120:	42a3      	cmp	r3, r4
 8005122:	d9fa      	bls.n	800511a <_free_r+0x42>
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	1850      	adds	r0, r2, r1
 8005128:	42a0      	cmp	r0, r4
 800512a:	d10b      	bne.n	8005144 <_free_r+0x6c>
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	4401      	add	r1, r0
 8005130:	1850      	adds	r0, r2, r1
 8005132:	4283      	cmp	r3, r0
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	d1e0      	bne.n	80050fa <_free_r+0x22>
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4408      	add	r0, r1
 800513e:	6010      	str	r0, [r2, #0]
 8005140:	6053      	str	r3, [r2, #4]
 8005142:	e7da      	b.n	80050fa <_free_r+0x22>
 8005144:	d902      	bls.n	800514c <_free_r+0x74>
 8005146:	230c      	movs	r3, #12
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	e7d6      	b.n	80050fa <_free_r+0x22>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	1821      	adds	r1, r4, r0
 8005150:	428b      	cmp	r3, r1
 8005152:	bf01      	itttt	eq
 8005154:	6819      	ldreq	r1, [r3, #0]
 8005156:	685b      	ldreq	r3, [r3, #4]
 8005158:	1809      	addeq	r1, r1, r0
 800515a:	6021      	streq	r1, [r4, #0]
 800515c:	6063      	str	r3, [r4, #4]
 800515e:	6054      	str	r4, [r2, #4]
 8005160:	e7cb      	b.n	80050fa <_free_r+0x22>
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20000348 	.word	0x20000348

08005168 <sbrk_aligned>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4e0e      	ldr	r6, [pc, #56]	; (80051a4 <sbrk_aligned+0x3c>)
 800516c:	460c      	mov	r4, r1
 800516e:	6831      	ldr	r1, [r6, #0]
 8005170:	4605      	mov	r5, r0
 8005172:	b911      	cbnz	r1, 800517a <sbrk_aligned+0x12>
 8005174:	f000 fcba 	bl	8005aec <_sbrk_r>
 8005178:	6030      	str	r0, [r6, #0]
 800517a:	4621      	mov	r1, r4
 800517c:	4628      	mov	r0, r5
 800517e:	f000 fcb5 	bl	8005aec <_sbrk_r>
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	d00a      	beq.n	800519c <sbrk_aligned+0x34>
 8005186:	1cc4      	adds	r4, r0, #3
 8005188:	f024 0403 	bic.w	r4, r4, #3
 800518c:	42a0      	cmp	r0, r4
 800518e:	d007      	beq.n	80051a0 <sbrk_aligned+0x38>
 8005190:	1a21      	subs	r1, r4, r0
 8005192:	4628      	mov	r0, r5
 8005194:	f000 fcaa 	bl	8005aec <_sbrk_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d101      	bne.n	80051a0 <sbrk_aligned+0x38>
 800519c:	f04f 34ff 	mov.w	r4, #4294967295
 80051a0:	4620      	mov	r0, r4
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	2000034c 	.word	0x2000034c

080051a8 <_malloc_r>:
 80051a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ac:	1ccd      	adds	r5, r1, #3
 80051ae:	f025 0503 	bic.w	r5, r5, #3
 80051b2:	3508      	adds	r5, #8
 80051b4:	2d0c      	cmp	r5, #12
 80051b6:	bf38      	it	cc
 80051b8:	250c      	movcc	r5, #12
 80051ba:	2d00      	cmp	r5, #0
 80051bc:	4607      	mov	r7, r0
 80051be:	db01      	blt.n	80051c4 <_malloc_r+0x1c>
 80051c0:	42a9      	cmp	r1, r5
 80051c2:	d905      	bls.n	80051d0 <_malloc_r+0x28>
 80051c4:	230c      	movs	r3, #12
 80051c6:	2600      	movs	r6, #0
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4630      	mov	r0, r6
 80051cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052a4 <_malloc_r+0xfc>
 80051d4:	f000 f868 	bl	80052a8 <__malloc_lock>
 80051d8:	f8d8 3000 	ldr.w	r3, [r8]
 80051dc:	461c      	mov	r4, r3
 80051de:	bb5c      	cbnz	r4, 8005238 <_malloc_r+0x90>
 80051e0:	4629      	mov	r1, r5
 80051e2:	4638      	mov	r0, r7
 80051e4:	f7ff ffc0 	bl	8005168 <sbrk_aligned>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	4604      	mov	r4, r0
 80051ec:	d155      	bne.n	800529a <_malloc_r+0xf2>
 80051ee:	f8d8 4000 	ldr.w	r4, [r8]
 80051f2:	4626      	mov	r6, r4
 80051f4:	2e00      	cmp	r6, #0
 80051f6:	d145      	bne.n	8005284 <_malloc_r+0xdc>
 80051f8:	2c00      	cmp	r4, #0
 80051fa:	d048      	beq.n	800528e <_malloc_r+0xe6>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	4631      	mov	r1, r6
 8005200:	4638      	mov	r0, r7
 8005202:	eb04 0903 	add.w	r9, r4, r3
 8005206:	f000 fc71 	bl	8005aec <_sbrk_r>
 800520a:	4581      	cmp	r9, r0
 800520c:	d13f      	bne.n	800528e <_malloc_r+0xe6>
 800520e:	6821      	ldr	r1, [r4, #0]
 8005210:	4638      	mov	r0, r7
 8005212:	1a6d      	subs	r5, r5, r1
 8005214:	4629      	mov	r1, r5
 8005216:	f7ff ffa7 	bl	8005168 <sbrk_aligned>
 800521a:	3001      	adds	r0, #1
 800521c:	d037      	beq.n	800528e <_malloc_r+0xe6>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	442b      	add	r3, r5
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	f8d8 3000 	ldr.w	r3, [r8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d038      	beq.n	800529e <_malloc_r+0xf6>
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	42a2      	cmp	r2, r4
 8005230:	d12b      	bne.n	800528a <_malloc_r+0xe2>
 8005232:	2200      	movs	r2, #0
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	e00f      	b.n	8005258 <_malloc_r+0xb0>
 8005238:	6822      	ldr	r2, [r4, #0]
 800523a:	1b52      	subs	r2, r2, r5
 800523c:	d41f      	bmi.n	800527e <_malloc_r+0xd6>
 800523e:	2a0b      	cmp	r2, #11
 8005240:	d917      	bls.n	8005272 <_malloc_r+0xca>
 8005242:	1961      	adds	r1, r4, r5
 8005244:	42a3      	cmp	r3, r4
 8005246:	6025      	str	r5, [r4, #0]
 8005248:	bf18      	it	ne
 800524a:	6059      	strne	r1, [r3, #4]
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	bf08      	it	eq
 8005250:	f8c8 1000 	streq.w	r1, [r8]
 8005254:	5162      	str	r2, [r4, r5]
 8005256:	604b      	str	r3, [r1, #4]
 8005258:	4638      	mov	r0, r7
 800525a:	f104 060b 	add.w	r6, r4, #11
 800525e:	f000 f829 	bl	80052b4 <__malloc_unlock>
 8005262:	f026 0607 	bic.w	r6, r6, #7
 8005266:	1d23      	adds	r3, r4, #4
 8005268:	1af2      	subs	r2, r6, r3
 800526a:	d0ae      	beq.n	80051ca <_malloc_r+0x22>
 800526c:	1b9b      	subs	r3, r3, r6
 800526e:	50a3      	str	r3, [r4, r2]
 8005270:	e7ab      	b.n	80051ca <_malloc_r+0x22>
 8005272:	42a3      	cmp	r3, r4
 8005274:	6862      	ldr	r2, [r4, #4]
 8005276:	d1dd      	bne.n	8005234 <_malloc_r+0x8c>
 8005278:	f8c8 2000 	str.w	r2, [r8]
 800527c:	e7ec      	b.n	8005258 <_malloc_r+0xb0>
 800527e:	4623      	mov	r3, r4
 8005280:	6864      	ldr	r4, [r4, #4]
 8005282:	e7ac      	b.n	80051de <_malloc_r+0x36>
 8005284:	4634      	mov	r4, r6
 8005286:	6876      	ldr	r6, [r6, #4]
 8005288:	e7b4      	b.n	80051f4 <_malloc_r+0x4c>
 800528a:	4613      	mov	r3, r2
 800528c:	e7cc      	b.n	8005228 <_malloc_r+0x80>
 800528e:	230c      	movs	r3, #12
 8005290:	4638      	mov	r0, r7
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	f000 f80e 	bl	80052b4 <__malloc_unlock>
 8005298:	e797      	b.n	80051ca <_malloc_r+0x22>
 800529a:	6025      	str	r5, [r4, #0]
 800529c:	e7dc      	b.n	8005258 <_malloc_r+0xb0>
 800529e:	605b      	str	r3, [r3, #4]
 80052a0:	deff      	udf	#255	; 0xff
 80052a2:	bf00      	nop
 80052a4:	20000348 	.word	0x20000348

080052a8 <__malloc_lock>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__malloc_lock+0x8>)
 80052aa:	f7ff bf12 	b.w	80050d2 <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000344 	.word	0x20000344

080052b4 <__malloc_unlock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__malloc_unlock+0x8>)
 80052b6:	f7ff bf0d 	b.w	80050d4 <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000344 	.word	0x20000344

080052c0 <__sfputc_r>:
 80052c0:	6893      	ldr	r3, [r2, #8]
 80052c2:	b410      	push	{r4}
 80052c4:	3b01      	subs	r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	6093      	str	r3, [r2, #8]
 80052ca:	da07      	bge.n	80052dc <__sfputc_r+0x1c>
 80052cc:	6994      	ldr	r4, [r2, #24]
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	db01      	blt.n	80052d6 <__sfputc_r+0x16>
 80052d2:	290a      	cmp	r1, #10
 80052d4:	d102      	bne.n	80052dc <__sfputc_r+0x1c>
 80052d6:	bc10      	pop	{r4}
 80052d8:	f000 bb72 	b.w	80059c0 <__swbuf_r>
 80052dc:	6813      	ldr	r3, [r2, #0]
 80052de:	1c58      	adds	r0, r3, #1
 80052e0:	6010      	str	r0, [r2, #0]
 80052e2:	7019      	strb	r1, [r3, #0]
 80052e4:	4608      	mov	r0, r1
 80052e6:	bc10      	pop	{r4}
 80052e8:	4770      	bx	lr

080052ea <__sfputs_r>:
 80052ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ec:	4606      	mov	r6, r0
 80052ee:	460f      	mov	r7, r1
 80052f0:	4614      	mov	r4, r2
 80052f2:	18d5      	adds	r5, r2, r3
 80052f4:	42ac      	cmp	r4, r5
 80052f6:	d101      	bne.n	80052fc <__sfputs_r+0x12>
 80052f8:	2000      	movs	r0, #0
 80052fa:	e007      	b.n	800530c <__sfputs_r+0x22>
 80052fc:	463a      	mov	r2, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005304:	f7ff ffdc 	bl	80052c0 <__sfputc_r>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d1f3      	bne.n	80052f4 <__sfputs_r+0xa>
 800530c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005310 <_vfiprintf_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	460d      	mov	r5, r1
 8005316:	4614      	mov	r4, r2
 8005318:	4698      	mov	r8, r3
 800531a:	4606      	mov	r6, r0
 800531c:	b09d      	sub	sp, #116	; 0x74
 800531e:	b118      	cbz	r0, 8005328 <_vfiprintf_r+0x18>
 8005320:	6a03      	ldr	r3, [r0, #32]
 8005322:	b90b      	cbnz	r3, 8005328 <_vfiprintf_r+0x18>
 8005324:	f7ff fdd0 	bl	8004ec8 <__sinit>
 8005328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	d405      	bmi.n	800533a <_vfiprintf_r+0x2a>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	059a      	lsls	r2, r3, #22
 8005332:	d402      	bmi.n	800533a <_vfiprintf_r+0x2a>
 8005334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005336:	f7ff fecc 	bl	80050d2 <__retarget_lock_acquire_recursive>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	071b      	lsls	r3, r3, #28
 800533e:	d501      	bpl.n	8005344 <_vfiprintf_r+0x34>
 8005340:	692b      	ldr	r3, [r5, #16]
 8005342:	b99b      	cbnz	r3, 800536c <_vfiprintf_r+0x5c>
 8005344:	4629      	mov	r1, r5
 8005346:	4630      	mov	r0, r6
 8005348:	f000 fb78 	bl	8005a3c <__swsetup_r>
 800534c:	b170      	cbz	r0, 800536c <_vfiprintf_r+0x5c>
 800534e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005350:	07dc      	lsls	r4, r3, #31
 8005352:	d504      	bpl.n	800535e <_vfiprintf_r+0x4e>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	b01d      	add	sp, #116	; 0x74
 800535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	0598      	lsls	r0, r3, #22
 8005362:	d4f7      	bmi.n	8005354 <_vfiprintf_r+0x44>
 8005364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005366:	f7ff feb5 	bl	80050d4 <__retarget_lock_release_recursive>
 800536a:	e7f3      	b.n	8005354 <_vfiprintf_r+0x44>
 800536c:	2300      	movs	r3, #0
 800536e:	9309      	str	r3, [sp, #36]	; 0x24
 8005370:	2320      	movs	r3, #32
 8005372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005376:	2330      	movs	r3, #48	; 0x30
 8005378:	f04f 0901 	mov.w	r9, #1
 800537c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005380:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005530 <_vfiprintf_r+0x220>
 8005384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005388:	4623      	mov	r3, r4
 800538a:	469a      	mov	sl, r3
 800538c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005390:	b10a      	cbz	r2, 8005396 <_vfiprintf_r+0x86>
 8005392:	2a25      	cmp	r2, #37	; 0x25
 8005394:	d1f9      	bne.n	800538a <_vfiprintf_r+0x7a>
 8005396:	ebba 0b04 	subs.w	fp, sl, r4
 800539a:	d00b      	beq.n	80053b4 <_vfiprintf_r+0xa4>
 800539c:	465b      	mov	r3, fp
 800539e:	4622      	mov	r2, r4
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffa1 	bl	80052ea <__sfputs_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	f000 80a9 	beq.w	8005500 <_vfiprintf_r+0x1f0>
 80053ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b0:	445a      	add	r2, fp
 80053b2:	9209      	str	r2, [sp, #36]	; 0x24
 80053b4:	f89a 3000 	ldrb.w	r3, [sl]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80a1 	beq.w	8005500 <_vfiprintf_r+0x1f0>
 80053be:	2300      	movs	r3, #0
 80053c0:	f04f 32ff 	mov.w	r2, #4294967295
 80053c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c8:	f10a 0a01 	add.w	sl, sl, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d4:	931a      	str	r3, [sp, #104]	; 0x68
 80053d6:	4654      	mov	r4, sl
 80053d8:	2205      	movs	r2, #5
 80053da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053de:	4854      	ldr	r0, [pc, #336]	; (8005530 <_vfiprintf_r+0x220>)
 80053e0:	f000 fb94 	bl	8005b0c <memchr>
 80053e4:	9a04      	ldr	r2, [sp, #16]
 80053e6:	b9d8      	cbnz	r0, 8005420 <_vfiprintf_r+0x110>
 80053e8:	06d1      	lsls	r1, r2, #27
 80053ea:	bf44      	itt	mi
 80053ec:	2320      	movmi	r3, #32
 80053ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f2:	0713      	lsls	r3, r2, #28
 80053f4:	bf44      	itt	mi
 80053f6:	232b      	movmi	r3, #43	; 0x2b
 80053f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005400:	2b2a      	cmp	r3, #42	; 0x2a
 8005402:	d015      	beq.n	8005430 <_vfiprintf_r+0x120>
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	9a07      	ldr	r2, [sp, #28]
 800540e:	4621      	mov	r1, r4
 8005410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005414:	3b30      	subs	r3, #48	; 0x30
 8005416:	2b09      	cmp	r3, #9
 8005418:	d94d      	bls.n	80054b6 <_vfiprintf_r+0x1a6>
 800541a:	b1b0      	cbz	r0, 800544a <_vfiprintf_r+0x13a>
 800541c:	9207      	str	r2, [sp, #28]
 800541e:	e014      	b.n	800544a <_vfiprintf_r+0x13a>
 8005420:	eba0 0308 	sub.w	r3, r0, r8
 8005424:	fa09 f303 	lsl.w	r3, r9, r3
 8005428:	4313      	orrs	r3, r2
 800542a:	46a2      	mov	sl, r4
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	e7d2      	b.n	80053d6 <_vfiprintf_r+0xc6>
 8005430:	9b03      	ldr	r3, [sp, #12]
 8005432:	1d19      	adds	r1, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	9103      	str	r1, [sp, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfbb      	ittet	lt
 800543c:	425b      	neglt	r3, r3
 800543e:	f042 0202 	orrlt.w	r2, r2, #2
 8005442:	9307      	strge	r3, [sp, #28]
 8005444:	9307      	strlt	r3, [sp, #28]
 8005446:	bfb8      	it	lt
 8005448:	9204      	strlt	r2, [sp, #16]
 800544a:	7823      	ldrb	r3, [r4, #0]
 800544c:	2b2e      	cmp	r3, #46	; 0x2e
 800544e:	d10c      	bne.n	800546a <_vfiprintf_r+0x15a>
 8005450:	7863      	ldrb	r3, [r4, #1]
 8005452:	2b2a      	cmp	r3, #42	; 0x2a
 8005454:	d134      	bne.n	80054c0 <_vfiprintf_r+0x1b0>
 8005456:	9b03      	ldr	r3, [sp, #12]
 8005458:	3402      	adds	r4, #2
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfb8      	it	lt
 8005464:	f04f 33ff 	movlt.w	r3, #4294967295
 8005468:	9305      	str	r3, [sp, #20]
 800546a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005534 <_vfiprintf_r+0x224>
 800546e:	2203      	movs	r2, #3
 8005470:	4650      	mov	r0, sl
 8005472:	7821      	ldrb	r1, [r4, #0]
 8005474:	f000 fb4a 	bl	8005b0c <memchr>
 8005478:	b138      	cbz	r0, 800548a <_vfiprintf_r+0x17a>
 800547a:	2240      	movs	r2, #64	; 0x40
 800547c:	9b04      	ldr	r3, [sp, #16]
 800547e:	eba0 000a 	sub.w	r0, r0, sl
 8005482:	4082      	lsls	r2, r0
 8005484:	4313      	orrs	r3, r2
 8005486:	3401      	adds	r4, #1
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548e:	2206      	movs	r2, #6
 8005490:	4829      	ldr	r0, [pc, #164]	; (8005538 <_vfiprintf_r+0x228>)
 8005492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005496:	f000 fb39 	bl	8005b0c <memchr>
 800549a:	2800      	cmp	r0, #0
 800549c:	d03f      	beq.n	800551e <_vfiprintf_r+0x20e>
 800549e:	4b27      	ldr	r3, [pc, #156]	; (800553c <_vfiprintf_r+0x22c>)
 80054a0:	bb1b      	cbnz	r3, 80054ea <_vfiprintf_r+0x1da>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	3307      	adds	r3, #7
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	3308      	adds	r3, #8
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b0:	443b      	add	r3, r7
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
 80054b4:	e768      	b.n	8005388 <_vfiprintf_r+0x78>
 80054b6:	460c      	mov	r4, r1
 80054b8:	2001      	movs	r0, #1
 80054ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80054be:	e7a6      	b.n	800540e <_vfiprintf_r+0xfe>
 80054c0:	2300      	movs	r3, #0
 80054c2:	f04f 0c0a 	mov.w	ip, #10
 80054c6:	4619      	mov	r1, r3
 80054c8:	3401      	adds	r4, #1
 80054ca:	9305      	str	r3, [sp, #20]
 80054cc:	4620      	mov	r0, r4
 80054ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d2:	3a30      	subs	r2, #48	; 0x30
 80054d4:	2a09      	cmp	r2, #9
 80054d6:	d903      	bls.n	80054e0 <_vfiprintf_r+0x1d0>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0c6      	beq.n	800546a <_vfiprintf_r+0x15a>
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	e7c4      	b.n	800546a <_vfiprintf_r+0x15a>
 80054e0:	4604      	mov	r4, r0
 80054e2:	2301      	movs	r3, #1
 80054e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e8:	e7f0      	b.n	80054cc <_vfiprintf_r+0x1bc>
 80054ea:	ab03      	add	r3, sp, #12
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	462a      	mov	r2, r5
 80054f0:	4630      	mov	r0, r6
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <_vfiprintf_r+0x230>)
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	f3af 8000 	nop.w
 80054fa:	4607      	mov	r7, r0
 80054fc:	1c78      	adds	r0, r7, #1
 80054fe:	d1d6      	bne.n	80054ae <_vfiprintf_r+0x19e>
 8005500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	d405      	bmi.n	8005512 <_vfiprintf_r+0x202>
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	059a      	lsls	r2, r3, #22
 800550a:	d402      	bmi.n	8005512 <_vfiprintf_r+0x202>
 800550c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550e:	f7ff fde1 	bl	80050d4 <__retarget_lock_release_recursive>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	065b      	lsls	r3, r3, #25
 8005516:	f53f af1d 	bmi.w	8005354 <_vfiprintf_r+0x44>
 800551a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800551c:	e71c      	b.n	8005358 <_vfiprintf_r+0x48>
 800551e:	ab03      	add	r3, sp, #12
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	462a      	mov	r2, r5
 8005524:	4630      	mov	r0, r6
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_vfiprintf_r+0x230>)
 8005528:	a904      	add	r1, sp, #16
 800552a:	f000 f87d 	bl	8005628 <_printf_i>
 800552e:	e7e4      	b.n	80054fa <_vfiprintf_r+0x1ea>
 8005530:	08005cd6 	.word	0x08005cd6
 8005534:	08005cdc 	.word	0x08005cdc
 8005538:	08005ce0 	.word	0x08005ce0
 800553c:	00000000 	.word	0x00000000
 8005540:	080052eb 	.word	0x080052eb

08005544 <_printf_common>:
 8005544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	4616      	mov	r6, r2
 800554a:	4699      	mov	r9, r3
 800554c:	688a      	ldr	r2, [r1, #8]
 800554e:	690b      	ldr	r3, [r1, #16]
 8005550:	4607      	mov	r7, r0
 8005552:	4293      	cmp	r3, r2
 8005554:	bfb8      	it	lt
 8005556:	4613      	movlt	r3, r2
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555e:	460c      	mov	r4, r1
 8005560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005564:	b10a      	cbz	r2, 800556a <_printf_common+0x26>
 8005566:	3301      	adds	r3, #1
 8005568:	6033      	str	r3, [r6, #0]
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	0699      	lsls	r1, r3, #26
 800556e:	bf42      	ittt	mi
 8005570:	6833      	ldrmi	r3, [r6, #0]
 8005572:	3302      	addmi	r3, #2
 8005574:	6033      	strmi	r3, [r6, #0]
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	f015 0506 	ands.w	r5, r5, #6
 800557c:	d106      	bne.n	800558c <_printf_common+0x48>
 800557e:	f104 0a19 	add.w	sl, r4, #25
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	6832      	ldr	r2, [r6, #0]
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	42ab      	cmp	r3, r5
 800558a:	dc2b      	bgt.n	80055e4 <_printf_common+0xa0>
 800558c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005590:	1e13      	subs	r3, r2, #0
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	2301      	movne	r3, #1
 8005598:	0692      	lsls	r2, r2, #26
 800559a:	d430      	bmi.n	80055fe <_printf_common+0xba>
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055a4:	47c0      	blx	r8
 80055a6:	3001      	adds	r0, #1
 80055a8:	d023      	beq.n	80055f2 <_printf_common+0xae>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	f003 0306 	and.w	r3, r3, #6
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	bf14      	ite	ne
 80055b6:	2500      	movne	r5, #0
 80055b8:	6833      	ldreq	r3, [r6, #0]
 80055ba:	f04f 0600 	mov.w	r6, #0
 80055be:	bf08      	it	eq
 80055c0:	68e5      	ldreq	r5, [r4, #12]
 80055c2:	f104 041a 	add.w	r4, r4, #26
 80055c6:	bf08      	it	eq
 80055c8:	1aed      	subeq	r5, r5, r3
 80055ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055ce:	bf08      	it	eq
 80055d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfc4      	itt	gt
 80055d8:	1a9b      	subgt	r3, r3, r2
 80055da:	18ed      	addgt	r5, r5, r3
 80055dc:	42b5      	cmp	r5, r6
 80055de:	d11a      	bne.n	8005616 <_printf_common+0xd2>
 80055e0:	2000      	movs	r0, #0
 80055e2:	e008      	b.n	80055f6 <_printf_common+0xb2>
 80055e4:	2301      	movs	r3, #1
 80055e6:	4652      	mov	r2, sl
 80055e8:	4649      	mov	r1, r9
 80055ea:	4638      	mov	r0, r7
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d103      	bne.n	80055fa <_printf_common+0xb6>
 80055f2:	f04f 30ff 	mov.w	r0, #4294967295
 80055f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fa:	3501      	adds	r5, #1
 80055fc:	e7c1      	b.n	8005582 <_printf_common+0x3e>
 80055fe:	2030      	movs	r0, #48	; 0x30
 8005600:	18e1      	adds	r1, r4, r3
 8005602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800560c:	4422      	add	r2, r4
 800560e:	3302      	adds	r3, #2
 8005610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005614:	e7c2      	b.n	800559c <_printf_common+0x58>
 8005616:	2301      	movs	r3, #1
 8005618:	4622      	mov	r2, r4
 800561a:	4649      	mov	r1, r9
 800561c:	4638      	mov	r0, r7
 800561e:	47c0      	blx	r8
 8005620:	3001      	adds	r0, #1
 8005622:	d0e6      	beq.n	80055f2 <_printf_common+0xae>
 8005624:	3601      	adds	r6, #1
 8005626:	e7d9      	b.n	80055dc <_printf_common+0x98>

08005628 <_printf_i>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	7e0f      	ldrb	r7, [r1, #24]
 800562e:	4691      	mov	r9, r2
 8005630:	2f78      	cmp	r7, #120	; 0x78
 8005632:	4680      	mov	r8, r0
 8005634:	460c      	mov	r4, r1
 8005636:	469a      	mov	sl, r3
 8005638:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800563a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800563e:	d807      	bhi.n	8005650 <_printf_i+0x28>
 8005640:	2f62      	cmp	r7, #98	; 0x62
 8005642:	d80a      	bhi.n	800565a <_printf_i+0x32>
 8005644:	2f00      	cmp	r7, #0
 8005646:	f000 80d5 	beq.w	80057f4 <_printf_i+0x1cc>
 800564a:	2f58      	cmp	r7, #88	; 0x58
 800564c:	f000 80c1 	beq.w	80057d2 <_printf_i+0x1aa>
 8005650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005658:	e03a      	b.n	80056d0 <_printf_i+0xa8>
 800565a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800565e:	2b15      	cmp	r3, #21
 8005660:	d8f6      	bhi.n	8005650 <_printf_i+0x28>
 8005662:	a101      	add	r1, pc, #4	; (adr r1, 8005668 <_printf_i+0x40>)
 8005664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056d5 	.word	0x080056d5
 8005670:	08005651 	.word	0x08005651
 8005674:	08005651 	.word	0x08005651
 8005678:	08005651 	.word	0x08005651
 800567c:	08005651 	.word	0x08005651
 8005680:	080056d5 	.word	0x080056d5
 8005684:	08005651 	.word	0x08005651
 8005688:	08005651 	.word	0x08005651
 800568c:	08005651 	.word	0x08005651
 8005690:	08005651 	.word	0x08005651
 8005694:	080057db 	.word	0x080057db
 8005698:	08005701 	.word	0x08005701
 800569c:	08005795 	.word	0x08005795
 80056a0:	08005651 	.word	0x08005651
 80056a4:	08005651 	.word	0x08005651
 80056a8:	080057fd 	.word	0x080057fd
 80056ac:	08005651 	.word	0x08005651
 80056b0:	08005701 	.word	0x08005701
 80056b4:	08005651 	.word	0x08005651
 80056b8:	08005651 	.word	0x08005651
 80056bc:	0800579d 	.word	0x0800579d
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	1d1a      	adds	r2, r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	602a      	str	r2, [r5, #0]
 80056c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0a0      	b.n	8005816 <_printf_i+0x1ee>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	0607      	lsls	r7, r0, #24
 80056da:	f103 0104 	add.w	r1, r3, #4
 80056de:	6029      	str	r1, [r5, #0]
 80056e0:	d501      	bpl.n	80056e6 <_printf_i+0xbe>
 80056e2:	681e      	ldr	r6, [r3, #0]
 80056e4:	e003      	b.n	80056ee <_printf_i+0xc6>
 80056e6:	0646      	lsls	r6, r0, #25
 80056e8:	d5fb      	bpl.n	80056e2 <_printf_i+0xba>
 80056ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056ee:	2e00      	cmp	r6, #0
 80056f0:	da03      	bge.n	80056fa <_printf_i+0xd2>
 80056f2:	232d      	movs	r3, #45	; 0x2d
 80056f4:	4276      	negs	r6, r6
 80056f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fa:	230a      	movs	r3, #10
 80056fc:	4859      	ldr	r0, [pc, #356]	; (8005864 <_printf_i+0x23c>)
 80056fe:	e012      	b.n	8005726 <_printf_i+0xfe>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	1d19      	adds	r1, r3, #4
 8005706:	6029      	str	r1, [r5, #0]
 8005708:	0605      	lsls	r5, r0, #24
 800570a:	d501      	bpl.n	8005710 <_printf_i+0xe8>
 800570c:	681e      	ldr	r6, [r3, #0]
 800570e:	e002      	b.n	8005716 <_printf_i+0xee>
 8005710:	0641      	lsls	r1, r0, #25
 8005712:	d5fb      	bpl.n	800570c <_printf_i+0xe4>
 8005714:	881e      	ldrh	r6, [r3, #0]
 8005716:	2f6f      	cmp	r7, #111	; 0x6f
 8005718:	bf0c      	ite	eq
 800571a:	2308      	moveq	r3, #8
 800571c:	230a      	movne	r3, #10
 800571e:	4851      	ldr	r0, [pc, #324]	; (8005864 <_printf_i+0x23c>)
 8005720:	2100      	movs	r1, #0
 8005722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005726:	6865      	ldr	r5, [r4, #4]
 8005728:	2d00      	cmp	r5, #0
 800572a:	bfa8      	it	ge
 800572c:	6821      	ldrge	r1, [r4, #0]
 800572e:	60a5      	str	r5, [r4, #8]
 8005730:	bfa4      	itt	ge
 8005732:	f021 0104 	bicge.w	r1, r1, #4
 8005736:	6021      	strge	r1, [r4, #0]
 8005738:	b90e      	cbnz	r6, 800573e <_printf_i+0x116>
 800573a:	2d00      	cmp	r5, #0
 800573c:	d04b      	beq.n	80057d6 <_printf_i+0x1ae>
 800573e:	4615      	mov	r5, r2
 8005740:	fbb6 f1f3 	udiv	r1, r6, r3
 8005744:	fb03 6711 	mls	r7, r3, r1, r6
 8005748:	5dc7      	ldrb	r7, [r0, r7]
 800574a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800574e:	4637      	mov	r7, r6
 8005750:	42bb      	cmp	r3, r7
 8005752:	460e      	mov	r6, r1
 8005754:	d9f4      	bls.n	8005740 <_printf_i+0x118>
 8005756:	2b08      	cmp	r3, #8
 8005758:	d10b      	bne.n	8005772 <_printf_i+0x14a>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	07de      	lsls	r6, r3, #31
 800575e:	d508      	bpl.n	8005772 <_printf_i+0x14a>
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	6861      	ldr	r1, [r4, #4]
 8005764:	4299      	cmp	r1, r3
 8005766:	bfde      	ittt	le
 8005768:	2330      	movle	r3, #48	; 0x30
 800576a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800576e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005772:	1b52      	subs	r2, r2, r5
 8005774:	6122      	str	r2, [r4, #16]
 8005776:	464b      	mov	r3, r9
 8005778:	4621      	mov	r1, r4
 800577a:	4640      	mov	r0, r8
 800577c:	f8cd a000 	str.w	sl, [sp]
 8005780:	aa03      	add	r2, sp, #12
 8005782:	f7ff fedf 	bl	8005544 <_printf_common>
 8005786:	3001      	adds	r0, #1
 8005788:	d14a      	bne.n	8005820 <_printf_i+0x1f8>
 800578a:	f04f 30ff 	mov.w	r0, #4294967295
 800578e:	b004      	add	sp, #16
 8005790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	f043 0320 	orr.w	r3, r3, #32
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	2778      	movs	r7, #120	; 0x78
 800579e:	4832      	ldr	r0, [pc, #200]	; (8005868 <_printf_i+0x240>)
 80057a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	6829      	ldr	r1, [r5, #0]
 80057a8:	061f      	lsls	r7, r3, #24
 80057aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80057ae:	d402      	bmi.n	80057b6 <_printf_i+0x18e>
 80057b0:	065f      	lsls	r7, r3, #25
 80057b2:	bf48      	it	mi
 80057b4:	b2b6      	uxthmi	r6, r6
 80057b6:	07df      	lsls	r7, r3, #31
 80057b8:	bf48      	it	mi
 80057ba:	f043 0320 	orrmi.w	r3, r3, #32
 80057be:	6029      	str	r1, [r5, #0]
 80057c0:	bf48      	it	mi
 80057c2:	6023      	strmi	r3, [r4, #0]
 80057c4:	b91e      	cbnz	r6, 80057ce <_printf_i+0x1a6>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	f023 0320 	bic.w	r3, r3, #32
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	2310      	movs	r3, #16
 80057d0:	e7a6      	b.n	8005720 <_printf_i+0xf8>
 80057d2:	4824      	ldr	r0, [pc, #144]	; (8005864 <_printf_i+0x23c>)
 80057d4:	e7e4      	b.n	80057a0 <_printf_i+0x178>
 80057d6:	4615      	mov	r5, r2
 80057d8:	e7bd      	b.n	8005756 <_printf_i+0x12e>
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	6826      	ldr	r6, [r4, #0]
 80057de:	1d18      	adds	r0, r3, #4
 80057e0:	6961      	ldr	r1, [r4, #20]
 80057e2:	6028      	str	r0, [r5, #0]
 80057e4:	0635      	lsls	r5, r6, #24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	d501      	bpl.n	80057ee <_printf_i+0x1c6>
 80057ea:	6019      	str	r1, [r3, #0]
 80057ec:	e002      	b.n	80057f4 <_printf_i+0x1cc>
 80057ee:	0670      	lsls	r0, r6, #25
 80057f0:	d5fb      	bpl.n	80057ea <_printf_i+0x1c2>
 80057f2:	8019      	strh	r1, [r3, #0]
 80057f4:	2300      	movs	r3, #0
 80057f6:	4615      	mov	r5, r2
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	e7bc      	b.n	8005776 <_printf_i+0x14e>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	2100      	movs	r1, #0
 8005800:	1d1a      	adds	r2, r3, #4
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	4628      	mov	r0, r5
 800580a:	f000 f97f 	bl	8005b0c <memchr>
 800580e:	b108      	cbz	r0, 8005814 <_printf_i+0x1ec>
 8005810:	1b40      	subs	r0, r0, r5
 8005812:	6060      	str	r0, [r4, #4]
 8005814:	6863      	ldr	r3, [r4, #4]
 8005816:	6123      	str	r3, [r4, #16]
 8005818:	2300      	movs	r3, #0
 800581a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581e:	e7aa      	b.n	8005776 <_printf_i+0x14e>
 8005820:	462a      	mov	r2, r5
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	47d0      	blx	sl
 800582a:	3001      	adds	r0, #1
 800582c:	d0ad      	beq.n	800578a <_printf_i+0x162>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	079b      	lsls	r3, r3, #30
 8005832:	d413      	bmi.n	800585c <_printf_i+0x234>
 8005834:	68e0      	ldr	r0, [r4, #12]
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	4298      	cmp	r0, r3
 800583a:	bfb8      	it	lt
 800583c:	4618      	movlt	r0, r3
 800583e:	e7a6      	b.n	800578e <_printf_i+0x166>
 8005840:	2301      	movs	r3, #1
 8005842:	4632      	mov	r2, r6
 8005844:	4649      	mov	r1, r9
 8005846:	4640      	mov	r0, r8
 8005848:	47d0      	blx	sl
 800584a:	3001      	adds	r0, #1
 800584c:	d09d      	beq.n	800578a <_printf_i+0x162>
 800584e:	3501      	adds	r5, #1
 8005850:	68e3      	ldr	r3, [r4, #12]
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	1a5b      	subs	r3, r3, r1
 8005856:	42ab      	cmp	r3, r5
 8005858:	dcf2      	bgt.n	8005840 <_printf_i+0x218>
 800585a:	e7eb      	b.n	8005834 <_printf_i+0x20c>
 800585c:	2500      	movs	r5, #0
 800585e:	f104 0619 	add.w	r6, r4, #25
 8005862:	e7f5      	b.n	8005850 <_printf_i+0x228>
 8005864:	08005ce7 	.word	0x08005ce7
 8005868:	08005cf8 	.word	0x08005cf8

0800586c <__sflush_r>:
 800586c:	898a      	ldrh	r2, [r1, #12]
 800586e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005870:	4605      	mov	r5, r0
 8005872:	0710      	lsls	r0, r2, #28
 8005874:	460c      	mov	r4, r1
 8005876:	d457      	bmi.n	8005928 <__sflush_r+0xbc>
 8005878:	684b      	ldr	r3, [r1, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	dc04      	bgt.n	8005888 <__sflush_r+0x1c>
 800587e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	dc01      	bgt.n	8005888 <__sflush_r+0x1c>
 8005884:	2000      	movs	r0, #0
 8005886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800588a:	2e00      	cmp	r6, #0
 800588c:	d0fa      	beq.n	8005884 <__sflush_r+0x18>
 800588e:	2300      	movs	r3, #0
 8005890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005894:	682f      	ldr	r7, [r5, #0]
 8005896:	6a21      	ldr	r1, [r4, #32]
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	d032      	beq.n	8005902 <__sflush_r+0x96>
 800589c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	075a      	lsls	r2, r3, #29
 80058a2:	d505      	bpl.n	80058b0 <__sflush_r+0x44>
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	1ac0      	subs	r0, r0, r3
 80058a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058aa:	b10b      	cbz	r3, 80058b0 <__sflush_r+0x44>
 80058ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ae:	1ac0      	subs	r0, r0, r3
 80058b0:	2300      	movs	r3, #0
 80058b2:	4602      	mov	r2, r0
 80058b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058b6:	4628      	mov	r0, r5
 80058b8:	6a21      	ldr	r1, [r4, #32]
 80058ba:	47b0      	blx	r6
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	d106      	bne.n	80058d0 <__sflush_r+0x64>
 80058c2:	6829      	ldr	r1, [r5, #0]
 80058c4:	291d      	cmp	r1, #29
 80058c6:	d82b      	bhi.n	8005920 <__sflush_r+0xb4>
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <__sflush_r+0x100>)
 80058ca:	410a      	asrs	r2, r1
 80058cc:	07d6      	lsls	r6, r2, #31
 80058ce:	d427      	bmi.n	8005920 <__sflush_r+0xb4>
 80058d0:	2200      	movs	r2, #0
 80058d2:	6062      	str	r2, [r4, #4]
 80058d4:	6922      	ldr	r2, [r4, #16]
 80058d6:	04d9      	lsls	r1, r3, #19
 80058d8:	6022      	str	r2, [r4, #0]
 80058da:	d504      	bpl.n	80058e6 <__sflush_r+0x7a>
 80058dc:	1c42      	adds	r2, r0, #1
 80058de:	d101      	bne.n	80058e4 <__sflush_r+0x78>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b903      	cbnz	r3, 80058e6 <__sflush_r+0x7a>
 80058e4:	6560      	str	r0, [r4, #84]	; 0x54
 80058e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e8:	602f      	str	r7, [r5, #0]
 80058ea:	2900      	cmp	r1, #0
 80058ec:	d0ca      	beq.n	8005884 <__sflush_r+0x18>
 80058ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d002      	beq.n	80058fc <__sflush_r+0x90>
 80058f6:	4628      	mov	r0, r5
 80058f8:	f7ff fbee 	bl	80050d8 <_free_r>
 80058fc:	2000      	movs	r0, #0
 80058fe:	6360      	str	r0, [r4, #52]	; 0x34
 8005900:	e7c1      	b.n	8005886 <__sflush_r+0x1a>
 8005902:	2301      	movs	r3, #1
 8005904:	4628      	mov	r0, r5
 8005906:	47b0      	blx	r6
 8005908:	1c41      	adds	r1, r0, #1
 800590a:	d1c8      	bne.n	800589e <__sflush_r+0x32>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0c5      	beq.n	800589e <__sflush_r+0x32>
 8005912:	2b1d      	cmp	r3, #29
 8005914:	d001      	beq.n	800591a <__sflush_r+0xae>
 8005916:	2b16      	cmp	r3, #22
 8005918:	d101      	bne.n	800591e <__sflush_r+0xb2>
 800591a:	602f      	str	r7, [r5, #0]
 800591c:	e7b2      	b.n	8005884 <__sflush_r+0x18>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	e7ae      	b.n	8005886 <__sflush_r+0x1a>
 8005928:	690f      	ldr	r7, [r1, #16]
 800592a:	2f00      	cmp	r7, #0
 800592c:	d0aa      	beq.n	8005884 <__sflush_r+0x18>
 800592e:	0793      	lsls	r3, r2, #30
 8005930:	bf18      	it	ne
 8005932:	2300      	movne	r3, #0
 8005934:	680e      	ldr	r6, [r1, #0]
 8005936:	bf08      	it	eq
 8005938:	694b      	ldreq	r3, [r1, #20]
 800593a:	1bf6      	subs	r6, r6, r7
 800593c:	600f      	str	r7, [r1, #0]
 800593e:	608b      	str	r3, [r1, #8]
 8005940:	2e00      	cmp	r6, #0
 8005942:	dd9f      	ble.n	8005884 <__sflush_r+0x18>
 8005944:	4633      	mov	r3, r6
 8005946:	463a      	mov	r2, r7
 8005948:	4628      	mov	r0, r5
 800594a:	6a21      	ldr	r1, [r4, #32]
 800594c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005950:	47e0      	blx	ip
 8005952:	2800      	cmp	r0, #0
 8005954:	dc06      	bgt.n	8005964 <__sflush_r+0xf8>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	e790      	b.n	8005886 <__sflush_r+0x1a>
 8005964:	4407      	add	r7, r0
 8005966:	1a36      	subs	r6, r6, r0
 8005968:	e7ea      	b.n	8005940 <__sflush_r+0xd4>
 800596a:	bf00      	nop
 800596c:	dfbffffe 	.word	0xdfbffffe

08005970 <_fflush_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	b913      	cbnz	r3, 8005980 <_fflush_r+0x10>
 800597a:	2500      	movs	r5, #0
 800597c:	4628      	mov	r0, r5
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	b118      	cbz	r0, 800598a <_fflush_r+0x1a>
 8005982:	6a03      	ldr	r3, [r0, #32]
 8005984:	b90b      	cbnz	r3, 800598a <_fflush_r+0x1a>
 8005986:	f7ff fa9f 	bl	8004ec8 <__sinit>
 800598a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f3      	beq.n	800597a <_fflush_r+0xa>
 8005992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005994:	07d0      	lsls	r0, r2, #31
 8005996:	d404      	bmi.n	80059a2 <_fflush_r+0x32>
 8005998:	0599      	lsls	r1, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_fflush_r+0x32>
 800599c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800599e:	f7ff fb98 	bl	80050d2 <__retarget_lock_acquire_recursive>
 80059a2:	4628      	mov	r0, r5
 80059a4:	4621      	mov	r1, r4
 80059a6:	f7ff ff61 	bl	800586c <__sflush_r>
 80059aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ac:	4605      	mov	r5, r0
 80059ae:	07da      	lsls	r2, r3, #31
 80059b0:	d4e4      	bmi.n	800597c <_fflush_r+0xc>
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	059b      	lsls	r3, r3, #22
 80059b6:	d4e1      	bmi.n	800597c <_fflush_r+0xc>
 80059b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ba:	f7ff fb8b 	bl	80050d4 <__retarget_lock_release_recursive>
 80059be:	e7dd      	b.n	800597c <_fflush_r+0xc>

080059c0 <__swbuf_r>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	460e      	mov	r6, r1
 80059c4:	4614      	mov	r4, r2
 80059c6:	4605      	mov	r5, r0
 80059c8:	b118      	cbz	r0, 80059d2 <__swbuf_r+0x12>
 80059ca:	6a03      	ldr	r3, [r0, #32]
 80059cc:	b90b      	cbnz	r3, 80059d2 <__swbuf_r+0x12>
 80059ce:	f7ff fa7b 	bl	8004ec8 <__sinit>
 80059d2:	69a3      	ldr	r3, [r4, #24]
 80059d4:	60a3      	str	r3, [r4, #8]
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	071a      	lsls	r2, r3, #28
 80059da:	d525      	bpl.n	8005a28 <__swbuf_r+0x68>
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	b31b      	cbz	r3, 8005a28 <__swbuf_r+0x68>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	6922      	ldr	r2, [r4, #16]
 80059e4:	b2f6      	uxtb	r6, r6
 80059e6:	1a98      	subs	r0, r3, r2
 80059e8:	6963      	ldr	r3, [r4, #20]
 80059ea:	4637      	mov	r7, r6
 80059ec:	4283      	cmp	r3, r0
 80059ee:	dc04      	bgt.n	80059fa <__swbuf_r+0x3a>
 80059f0:	4621      	mov	r1, r4
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7ff ffbc 	bl	8005970 <_fflush_r>
 80059f8:	b9e0      	cbnz	r0, 8005a34 <__swbuf_r+0x74>
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	701e      	strb	r6, [r3, #0]
 8005a08:	6962      	ldr	r2, [r4, #20]
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d004      	beq.n	8005a1a <__swbuf_r+0x5a>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	07db      	lsls	r3, r3, #31
 8005a14:	d506      	bpl.n	8005a24 <__swbuf_r+0x64>
 8005a16:	2e0a      	cmp	r6, #10
 8005a18:	d104      	bne.n	8005a24 <__swbuf_r+0x64>
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7ff ffa7 	bl	8005970 <_fflush_r>
 8005a22:	b938      	cbnz	r0, 8005a34 <__swbuf_r+0x74>
 8005a24:	4638      	mov	r0, r7
 8005a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f806 	bl	8005a3c <__swsetup_r>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0d5      	beq.n	80059e0 <__swbuf_r+0x20>
 8005a34:	f04f 37ff 	mov.w	r7, #4294967295
 8005a38:	e7f4      	b.n	8005a24 <__swbuf_r+0x64>
	...

08005a3c <__swsetup_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <__swsetup_r+0xac>)
 8005a40:	4605      	mov	r5, r0
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	460c      	mov	r4, r1
 8005a46:	b118      	cbz	r0, 8005a50 <__swsetup_r+0x14>
 8005a48:	6a03      	ldr	r3, [r0, #32]
 8005a4a:	b90b      	cbnz	r3, 8005a50 <__swsetup_r+0x14>
 8005a4c:	f7ff fa3c 	bl	8004ec8 <__sinit>
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a56:	0718      	lsls	r0, r3, #28
 8005a58:	d422      	bmi.n	8005aa0 <__swsetup_r+0x64>
 8005a5a:	06d9      	lsls	r1, r3, #27
 8005a5c:	d407      	bmi.n	8005a6e <__swsetup_r+0x32>
 8005a5e:	2309      	movs	r3, #9
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	e034      	b.n	8005ad8 <__swsetup_r+0x9c>
 8005a6e:	0758      	lsls	r0, r3, #29
 8005a70:	d512      	bpl.n	8005a98 <__swsetup_r+0x5c>
 8005a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a74:	b141      	cbz	r1, 8005a88 <__swsetup_r+0x4c>
 8005a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d002      	beq.n	8005a84 <__swsetup_r+0x48>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f7ff fb2a 	bl	80050d8 <_free_r>
 8005a84:	2300      	movs	r3, #0
 8005a86:	6363      	str	r3, [r4, #52]	; 0x34
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	2300      	movs	r3, #0
 8005a92:	6063      	str	r3, [r4, #4]
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	b94b      	cbnz	r3, 8005ab8 <__swsetup_r+0x7c>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aae:	d003      	beq.n	8005ab8 <__swsetup_r+0x7c>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 f85d 	bl	8005b72 <__smakebuf_r>
 8005ab8:	89a0      	ldrh	r0, [r4, #12]
 8005aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005abe:	f010 0301 	ands.w	r3, r0, #1
 8005ac2:	d00a      	beq.n	8005ada <__swsetup_r+0x9e>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60a3      	str	r3, [r4, #8]
 8005ac8:	6963      	ldr	r3, [r4, #20]
 8005aca:	425b      	negs	r3, r3
 8005acc:	61a3      	str	r3, [r4, #24]
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	b943      	cbnz	r3, 8005ae4 <__swsetup_r+0xa8>
 8005ad2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ad6:	d1c4      	bne.n	8005a62 <__swsetup_r+0x26>
 8005ad8:	bd38      	pop	{r3, r4, r5, pc}
 8005ada:	0781      	lsls	r1, r0, #30
 8005adc:	bf58      	it	pl
 8005ade:	6963      	ldrpl	r3, [r4, #20]
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	e7f4      	b.n	8005ace <__swsetup_r+0x92>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e7f7      	b.n	8005ad8 <__swsetup_r+0x9c>
 8005ae8:	20000064 	.word	0x20000064

08005aec <_sbrk_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	2300      	movs	r3, #0
 8005af0:	4d05      	ldr	r5, [pc, #20]	; (8005b08 <_sbrk_r+0x1c>)
 8005af2:	4604      	mov	r4, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	f7fb fc72 	bl	80013e0 <_sbrk>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_sbrk_r+0x1a>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_sbrk_r+0x1a>
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	20000340 	.word	0x20000340

08005b0c <memchr>:
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	b2c9      	uxtb	r1, r1
 8005b12:	4402      	add	r2, r0
 8005b14:	4293      	cmp	r3, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	d101      	bne.n	8005b1e <memchr+0x12>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e003      	b.n	8005b26 <memchr+0x1a>
 8005b1e:	7804      	ldrb	r4, [r0, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	428c      	cmp	r4, r1
 8005b24:	d1f6      	bne.n	8005b14 <memchr+0x8>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <__swhatbuf_r>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b30:	4615      	mov	r5, r2
 8005b32:	2900      	cmp	r1, #0
 8005b34:	461e      	mov	r6, r3
 8005b36:	b096      	sub	sp, #88	; 0x58
 8005b38:	da0c      	bge.n	8005b54 <__swhatbuf_r+0x2c>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b42:	bf0c      	ite	eq
 8005b44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b48:	2340      	movne	r3, #64	; 0x40
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	6031      	str	r1, [r6, #0]
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	b016      	add	sp, #88	; 0x58
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	466a      	mov	r2, sp
 8005b56:	f000 f849 	bl	8005bec <_fstat_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	dbed      	blt.n	8005b3a <__swhatbuf_r+0x12>
 8005b5e:	9901      	ldr	r1, [sp, #4]
 8005b60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b68:	4259      	negs	r1, r3
 8005b6a:	4159      	adcs	r1, r3
 8005b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b70:	e7eb      	b.n	8005b4a <__swhatbuf_r+0x22>

08005b72 <__smakebuf_r>:
 8005b72:	898b      	ldrh	r3, [r1, #12]
 8005b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b76:	079d      	lsls	r5, r3, #30
 8005b78:	4606      	mov	r6, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	d507      	bpl.n	8005b8e <__smakebuf_r+0x1c>
 8005b7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	2301      	movs	r3, #1
 8005b88:	6163      	str	r3, [r4, #20]
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
 8005b8e:	466a      	mov	r2, sp
 8005b90:	ab01      	add	r3, sp, #4
 8005b92:	f7ff ffc9 	bl	8005b28 <__swhatbuf_r>
 8005b96:	9900      	ldr	r1, [sp, #0]
 8005b98:	4605      	mov	r5, r0
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff fb04 	bl	80051a8 <_malloc_r>
 8005ba0:	b948      	cbnz	r0, 8005bb6 <__smakebuf_r+0x44>
 8005ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba6:	059a      	lsls	r2, r3, #22
 8005ba8:	d4ef      	bmi.n	8005b8a <__smakebuf_r+0x18>
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	f043 0302 	orr.w	r3, r3, #2
 8005bb2:	81a3      	strh	r3, [r4, #12]
 8005bb4:	e7e3      	b.n	8005b7e <__smakebuf_r+0xc>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	6020      	str	r0, [r4, #0]
 8005bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbe:	81a3      	strh	r3, [r4, #12]
 8005bc0:	9b00      	ldr	r3, [sp, #0]
 8005bc2:	6120      	str	r0, [r4, #16]
 8005bc4:	6163      	str	r3, [r4, #20]
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	b15b      	cbz	r3, 8005be2 <__smakebuf_r+0x70>
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bd0:	f000 f81e 	bl	8005c10 <_isatty_r>
 8005bd4:	b128      	cbz	r0, 8005be2 <__smakebuf_r+0x70>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	431d      	orrs	r5, r3
 8005be6:	81a5      	strh	r5, [r4, #12]
 8005be8:	e7cf      	b.n	8005b8a <__smakebuf_r+0x18>
	...

08005bec <_fstat_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4d06      	ldr	r5, [pc, #24]	; (8005c0c <_fstat_r+0x20>)
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f7fb fbcb 	bl	8001394 <_fstat>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d102      	bne.n	8005c08 <_fstat_r+0x1c>
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	b103      	cbz	r3, 8005c08 <_fstat_r+0x1c>
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000340 	.word	0x20000340

08005c10 <_isatty_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	2300      	movs	r3, #0
 8005c14:	4d05      	ldr	r5, [pc, #20]	; (8005c2c <_isatty_r+0x1c>)
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb fbc9 	bl	80013b2 <_isatty>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_isatty_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_isatty_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000340 	.word	0x20000340

08005c30 <_init>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr

08005c3c <_fini>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr
=======
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009a      	lsls	r2, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <UART_SetConfig+0x118>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	0119      	lsls	r1, r3, #4
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fbb2 f2f3 	udiv	r2, r2, r3
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <UART_SetConfig+0x118>)
 800502e:	fba3 0302 	umull	r0, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2064      	movs	r0, #100	; 0x64
 8005036:	fb00 f303 	mul.w	r3, r0, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <UART_SetConfig+0x118>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504c:	4419      	add	r1, r3
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009a      	lsls	r2, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fbb2 f2f3 	udiv	r2, r2, r3
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <UART_SetConfig+0x118>)
 8005066:	fba3 0302 	umull	r0, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2064      	movs	r0, #100	; 0x64
 800506e:	fb00 f303 	mul.w	r3, r0, r3
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	3332      	adds	r3, #50	; 0x32
 8005078:	4a07      	ldr	r2, [pc, #28]	; (8005098 <UART_SetConfig+0x118>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	440a      	add	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40013800 	.word	0x40013800
 8005098:	51eb851f 	.word	0x51eb851f

0800509c <std>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	e9c0 3300 	strd	r3, r3, [r0]
 80050a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050aa:	6083      	str	r3, [r0, #8]
 80050ac:	8181      	strh	r1, [r0, #12]
 80050ae:	6643      	str	r3, [r0, #100]	; 0x64
 80050b0:	81c2      	strh	r2, [r0, #14]
 80050b2:	6183      	str	r3, [r0, #24]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2208      	movs	r2, #8
 80050b8:	305c      	adds	r0, #92	; 0x5c
 80050ba:	f000 f906 	bl	80052ca <memset>
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <std+0x58>)
 80050c0:	6224      	str	r4, [r4, #32]
 80050c2:	6263      	str	r3, [r4, #36]	; 0x24
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <std+0x5c>)
 80050c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <std+0x60>)
 80050ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <std+0x64>)
 80050ce:	6323      	str	r3, [r4, #48]	; 0x30
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <std+0x68>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d006      	beq.n	80050e4 <std+0x48>
 80050d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050da:	4294      	cmp	r4, r2
 80050dc:	d002      	beq.n	80050e4 <std+0x48>
 80050de:	33d0      	adds	r3, #208	; 0xd0
 80050e0:	429c      	cmp	r4, r3
 80050e2:	d105      	bne.n	80050f0 <std+0x54>
 80050e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	f000 b966 	b.w	80053bc <__retarget_lock_init_recursive>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	08005245 	.word	0x08005245
 80050f8:	08005267 	.word	0x08005267
 80050fc:	0800529f 	.word	0x0800529f
 8005100:	080052c3 	.word	0x080052c3
 8005104:	20000284 	.word	0x20000284

08005108 <stdio_exit_handler>:
 8005108:	4a02      	ldr	r2, [pc, #8]	; (8005114 <stdio_exit_handler+0xc>)
 800510a:	4903      	ldr	r1, [pc, #12]	; (8005118 <stdio_exit_handler+0x10>)
 800510c:	4803      	ldr	r0, [pc, #12]	; (800511c <stdio_exit_handler+0x14>)
 800510e:	f000 b869 	b.w	80051e4 <_fwalk_sglue>
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	08005c5d 	.word	0x08005c5d
 800511c:	20000018 	.word	0x20000018

08005120 <cleanup_stdio>:
 8005120:	6841      	ldr	r1, [r0, #4]
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <cleanup_stdio+0x34>)
 8005124:	b510      	push	{r4, lr}
 8005126:	4299      	cmp	r1, r3
 8005128:	4604      	mov	r4, r0
 800512a:	d001      	beq.n	8005130 <cleanup_stdio+0x10>
 800512c:	f000 fd96 	bl	8005c5c <_fflush_r>
 8005130:	68a1      	ldr	r1, [r4, #8]
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <cleanup_stdio+0x38>)
 8005134:	4299      	cmp	r1, r3
 8005136:	d002      	beq.n	800513e <cleanup_stdio+0x1e>
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fd8f 	bl	8005c5c <_fflush_r>
 800513e:	68e1      	ldr	r1, [r4, #12]
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <cleanup_stdio+0x3c>)
 8005142:	4299      	cmp	r1, r3
 8005144:	d004      	beq.n	8005150 <cleanup_stdio+0x30>
 8005146:	4620      	mov	r0, r4
 8005148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514c:	f000 bd86 	b.w	8005c5c <_fflush_r>
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	20000284 	.word	0x20000284
 8005158:	200002ec 	.word	0x200002ec
 800515c:	20000354 	.word	0x20000354

08005160 <global_stdio_init.part.0>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <global_stdio_init.part.0+0x30>)
 8005164:	4c0b      	ldr	r4, [pc, #44]	; (8005194 <global_stdio_init.part.0+0x34>)
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <global_stdio_init.part.0+0x38>)
 8005168:	4620      	mov	r0, r4
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	2104      	movs	r1, #4
 800516e:	2200      	movs	r2, #0
 8005170:	f7ff ff94 	bl	800509c <std>
 8005174:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005178:	2201      	movs	r2, #1
 800517a:	2109      	movs	r1, #9
 800517c:	f7ff ff8e 	bl	800509c <std>
 8005180:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005184:	2202      	movs	r2, #2
 8005186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518a:	2112      	movs	r1, #18
 800518c:	f7ff bf86 	b.w	800509c <std>
 8005190:	200003bc 	.word	0x200003bc
 8005194:	20000284 	.word	0x20000284
 8005198:	08005109 	.word	0x08005109

0800519c <__sfp_lock_acquire>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_acquire+0x8>)
 800519e:	f000 b90e 	b.w	80053be <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	200003c5 	.word	0x200003c5

080051a8 <__sfp_lock_release>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sfp_lock_release+0x8>)
 80051aa:	f000 b909 	b.w	80053c0 <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	200003c5 	.word	0x200003c5

080051b4 <__sinit>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	f7ff fff0 	bl	800519c <__sfp_lock_acquire>
 80051bc:	6a23      	ldr	r3, [r4, #32]
 80051be:	b11b      	cbz	r3, 80051c8 <__sinit+0x14>
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c4:	f7ff bff0 	b.w	80051a8 <__sfp_lock_release>
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <__sinit+0x28>)
 80051ca:	6223      	str	r3, [r4, #32]
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <__sinit+0x2c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f5      	bne.n	80051c0 <__sinit+0xc>
 80051d4:	f7ff ffc4 	bl	8005160 <global_stdio_init.part.0>
 80051d8:	e7f2      	b.n	80051c0 <__sinit+0xc>
 80051da:	bf00      	nop
 80051dc:	08005121 	.word	0x08005121
 80051e0:	200003bc 	.word	0x200003bc

080051e4 <_fwalk_sglue>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4607      	mov	r7, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	2600      	movs	r6, #0
 80051f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f4:	f1b9 0901 	subs.w	r9, r9, #1
 80051f8:	d505      	bpl.n	8005206 <_fwalk_sglue+0x22>
 80051fa:	6824      	ldr	r4, [r4, #0]
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	d1f7      	bne.n	80051f0 <_fwalk_sglue+0xc>
 8005200:	4630      	mov	r0, r6
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d907      	bls.n	800521c <_fwalk_sglue+0x38>
 800520c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005210:	3301      	adds	r3, #1
 8005212:	d003      	beq.n	800521c <_fwalk_sglue+0x38>
 8005214:	4629      	mov	r1, r5
 8005216:	4638      	mov	r0, r7
 8005218:	47c0      	blx	r8
 800521a:	4306      	orrs	r6, r0
 800521c:	3568      	adds	r5, #104	; 0x68
 800521e:	e7e9      	b.n	80051f4 <_fwalk_sglue+0x10>

08005220 <iprintf>:
 8005220:	b40f      	push	{r0, r1, r2, r3}
 8005222:	b507      	push	{r0, r1, r2, lr}
 8005224:	4906      	ldr	r1, [pc, #24]	; (8005240 <iprintf+0x20>)
 8005226:	ab04      	add	r3, sp, #16
 8005228:	6808      	ldr	r0, [r1, #0]
 800522a:	f853 2b04 	ldr.w	r2, [r3], #4
 800522e:	6881      	ldr	r1, [r0, #8]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	f000 f9e3 	bl	80055fc <_vfiprintf_r>
 8005236:	b003      	add	sp, #12
 8005238:	f85d eb04 	ldr.w	lr, [sp], #4
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr
 8005240:	20000064 	.word	0x20000064

08005244 <__sread>:
 8005244:	b510      	push	{r4, lr}
 8005246:	460c      	mov	r4, r1
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	f000 f868 	bl	8005320 <_read_r>
 8005250:	2800      	cmp	r0, #0
 8005252:	bfab      	itete	ge
 8005254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005256:	89a3      	ldrhlt	r3, [r4, #12]
 8005258:	181b      	addge	r3, r3, r0
 800525a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800525e:	bfac      	ite	ge
 8005260:	6563      	strge	r3, [r4, #84]	; 0x54
 8005262:	81a3      	strhlt	r3, [r4, #12]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__swrite>:
 8005266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	461f      	mov	r7, r3
 800526c:	898b      	ldrh	r3, [r1, #12]
 800526e:	4605      	mov	r5, r0
 8005270:	05db      	lsls	r3, r3, #23
 8005272:	460c      	mov	r4, r1
 8005274:	4616      	mov	r6, r2
 8005276:	d505      	bpl.n	8005284 <__swrite+0x1e>
 8005278:	2302      	movs	r3, #2
 800527a:	2200      	movs	r2, #0
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	f000 f83c 	bl	80052fc <_lseek_r>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	4632      	mov	r2, r6
 8005288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	4628      	mov	r0, r5
 8005290:	463b      	mov	r3, r7
 8005292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	f000 b853 	b.w	8005344 <_write_r>

0800529e <__sseek>:
 800529e:	b510      	push	{r4, lr}
 80052a0:	460c      	mov	r4, r1
 80052a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a6:	f000 f829 	bl	80052fc <_lseek_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	bf15      	itete	ne
 80052b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ba:	81a3      	strheq	r3, [r4, #12]
 80052bc:	bf18      	it	ne
 80052be:	81a3      	strhne	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__sclose>:
 80052c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c6:	f000 b809 	b.w	80052dc <_close_r>

080052ca <memset>:
 80052ca:	4603      	mov	r3, r0
 80052cc:	4402      	add	r2, r0
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d100      	bne.n	80052d4 <memset+0xa>
 80052d2:	4770      	bx	lr
 80052d4:	f803 1b01 	strb.w	r1, [r3], #1
 80052d8:	e7f9      	b.n	80052ce <memset+0x4>
	...

080052dc <_close_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	2300      	movs	r3, #0
 80052e0:	4d05      	ldr	r5, [pc, #20]	; (80052f8 <_close_r+0x1c>)
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fc f841 	bl	800136e <_close>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_close_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_close_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	200003c0 	.word	0x200003c0

080052fc <_lseek_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	2200      	movs	r2, #0
 8005306:	4d05      	ldr	r5, [pc, #20]	; (800531c <_lseek_r+0x20>)
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f7fc f853 	bl	80013b6 <_lseek>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_lseek_r+0x1e>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_lseek_r+0x1e>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	200003c0 	.word	0x200003c0

08005320 <_read_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	2200      	movs	r2, #0
 800532a:	4d05      	ldr	r5, [pc, #20]	; (8005340 <_read_r+0x20>)
 800532c:	602a      	str	r2, [r5, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	f7fb ffe4 	bl	80012fc <_read>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_read_r+0x1e>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_read_r+0x1e>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	200003c0 	.word	0x200003c0

08005344 <_write_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	2200      	movs	r2, #0
 800534e:	4d05      	ldr	r5, [pc, #20]	; (8005364 <_write_r+0x20>)
 8005350:	602a      	str	r2, [r5, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	f7fb ffef 	bl	8001336 <_write>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_write_r+0x1e>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_write_r+0x1e>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	200003c0 	.word	0x200003c0

08005368 <__errno>:
 8005368:	4b01      	ldr	r3, [pc, #4]	; (8005370 <__errno+0x8>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000064 	.word	0x20000064

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	2600      	movs	r6, #0
 8005378:	4d0c      	ldr	r5, [pc, #48]	; (80053ac <__libc_init_array+0x38>)
 800537a:	4c0d      	ldr	r4, [pc, #52]	; (80053b0 <__libc_init_array+0x3c>)
 800537c:	1b64      	subs	r4, r4, r5
 800537e:	10a4      	asrs	r4, r4, #2
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	f000 fdca 	bl	8005f1c <_init>
 8005388:	2600      	movs	r6, #0
 800538a:	4d0a      	ldr	r5, [pc, #40]	; (80053b4 <__libc_init_array+0x40>)
 800538c:	4c0a      	ldr	r4, [pc, #40]	; (80053b8 <__libc_init_array+0x44>)
 800538e:	1b64      	subs	r4, r4, r5
 8005390:	10a4      	asrs	r4, r4, #2
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	08005fe8 	.word	0x08005fe8
 80053b0:	08005fe8 	.word	0x08005fe8
 80053b4:	08005fe8 	.word	0x08005fe8
 80053b8:	08005fec 	.word	0x08005fec

080053bc <__retarget_lock_init_recursive>:
 80053bc:	4770      	bx	lr

080053be <__retarget_lock_acquire_recursive>:
 80053be:	4770      	bx	lr

080053c0 <__retarget_lock_release_recursive>:
 80053c0:	4770      	bx	lr
	...

080053c4 <_free_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4605      	mov	r5, r0
 80053c8:	2900      	cmp	r1, #0
 80053ca:	d040      	beq.n	800544e <_free_r+0x8a>
 80053cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d0:	1f0c      	subs	r4, r1, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfb8      	it	lt
 80053d6:	18e4      	addlt	r4, r4, r3
 80053d8:	f000 f8dc 	bl	8005594 <__malloc_lock>
 80053dc:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <_free_r+0x8c>)
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	b933      	cbnz	r3, 80053f0 <_free_r+0x2c>
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	6014      	str	r4, [r2, #0]
 80053e6:	4628      	mov	r0, r5
 80053e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ec:	f000 b8d8 	b.w	80055a0 <__malloc_unlock>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d908      	bls.n	8005406 <_free_r+0x42>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	1821      	adds	r1, r4, r0
 80053f8:	428b      	cmp	r3, r1
 80053fa:	bf01      	itttt	eq
 80053fc:	6819      	ldreq	r1, [r3, #0]
 80053fe:	685b      	ldreq	r3, [r3, #4]
 8005400:	1809      	addeq	r1, r1, r0
 8005402:	6021      	streq	r1, [r4, #0]
 8005404:	e7ed      	b.n	80053e2 <_free_r+0x1e>
 8005406:	461a      	mov	r2, r3
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b10b      	cbz	r3, 8005410 <_free_r+0x4c>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d9fa      	bls.n	8005406 <_free_r+0x42>
 8005410:	6811      	ldr	r1, [r2, #0]
 8005412:	1850      	adds	r0, r2, r1
 8005414:	42a0      	cmp	r0, r4
 8005416:	d10b      	bne.n	8005430 <_free_r+0x6c>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	4401      	add	r1, r0
 800541c:	1850      	adds	r0, r2, r1
 800541e:	4283      	cmp	r3, r0
 8005420:	6011      	str	r1, [r2, #0]
 8005422:	d1e0      	bne.n	80053e6 <_free_r+0x22>
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4408      	add	r0, r1
 800542a:	6010      	str	r0, [r2, #0]
 800542c:	6053      	str	r3, [r2, #4]
 800542e:	e7da      	b.n	80053e6 <_free_r+0x22>
 8005430:	d902      	bls.n	8005438 <_free_r+0x74>
 8005432:	230c      	movs	r3, #12
 8005434:	602b      	str	r3, [r5, #0]
 8005436:	e7d6      	b.n	80053e6 <_free_r+0x22>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	1821      	adds	r1, r4, r0
 800543c:	428b      	cmp	r3, r1
 800543e:	bf01      	itttt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	1809      	addeq	r1, r1, r0
 8005446:	6021      	streq	r1, [r4, #0]
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	6054      	str	r4, [r2, #4]
 800544c:	e7cb      	b.n	80053e6 <_free_r+0x22>
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200003c8 	.word	0x200003c8

08005454 <sbrk_aligned>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4e0e      	ldr	r6, [pc, #56]	; (8005490 <sbrk_aligned+0x3c>)
 8005458:	460c      	mov	r4, r1
 800545a:	6831      	ldr	r1, [r6, #0]
 800545c:	4605      	mov	r5, r0
 800545e:	b911      	cbnz	r1, 8005466 <sbrk_aligned+0x12>
 8005460:	f000 fcba 	bl	8005dd8 <_sbrk_r>
 8005464:	6030      	str	r0, [r6, #0]
 8005466:	4621      	mov	r1, r4
 8005468:	4628      	mov	r0, r5
 800546a:	f000 fcb5 	bl	8005dd8 <_sbrk_r>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	d00a      	beq.n	8005488 <sbrk_aligned+0x34>
 8005472:	1cc4      	adds	r4, r0, #3
 8005474:	f024 0403 	bic.w	r4, r4, #3
 8005478:	42a0      	cmp	r0, r4
 800547a:	d007      	beq.n	800548c <sbrk_aligned+0x38>
 800547c:	1a21      	subs	r1, r4, r0
 800547e:	4628      	mov	r0, r5
 8005480:	f000 fcaa 	bl	8005dd8 <_sbrk_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d101      	bne.n	800548c <sbrk_aligned+0x38>
 8005488:	f04f 34ff 	mov.w	r4, #4294967295
 800548c:	4620      	mov	r0, r4
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	200003cc 	.word	0x200003cc

08005494 <_malloc_r>:
 8005494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005498:	1ccd      	adds	r5, r1, #3
 800549a:	f025 0503 	bic.w	r5, r5, #3
 800549e:	3508      	adds	r5, #8
 80054a0:	2d0c      	cmp	r5, #12
 80054a2:	bf38      	it	cc
 80054a4:	250c      	movcc	r5, #12
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	4607      	mov	r7, r0
 80054aa:	db01      	blt.n	80054b0 <_malloc_r+0x1c>
 80054ac:	42a9      	cmp	r1, r5
 80054ae:	d905      	bls.n	80054bc <_malloc_r+0x28>
 80054b0:	230c      	movs	r3, #12
 80054b2:	2600      	movs	r6, #0
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	4630      	mov	r0, r6
 80054b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005590 <_malloc_r+0xfc>
 80054c0:	f000 f868 	bl	8005594 <__malloc_lock>
 80054c4:	f8d8 3000 	ldr.w	r3, [r8]
 80054c8:	461c      	mov	r4, r3
 80054ca:	bb5c      	cbnz	r4, 8005524 <_malloc_r+0x90>
 80054cc:	4629      	mov	r1, r5
 80054ce:	4638      	mov	r0, r7
 80054d0:	f7ff ffc0 	bl	8005454 <sbrk_aligned>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	4604      	mov	r4, r0
 80054d8:	d155      	bne.n	8005586 <_malloc_r+0xf2>
 80054da:	f8d8 4000 	ldr.w	r4, [r8]
 80054de:	4626      	mov	r6, r4
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	d145      	bne.n	8005570 <_malloc_r+0xdc>
 80054e4:	2c00      	cmp	r4, #0
 80054e6:	d048      	beq.n	800557a <_malloc_r+0xe6>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	4631      	mov	r1, r6
 80054ec:	4638      	mov	r0, r7
 80054ee:	eb04 0903 	add.w	r9, r4, r3
 80054f2:	f000 fc71 	bl	8005dd8 <_sbrk_r>
 80054f6:	4581      	cmp	r9, r0
 80054f8:	d13f      	bne.n	800557a <_malloc_r+0xe6>
 80054fa:	6821      	ldr	r1, [r4, #0]
 80054fc:	4638      	mov	r0, r7
 80054fe:	1a6d      	subs	r5, r5, r1
 8005500:	4629      	mov	r1, r5
 8005502:	f7ff ffa7 	bl	8005454 <sbrk_aligned>
 8005506:	3001      	adds	r0, #1
 8005508:	d037      	beq.n	800557a <_malloc_r+0xe6>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	442b      	add	r3, r5
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	f8d8 3000 	ldr.w	r3, [r8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d038      	beq.n	800558a <_malloc_r+0xf6>
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	42a2      	cmp	r2, r4
 800551c:	d12b      	bne.n	8005576 <_malloc_r+0xe2>
 800551e:	2200      	movs	r2, #0
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e00f      	b.n	8005544 <_malloc_r+0xb0>
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	1b52      	subs	r2, r2, r5
 8005528:	d41f      	bmi.n	800556a <_malloc_r+0xd6>
 800552a:	2a0b      	cmp	r2, #11
 800552c:	d917      	bls.n	800555e <_malloc_r+0xca>
 800552e:	1961      	adds	r1, r4, r5
 8005530:	42a3      	cmp	r3, r4
 8005532:	6025      	str	r5, [r4, #0]
 8005534:	bf18      	it	ne
 8005536:	6059      	strne	r1, [r3, #4]
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	bf08      	it	eq
 800553c:	f8c8 1000 	streq.w	r1, [r8]
 8005540:	5162      	str	r2, [r4, r5]
 8005542:	604b      	str	r3, [r1, #4]
 8005544:	4638      	mov	r0, r7
 8005546:	f104 060b 	add.w	r6, r4, #11
 800554a:	f000 f829 	bl	80055a0 <__malloc_unlock>
 800554e:	f026 0607 	bic.w	r6, r6, #7
 8005552:	1d23      	adds	r3, r4, #4
 8005554:	1af2      	subs	r2, r6, r3
 8005556:	d0ae      	beq.n	80054b6 <_malloc_r+0x22>
 8005558:	1b9b      	subs	r3, r3, r6
 800555a:	50a3      	str	r3, [r4, r2]
 800555c:	e7ab      	b.n	80054b6 <_malloc_r+0x22>
 800555e:	42a3      	cmp	r3, r4
 8005560:	6862      	ldr	r2, [r4, #4]
 8005562:	d1dd      	bne.n	8005520 <_malloc_r+0x8c>
 8005564:	f8c8 2000 	str.w	r2, [r8]
 8005568:	e7ec      	b.n	8005544 <_malloc_r+0xb0>
 800556a:	4623      	mov	r3, r4
 800556c:	6864      	ldr	r4, [r4, #4]
 800556e:	e7ac      	b.n	80054ca <_malloc_r+0x36>
 8005570:	4634      	mov	r4, r6
 8005572:	6876      	ldr	r6, [r6, #4]
 8005574:	e7b4      	b.n	80054e0 <_malloc_r+0x4c>
 8005576:	4613      	mov	r3, r2
 8005578:	e7cc      	b.n	8005514 <_malloc_r+0x80>
 800557a:	230c      	movs	r3, #12
 800557c:	4638      	mov	r0, r7
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	f000 f80e 	bl	80055a0 <__malloc_unlock>
 8005584:	e797      	b.n	80054b6 <_malloc_r+0x22>
 8005586:	6025      	str	r5, [r4, #0]
 8005588:	e7dc      	b.n	8005544 <_malloc_r+0xb0>
 800558a:	605b      	str	r3, [r3, #4]
 800558c:	deff      	udf	#255	; 0xff
 800558e:	bf00      	nop
 8005590:	200003c8 	.word	0x200003c8

08005594 <__malloc_lock>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__malloc_lock+0x8>)
 8005596:	f7ff bf12 	b.w	80053be <__retarget_lock_acquire_recursive>
 800559a:	bf00      	nop
 800559c:	200003c4 	.word	0x200003c4

080055a0 <__malloc_unlock>:
 80055a0:	4801      	ldr	r0, [pc, #4]	; (80055a8 <__malloc_unlock+0x8>)
 80055a2:	f7ff bf0d 	b.w	80053c0 <__retarget_lock_release_recursive>
 80055a6:	bf00      	nop
 80055a8:	200003c4 	.word	0x200003c4

080055ac <__sfputc_r>:
 80055ac:	6893      	ldr	r3, [r2, #8]
 80055ae:	b410      	push	{r4}
 80055b0:	3b01      	subs	r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	6093      	str	r3, [r2, #8]
 80055b6:	da07      	bge.n	80055c8 <__sfputc_r+0x1c>
 80055b8:	6994      	ldr	r4, [r2, #24]
 80055ba:	42a3      	cmp	r3, r4
 80055bc:	db01      	blt.n	80055c2 <__sfputc_r+0x16>
 80055be:	290a      	cmp	r1, #10
 80055c0:	d102      	bne.n	80055c8 <__sfputc_r+0x1c>
 80055c2:	bc10      	pop	{r4}
 80055c4:	f000 bb72 	b.w	8005cac <__swbuf_r>
 80055c8:	6813      	ldr	r3, [r2, #0]
 80055ca:	1c58      	adds	r0, r3, #1
 80055cc:	6010      	str	r0, [r2, #0]
 80055ce:	7019      	strb	r1, [r3, #0]
 80055d0:	4608      	mov	r0, r1
 80055d2:	bc10      	pop	{r4}
 80055d4:	4770      	bx	lr

080055d6 <__sfputs_r>:
 80055d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d8:	4606      	mov	r6, r0
 80055da:	460f      	mov	r7, r1
 80055dc:	4614      	mov	r4, r2
 80055de:	18d5      	adds	r5, r2, r3
 80055e0:	42ac      	cmp	r4, r5
 80055e2:	d101      	bne.n	80055e8 <__sfputs_r+0x12>
 80055e4:	2000      	movs	r0, #0
 80055e6:	e007      	b.n	80055f8 <__sfputs_r+0x22>
 80055e8:	463a      	mov	r2, r7
 80055ea:	4630      	mov	r0, r6
 80055ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f0:	f7ff ffdc 	bl	80055ac <__sfputc_r>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d1f3      	bne.n	80055e0 <__sfputs_r+0xa>
 80055f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055fc <_vfiprintf_r>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	460d      	mov	r5, r1
 8005602:	4614      	mov	r4, r2
 8005604:	4698      	mov	r8, r3
 8005606:	4606      	mov	r6, r0
 8005608:	b09d      	sub	sp, #116	; 0x74
 800560a:	b118      	cbz	r0, 8005614 <_vfiprintf_r+0x18>
 800560c:	6a03      	ldr	r3, [r0, #32]
 800560e:	b90b      	cbnz	r3, 8005614 <_vfiprintf_r+0x18>
 8005610:	f7ff fdd0 	bl	80051b4 <__sinit>
 8005614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005616:	07d9      	lsls	r1, r3, #31
 8005618:	d405      	bmi.n	8005626 <_vfiprintf_r+0x2a>
 800561a:	89ab      	ldrh	r3, [r5, #12]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d402      	bmi.n	8005626 <_vfiprintf_r+0x2a>
 8005620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005622:	f7ff fecc 	bl	80053be <__retarget_lock_acquire_recursive>
 8005626:	89ab      	ldrh	r3, [r5, #12]
 8005628:	071b      	lsls	r3, r3, #28
 800562a:	d501      	bpl.n	8005630 <_vfiprintf_r+0x34>
 800562c:	692b      	ldr	r3, [r5, #16]
 800562e:	b99b      	cbnz	r3, 8005658 <_vfiprintf_r+0x5c>
 8005630:	4629      	mov	r1, r5
 8005632:	4630      	mov	r0, r6
 8005634:	f000 fb78 	bl	8005d28 <__swsetup_r>
 8005638:	b170      	cbz	r0, 8005658 <_vfiprintf_r+0x5c>
 800563a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800563c:	07dc      	lsls	r4, r3, #31
 800563e:	d504      	bpl.n	800564a <_vfiprintf_r+0x4e>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	b01d      	add	sp, #116	; 0x74
 8005646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	0598      	lsls	r0, r3, #22
 800564e:	d4f7      	bmi.n	8005640 <_vfiprintf_r+0x44>
 8005650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005652:	f7ff feb5 	bl	80053c0 <__retarget_lock_release_recursive>
 8005656:	e7f3      	b.n	8005640 <_vfiprintf_r+0x44>
 8005658:	2300      	movs	r3, #0
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
 800565c:	2320      	movs	r3, #32
 800565e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005662:	2330      	movs	r3, #48	; 0x30
 8005664:	f04f 0901 	mov.w	r9, #1
 8005668:	f8cd 800c 	str.w	r8, [sp, #12]
 800566c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800581c <_vfiprintf_r+0x220>
 8005670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005674:	4623      	mov	r3, r4
 8005676:	469a      	mov	sl, r3
 8005678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800567c:	b10a      	cbz	r2, 8005682 <_vfiprintf_r+0x86>
 800567e:	2a25      	cmp	r2, #37	; 0x25
 8005680:	d1f9      	bne.n	8005676 <_vfiprintf_r+0x7a>
 8005682:	ebba 0b04 	subs.w	fp, sl, r4
 8005686:	d00b      	beq.n	80056a0 <_vfiprintf_r+0xa4>
 8005688:	465b      	mov	r3, fp
 800568a:	4622      	mov	r2, r4
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff ffa1 	bl	80055d6 <__sfputs_r>
 8005694:	3001      	adds	r0, #1
 8005696:	f000 80a9 	beq.w	80057ec <_vfiprintf_r+0x1f0>
 800569a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800569c:	445a      	add	r2, fp
 800569e:	9209      	str	r2, [sp, #36]	; 0x24
 80056a0:	f89a 3000 	ldrb.w	r3, [sl]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80a1 	beq.w	80057ec <_vfiprintf_r+0x1f0>
 80056aa:	2300      	movs	r3, #0
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b4:	f10a 0a01 	add.w	sl, sl, #1
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	9307      	str	r3, [sp, #28]
 80056bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c0:	931a      	str	r3, [sp, #104]	; 0x68
 80056c2:	4654      	mov	r4, sl
 80056c4:	2205      	movs	r2, #5
 80056c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ca:	4854      	ldr	r0, [pc, #336]	; (800581c <_vfiprintf_r+0x220>)
 80056cc:	f000 fb94 	bl	8005df8 <memchr>
 80056d0:	9a04      	ldr	r2, [sp, #16]
 80056d2:	b9d8      	cbnz	r0, 800570c <_vfiprintf_r+0x110>
 80056d4:	06d1      	lsls	r1, r2, #27
 80056d6:	bf44      	itt	mi
 80056d8:	2320      	movmi	r3, #32
 80056da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056de:	0713      	lsls	r3, r2, #28
 80056e0:	bf44      	itt	mi
 80056e2:	232b      	movmi	r3, #43	; 0x2b
 80056e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e8:	f89a 3000 	ldrb.w	r3, [sl]
 80056ec:	2b2a      	cmp	r3, #42	; 0x2a
 80056ee:	d015      	beq.n	800571c <_vfiprintf_r+0x120>
 80056f0:	4654      	mov	r4, sl
 80056f2:	2000      	movs	r0, #0
 80056f4:	f04f 0c0a 	mov.w	ip, #10
 80056f8:	9a07      	ldr	r2, [sp, #28]
 80056fa:	4621      	mov	r1, r4
 80056fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005700:	3b30      	subs	r3, #48	; 0x30
 8005702:	2b09      	cmp	r3, #9
 8005704:	d94d      	bls.n	80057a2 <_vfiprintf_r+0x1a6>
 8005706:	b1b0      	cbz	r0, 8005736 <_vfiprintf_r+0x13a>
 8005708:	9207      	str	r2, [sp, #28]
 800570a:	e014      	b.n	8005736 <_vfiprintf_r+0x13a>
 800570c:	eba0 0308 	sub.w	r3, r0, r8
 8005710:	fa09 f303 	lsl.w	r3, r9, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	46a2      	mov	sl, r4
 8005718:	9304      	str	r3, [sp, #16]
 800571a:	e7d2      	b.n	80056c2 <_vfiprintf_r+0xc6>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	1d19      	adds	r1, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9103      	str	r1, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfbb      	ittet	lt
 8005728:	425b      	neglt	r3, r3
 800572a:	f042 0202 	orrlt.w	r2, r2, #2
 800572e:	9307      	strge	r3, [sp, #28]
 8005730:	9307      	strlt	r3, [sp, #28]
 8005732:	bfb8      	it	lt
 8005734:	9204      	strlt	r2, [sp, #16]
 8005736:	7823      	ldrb	r3, [r4, #0]
 8005738:	2b2e      	cmp	r3, #46	; 0x2e
 800573a:	d10c      	bne.n	8005756 <_vfiprintf_r+0x15a>
 800573c:	7863      	ldrb	r3, [r4, #1]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d134      	bne.n	80057ac <_vfiprintf_r+0x1b0>
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	3402      	adds	r4, #2
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	9203      	str	r2, [sp, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfb8      	it	lt
 8005750:	f04f 33ff 	movlt.w	r3, #4294967295
 8005754:	9305      	str	r3, [sp, #20]
 8005756:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005820 <_vfiprintf_r+0x224>
 800575a:	2203      	movs	r2, #3
 800575c:	4650      	mov	r0, sl
 800575e:	7821      	ldrb	r1, [r4, #0]
 8005760:	f000 fb4a 	bl	8005df8 <memchr>
 8005764:	b138      	cbz	r0, 8005776 <_vfiprintf_r+0x17a>
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	9b04      	ldr	r3, [sp, #16]
 800576a:	eba0 000a 	sub.w	r0, r0, sl
 800576e:	4082      	lsls	r2, r0
 8005770:	4313      	orrs	r3, r2
 8005772:	3401      	adds	r4, #1
 8005774:	9304      	str	r3, [sp, #16]
 8005776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577a:	2206      	movs	r2, #6
 800577c:	4829      	ldr	r0, [pc, #164]	; (8005824 <_vfiprintf_r+0x228>)
 800577e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005782:	f000 fb39 	bl	8005df8 <memchr>
 8005786:	2800      	cmp	r0, #0
 8005788:	d03f      	beq.n	800580a <_vfiprintf_r+0x20e>
 800578a:	4b27      	ldr	r3, [pc, #156]	; (8005828 <_vfiprintf_r+0x22c>)
 800578c:	bb1b      	cbnz	r3, 80057d6 <_vfiprintf_r+0x1da>
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	3307      	adds	r3, #7
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	3308      	adds	r3, #8
 8005798:	9303      	str	r3, [sp, #12]
 800579a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579c:	443b      	add	r3, r7
 800579e:	9309      	str	r3, [sp, #36]	; 0x24
 80057a0:	e768      	b.n	8005674 <_vfiprintf_r+0x78>
 80057a2:	460c      	mov	r4, r1
 80057a4:	2001      	movs	r0, #1
 80057a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057aa:	e7a6      	b.n	80056fa <_vfiprintf_r+0xfe>
 80057ac:	2300      	movs	r3, #0
 80057ae:	f04f 0c0a 	mov.w	ip, #10
 80057b2:	4619      	mov	r1, r3
 80057b4:	3401      	adds	r4, #1
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	4620      	mov	r0, r4
 80057ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057be:	3a30      	subs	r2, #48	; 0x30
 80057c0:	2a09      	cmp	r2, #9
 80057c2:	d903      	bls.n	80057cc <_vfiprintf_r+0x1d0>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0c6      	beq.n	8005756 <_vfiprintf_r+0x15a>
 80057c8:	9105      	str	r1, [sp, #20]
 80057ca:	e7c4      	b.n	8005756 <_vfiprintf_r+0x15a>
 80057cc:	4604      	mov	r4, r0
 80057ce:	2301      	movs	r3, #1
 80057d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80057d4:	e7f0      	b.n	80057b8 <_vfiprintf_r+0x1bc>
 80057d6:	ab03      	add	r3, sp, #12
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	462a      	mov	r2, r5
 80057dc:	4630      	mov	r0, r6
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <_vfiprintf_r+0x230>)
 80057e0:	a904      	add	r1, sp, #16
 80057e2:	f3af 8000 	nop.w
 80057e6:	4607      	mov	r7, r0
 80057e8:	1c78      	adds	r0, r7, #1
 80057ea:	d1d6      	bne.n	800579a <_vfiprintf_r+0x19e>
 80057ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ee:	07d9      	lsls	r1, r3, #31
 80057f0:	d405      	bmi.n	80057fe <_vfiprintf_r+0x202>
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	059a      	lsls	r2, r3, #22
 80057f6:	d402      	bmi.n	80057fe <_vfiprintf_r+0x202>
 80057f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057fa:	f7ff fde1 	bl	80053c0 <__retarget_lock_release_recursive>
 80057fe:	89ab      	ldrh	r3, [r5, #12]
 8005800:	065b      	lsls	r3, r3, #25
 8005802:	f53f af1d 	bmi.w	8005640 <_vfiprintf_r+0x44>
 8005806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005808:	e71c      	b.n	8005644 <_vfiprintf_r+0x48>
 800580a:	ab03      	add	r3, sp, #12
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	462a      	mov	r2, r5
 8005810:	4630      	mov	r0, r6
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <_vfiprintf_r+0x230>)
 8005814:	a904      	add	r1, sp, #16
 8005816:	f000 f87d 	bl	8005914 <_printf_i>
 800581a:	e7e4      	b.n	80057e6 <_vfiprintf_r+0x1ea>
 800581c:	08005fb2 	.word	0x08005fb2
 8005820:	08005fb8 	.word	0x08005fb8
 8005824:	08005fbc 	.word	0x08005fbc
 8005828:	00000000 	.word	0x00000000
 800582c:	080055d7 	.word	0x080055d7

08005830 <_printf_common>:
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	4616      	mov	r6, r2
 8005836:	4699      	mov	r9, r3
 8005838:	688a      	ldr	r2, [r1, #8]
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	4607      	mov	r7, r0
 800583e:	4293      	cmp	r3, r2
 8005840:	bfb8      	it	lt
 8005842:	4613      	movlt	r3, r2
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800584a:	460c      	mov	r4, r1
 800584c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005850:	b10a      	cbz	r2, 8005856 <_printf_common+0x26>
 8005852:	3301      	adds	r3, #1
 8005854:	6033      	str	r3, [r6, #0]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	0699      	lsls	r1, r3, #26
 800585a:	bf42      	ittt	mi
 800585c:	6833      	ldrmi	r3, [r6, #0]
 800585e:	3302      	addmi	r3, #2
 8005860:	6033      	strmi	r3, [r6, #0]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	f015 0506 	ands.w	r5, r5, #6
 8005868:	d106      	bne.n	8005878 <_printf_common+0x48>
 800586a:	f104 0a19 	add.w	sl, r4, #25
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	6832      	ldr	r2, [r6, #0]
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	42ab      	cmp	r3, r5
 8005876:	dc2b      	bgt.n	80058d0 <_printf_common+0xa0>
 8005878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800587c:	1e13      	subs	r3, r2, #0
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	bf18      	it	ne
 8005882:	2301      	movne	r3, #1
 8005884:	0692      	lsls	r2, r2, #26
 8005886:	d430      	bmi.n	80058ea <_printf_common+0xba>
 8005888:	4649      	mov	r1, r9
 800588a:	4638      	mov	r0, r7
 800588c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d023      	beq.n	80058de <_printf_common+0xae>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	6922      	ldr	r2, [r4, #16]
 800589a:	f003 0306 	and.w	r3, r3, #6
 800589e:	2b04      	cmp	r3, #4
 80058a0:	bf14      	ite	ne
 80058a2:	2500      	movne	r5, #0
 80058a4:	6833      	ldreq	r3, [r6, #0]
 80058a6:	f04f 0600 	mov.w	r6, #0
 80058aa:	bf08      	it	eq
 80058ac:	68e5      	ldreq	r5, [r4, #12]
 80058ae:	f104 041a 	add.w	r4, r4, #26
 80058b2:	bf08      	it	eq
 80058b4:	1aed      	subeq	r5, r5, r3
 80058b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058ba:	bf08      	it	eq
 80058bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058c0:	4293      	cmp	r3, r2
 80058c2:	bfc4      	itt	gt
 80058c4:	1a9b      	subgt	r3, r3, r2
 80058c6:	18ed      	addgt	r5, r5, r3
 80058c8:	42b5      	cmp	r5, r6
 80058ca:	d11a      	bne.n	8005902 <_printf_common+0xd2>
 80058cc:	2000      	movs	r0, #0
 80058ce:	e008      	b.n	80058e2 <_printf_common+0xb2>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4652      	mov	r2, sl
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d103      	bne.n	80058e6 <_printf_common+0xb6>
 80058de:	f04f 30ff 	mov.w	r0, #4294967295
 80058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e6:	3501      	adds	r5, #1
 80058e8:	e7c1      	b.n	800586e <_printf_common+0x3e>
 80058ea:	2030      	movs	r0, #48	; 0x30
 80058ec:	18e1      	adds	r1, r4, r3
 80058ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f8:	4422      	add	r2, r4
 80058fa:	3302      	adds	r3, #2
 80058fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005900:	e7c2      	b.n	8005888 <_printf_common+0x58>
 8005902:	2301      	movs	r3, #1
 8005904:	4622      	mov	r2, r4
 8005906:	4649      	mov	r1, r9
 8005908:	4638      	mov	r0, r7
 800590a:	47c0      	blx	r8
 800590c:	3001      	adds	r0, #1
 800590e:	d0e6      	beq.n	80058de <_printf_common+0xae>
 8005910:	3601      	adds	r6, #1
 8005912:	e7d9      	b.n	80058c8 <_printf_common+0x98>

08005914 <_printf_i>:
 8005914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	7e0f      	ldrb	r7, [r1, #24]
 800591a:	4691      	mov	r9, r2
 800591c:	2f78      	cmp	r7, #120	; 0x78
 800591e:	4680      	mov	r8, r0
 8005920:	460c      	mov	r4, r1
 8005922:	469a      	mov	sl, r3
 8005924:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800592a:	d807      	bhi.n	800593c <_printf_i+0x28>
 800592c:	2f62      	cmp	r7, #98	; 0x62
 800592e:	d80a      	bhi.n	8005946 <_printf_i+0x32>
 8005930:	2f00      	cmp	r7, #0
 8005932:	f000 80d5 	beq.w	8005ae0 <_printf_i+0x1cc>
 8005936:	2f58      	cmp	r7, #88	; 0x58
 8005938:	f000 80c1 	beq.w	8005abe <_printf_i+0x1aa>
 800593c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005944:	e03a      	b.n	80059bc <_printf_i+0xa8>
 8005946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800594a:	2b15      	cmp	r3, #21
 800594c:	d8f6      	bhi.n	800593c <_printf_i+0x28>
 800594e:	a101      	add	r1, pc, #4	; (adr r1, 8005954 <_printf_i+0x40>)
 8005950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005954:	080059ad 	.word	0x080059ad
 8005958:	080059c1 	.word	0x080059c1
 800595c:	0800593d 	.word	0x0800593d
 8005960:	0800593d 	.word	0x0800593d
 8005964:	0800593d 	.word	0x0800593d
 8005968:	0800593d 	.word	0x0800593d
 800596c:	080059c1 	.word	0x080059c1
 8005970:	0800593d 	.word	0x0800593d
 8005974:	0800593d 	.word	0x0800593d
 8005978:	0800593d 	.word	0x0800593d
 800597c:	0800593d 	.word	0x0800593d
 8005980:	08005ac7 	.word	0x08005ac7
 8005984:	080059ed 	.word	0x080059ed
 8005988:	08005a81 	.word	0x08005a81
 800598c:	0800593d 	.word	0x0800593d
 8005990:	0800593d 	.word	0x0800593d
 8005994:	08005ae9 	.word	0x08005ae9
 8005998:	0800593d 	.word	0x0800593d
 800599c:	080059ed 	.word	0x080059ed
 80059a0:	0800593d 	.word	0x0800593d
 80059a4:	0800593d 	.word	0x0800593d
 80059a8:	08005a89 	.word	0x08005a89
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	1d1a      	adds	r2, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	602a      	str	r2, [r5, #0]
 80059b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059bc:	2301      	movs	r3, #1
 80059be:	e0a0      	b.n	8005b02 <_printf_i+0x1ee>
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	0607      	lsls	r7, r0, #24
 80059c6:	f103 0104 	add.w	r1, r3, #4
 80059ca:	6029      	str	r1, [r5, #0]
 80059cc:	d501      	bpl.n	80059d2 <_printf_i+0xbe>
 80059ce:	681e      	ldr	r6, [r3, #0]
 80059d0:	e003      	b.n	80059da <_printf_i+0xc6>
 80059d2:	0646      	lsls	r6, r0, #25
 80059d4:	d5fb      	bpl.n	80059ce <_printf_i+0xba>
 80059d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059da:	2e00      	cmp	r6, #0
 80059dc:	da03      	bge.n	80059e6 <_printf_i+0xd2>
 80059de:	232d      	movs	r3, #45	; 0x2d
 80059e0:	4276      	negs	r6, r6
 80059e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e6:	230a      	movs	r3, #10
 80059e8:	4859      	ldr	r0, [pc, #356]	; (8005b50 <_printf_i+0x23c>)
 80059ea:	e012      	b.n	8005a12 <_printf_i+0xfe>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	6820      	ldr	r0, [r4, #0]
 80059f0:	1d19      	adds	r1, r3, #4
 80059f2:	6029      	str	r1, [r5, #0]
 80059f4:	0605      	lsls	r5, r0, #24
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0xe8>
 80059f8:	681e      	ldr	r6, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0xee>
 80059fc:	0641      	lsls	r1, r0, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0xe4>
 8005a00:	881e      	ldrh	r6, [r3, #0]
 8005a02:	2f6f      	cmp	r7, #111	; 0x6f
 8005a04:	bf0c      	ite	eq
 8005a06:	2308      	moveq	r3, #8
 8005a08:	230a      	movne	r3, #10
 8005a0a:	4851      	ldr	r0, [pc, #324]	; (8005b50 <_printf_i+0x23c>)
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a12:	6865      	ldr	r5, [r4, #4]
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	bfa8      	it	ge
 8005a18:	6821      	ldrge	r1, [r4, #0]
 8005a1a:	60a5      	str	r5, [r4, #8]
 8005a1c:	bfa4      	itt	ge
 8005a1e:	f021 0104 	bicge.w	r1, r1, #4
 8005a22:	6021      	strge	r1, [r4, #0]
 8005a24:	b90e      	cbnz	r6, 8005a2a <_printf_i+0x116>
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	d04b      	beq.n	8005ac2 <_printf_i+0x1ae>
 8005a2a:	4615      	mov	r5, r2
 8005a2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a30:	fb03 6711 	mls	r7, r3, r1, r6
 8005a34:	5dc7      	ldrb	r7, [r0, r7]
 8005a36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a3a:	4637      	mov	r7, r6
 8005a3c:	42bb      	cmp	r3, r7
 8005a3e:	460e      	mov	r6, r1
 8005a40:	d9f4      	bls.n	8005a2c <_printf_i+0x118>
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d10b      	bne.n	8005a5e <_printf_i+0x14a>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	07de      	lsls	r6, r3, #31
 8005a4a:	d508      	bpl.n	8005a5e <_printf_i+0x14a>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	6861      	ldr	r1, [r4, #4]
 8005a50:	4299      	cmp	r1, r3
 8005a52:	bfde      	ittt	le
 8005a54:	2330      	movle	r3, #48	; 0x30
 8005a56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a5e:	1b52      	subs	r2, r2, r5
 8005a60:	6122      	str	r2, [r4, #16]
 8005a62:	464b      	mov	r3, r9
 8005a64:	4621      	mov	r1, r4
 8005a66:	4640      	mov	r0, r8
 8005a68:	f8cd a000 	str.w	sl, [sp]
 8005a6c:	aa03      	add	r2, sp, #12
 8005a6e:	f7ff fedf 	bl	8005830 <_printf_common>
 8005a72:	3001      	adds	r0, #1
 8005a74:	d14a      	bne.n	8005b0c <_printf_i+0x1f8>
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	b004      	add	sp, #16
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f043 0320 	orr.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2778      	movs	r7, #120	; 0x78
 8005a8a:	4832      	ldr	r0, [pc, #200]	; (8005b54 <_printf_i+0x240>)
 8005a8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	6829      	ldr	r1, [r5, #0]
 8005a94:	061f      	lsls	r7, r3, #24
 8005a96:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a9a:	d402      	bmi.n	8005aa2 <_printf_i+0x18e>
 8005a9c:	065f      	lsls	r7, r3, #25
 8005a9e:	bf48      	it	mi
 8005aa0:	b2b6      	uxthmi	r6, r6
 8005aa2:	07df      	lsls	r7, r3, #31
 8005aa4:	bf48      	it	mi
 8005aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8005aaa:	6029      	str	r1, [r5, #0]
 8005aac:	bf48      	it	mi
 8005aae:	6023      	strmi	r3, [r4, #0]
 8005ab0:	b91e      	cbnz	r6, 8005aba <_printf_i+0x1a6>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	f023 0320 	bic.w	r3, r3, #32
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	2310      	movs	r3, #16
 8005abc:	e7a6      	b.n	8005a0c <_printf_i+0xf8>
 8005abe:	4824      	ldr	r0, [pc, #144]	; (8005b50 <_printf_i+0x23c>)
 8005ac0:	e7e4      	b.n	8005a8c <_printf_i+0x178>
 8005ac2:	4615      	mov	r5, r2
 8005ac4:	e7bd      	b.n	8005a42 <_printf_i+0x12e>
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	6826      	ldr	r6, [r4, #0]
 8005aca:	1d18      	adds	r0, r3, #4
 8005acc:	6961      	ldr	r1, [r4, #20]
 8005ace:	6028      	str	r0, [r5, #0]
 8005ad0:	0635      	lsls	r5, r6, #24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	d501      	bpl.n	8005ada <_printf_i+0x1c6>
 8005ad6:	6019      	str	r1, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <_printf_i+0x1cc>
 8005ada:	0670      	lsls	r0, r6, #25
 8005adc:	d5fb      	bpl.n	8005ad6 <_printf_i+0x1c2>
 8005ade:	8019      	strh	r1, [r3, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4615      	mov	r5, r2
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	e7bc      	b.n	8005a62 <_printf_i+0x14e>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	2100      	movs	r1, #0
 8005aec:	1d1a      	adds	r2, r3, #4
 8005aee:	602a      	str	r2, [r5, #0]
 8005af0:	681d      	ldr	r5, [r3, #0]
 8005af2:	6862      	ldr	r2, [r4, #4]
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f97f 	bl	8005df8 <memchr>
 8005afa:	b108      	cbz	r0, 8005b00 <_printf_i+0x1ec>
 8005afc:	1b40      	subs	r0, r0, r5
 8005afe:	6060      	str	r0, [r4, #4]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0a:	e7aa      	b.n	8005a62 <_printf_i+0x14e>
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	47d0      	blx	sl
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0ad      	beq.n	8005a76 <_printf_i+0x162>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	d413      	bmi.n	8005b48 <_printf_i+0x234>
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bfb8      	it	lt
 8005b28:	4618      	movlt	r0, r3
 8005b2a:	e7a6      	b.n	8005a7a <_printf_i+0x166>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4649      	mov	r1, r9
 8005b32:	4640      	mov	r0, r8
 8005b34:	47d0      	blx	sl
 8005b36:	3001      	adds	r0, #1
 8005b38:	d09d      	beq.n	8005a76 <_printf_i+0x162>
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	9903      	ldr	r1, [sp, #12]
 8005b40:	1a5b      	subs	r3, r3, r1
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dcf2      	bgt.n	8005b2c <_printf_i+0x218>
 8005b46:	e7eb      	b.n	8005b20 <_printf_i+0x20c>
 8005b48:	2500      	movs	r5, #0
 8005b4a:	f104 0619 	add.w	r6, r4, #25
 8005b4e:	e7f5      	b.n	8005b3c <_printf_i+0x228>
 8005b50:	08005fc3 	.word	0x08005fc3
 8005b54:	08005fd4 	.word	0x08005fd4

08005b58 <__sflush_r>:
 8005b58:	898a      	ldrh	r2, [r1, #12]
 8005b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	0710      	lsls	r0, r2, #28
 8005b60:	460c      	mov	r4, r1
 8005b62:	d457      	bmi.n	8005c14 <__sflush_r+0xbc>
 8005b64:	684b      	ldr	r3, [r1, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dc04      	bgt.n	8005b74 <__sflush_r+0x1c>
 8005b6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dc01      	bgt.n	8005b74 <__sflush_r+0x1c>
 8005b70:	2000      	movs	r0, #0
 8005b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	d0fa      	beq.n	8005b70 <__sflush_r+0x18>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b80:	682f      	ldr	r7, [r5, #0]
 8005b82:	6a21      	ldr	r1, [r4, #32]
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	d032      	beq.n	8005bee <__sflush_r+0x96>
 8005b88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	075a      	lsls	r2, r3, #29
 8005b8e:	d505      	bpl.n	8005b9c <__sflush_r+0x44>
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	1ac0      	subs	r0, r0, r3
 8005b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b96:	b10b      	cbz	r3, 8005b9c <__sflush_r+0x44>
 8005b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b9a:	1ac0      	subs	r0, r0, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	6a21      	ldr	r1, [r4, #32]
 8005ba6:	47b0      	blx	r6
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	d106      	bne.n	8005bbc <__sflush_r+0x64>
 8005bae:	6829      	ldr	r1, [r5, #0]
 8005bb0:	291d      	cmp	r1, #29
 8005bb2:	d82b      	bhi.n	8005c0c <__sflush_r+0xb4>
 8005bb4:	4a28      	ldr	r2, [pc, #160]	; (8005c58 <__sflush_r+0x100>)
 8005bb6:	410a      	asrs	r2, r1
 8005bb8:	07d6      	lsls	r6, r2, #31
 8005bba:	d427      	bmi.n	8005c0c <__sflush_r+0xb4>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6062      	str	r2, [r4, #4]
 8005bc0:	6922      	ldr	r2, [r4, #16]
 8005bc2:	04d9      	lsls	r1, r3, #19
 8005bc4:	6022      	str	r2, [r4, #0]
 8005bc6:	d504      	bpl.n	8005bd2 <__sflush_r+0x7a>
 8005bc8:	1c42      	adds	r2, r0, #1
 8005bca:	d101      	bne.n	8005bd0 <__sflush_r+0x78>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b903      	cbnz	r3, 8005bd2 <__sflush_r+0x7a>
 8005bd0:	6560      	str	r0, [r4, #84]	; 0x54
 8005bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd4:	602f      	str	r7, [r5, #0]
 8005bd6:	2900      	cmp	r1, #0
 8005bd8:	d0ca      	beq.n	8005b70 <__sflush_r+0x18>
 8005bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bde:	4299      	cmp	r1, r3
 8005be0:	d002      	beq.n	8005be8 <__sflush_r+0x90>
 8005be2:	4628      	mov	r0, r5
 8005be4:	f7ff fbee 	bl	80053c4 <_free_r>
 8005be8:	2000      	movs	r0, #0
 8005bea:	6360      	str	r0, [r4, #52]	; 0x34
 8005bec:	e7c1      	b.n	8005b72 <__sflush_r+0x1a>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b0      	blx	r6
 8005bf4:	1c41      	adds	r1, r0, #1
 8005bf6:	d1c8      	bne.n	8005b8a <__sflush_r+0x32>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0c5      	beq.n	8005b8a <__sflush_r+0x32>
 8005bfe:	2b1d      	cmp	r3, #29
 8005c00:	d001      	beq.n	8005c06 <__sflush_r+0xae>
 8005c02:	2b16      	cmp	r3, #22
 8005c04:	d101      	bne.n	8005c0a <__sflush_r+0xb2>
 8005c06:	602f      	str	r7, [r5, #0]
 8005c08:	e7b2      	b.n	8005b70 <__sflush_r+0x18>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	e7ae      	b.n	8005b72 <__sflush_r+0x1a>
 8005c14:	690f      	ldr	r7, [r1, #16]
 8005c16:	2f00      	cmp	r7, #0
 8005c18:	d0aa      	beq.n	8005b70 <__sflush_r+0x18>
 8005c1a:	0793      	lsls	r3, r2, #30
 8005c1c:	bf18      	it	ne
 8005c1e:	2300      	movne	r3, #0
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	bf08      	it	eq
 8005c24:	694b      	ldreq	r3, [r1, #20]
 8005c26:	1bf6      	subs	r6, r6, r7
 8005c28:	600f      	str	r7, [r1, #0]
 8005c2a:	608b      	str	r3, [r1, #8]
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	dd9f      	ble.n	8005b70 <__sflush_r+0x18>
 8005c30:	4633      	mov	r3, r6
 8005c32:	463a      	mov	r2, r7
 8005c34:	4628      	mov	r0, r5
 8005c36:	6a21      	ldr	r1, [r4, #32]
 8005c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005c3c:	47e0      	blx	ip
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	dc06      	bgt.n	8005c50 <__sflush_r+0xf8>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	e790      	b.n	8005b72 <__sflush_r+0x1a>
 8005c50:	4407      	add	r7, r0
 8005c52:	1a36      	subs	r6, r6, r0
 8005c54:	e7ea      	b.n	8005c2c <__sflush_r+0xd4>
 8005c56:	bf00      	nop
 8005c58:	dfbffffe 	.word	0xdfbffffe

08005c5c <_fflush_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	690b      	ldr	r3, [r1, #16]
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b913      	cbnz	r3, 8005c6c <_fflush_r+0x10>
 8005c66:	2500      	movs	r5, #0
 8005c68:	4628      	mov	r0, r5
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	b118      	cbz	r0, 8005c76 <_fflush_r+0x1a>
 8005c6e:	6a03      	ldr	r3, [r0, #32]
 8005c70:	b90b      	cbnz	r3, 8005c76 <_fflush_r+0x1a>
 8005c72:	f7ff fa9f 	bl	80051b4 <__sinit>
 8005c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f3      	beq.n	8005c66 <_fflush_r+0xa>
 8005c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c80:	07d0      	lsls	r0, r2, #31
 8005c82:	d404      	bmi.n	8005c8e <_fflush_r+0x32>
 8005c84:	0599      	lsls	r1, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_fflush_r+0x32>
 8005c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c8a:	f7ff fb98 	bl	80053be <__retarget_lock_acquire_recursive>
 8005c8e:	4628      	mov	r0, r5
 8005c90:	4621      	mov	r1, r4
 8005c92:	f7ff ff61 	bl	8005b58 <__sflush_r>
 8005c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c98:	4605      	mov	r5, r0
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	d4e4      	bmi.n	8005c68 <_fflush_r+0xc>
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	059b      	lsls	r3, r3, #22
 8005ca2:	d4e1      	bmi.n	8005c68 <_fflush_r+0xc>
 8005ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ca6:	f7ff fb8b 	bl	80053c0 <__retarget_lock_release_recursive>
 8005caa:	e7dd      	b.n	8005c68 <_fflush_r+0xc>

08005cac <__swbuf_r>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	460e      	mov	r6, r1
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	b118      	cbz	r0, 8005cbe <__swbuf_r+0x12>
 8005cb6:	6a03      	ldr	r3, [r0, #32]
 8005cb8:	b90b      	cbnz	r3, 8005cbe <__swbuf_r+0x12>
 8005cba:	f7ff fa7b 	bl	80051b4 <__sinit>
 8005cbe:	69a3      	ldr	r3, [r4, #24]
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	071a      	lsls	r2, r3, #28
 8005cc6:	d525      	bpl.n	8005d14 <__swbuf_r+0x68>
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	b31b      	cbz	r3, 8005d14 <__swbuf_r+0x68>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	6922      	ldr	r2, [r4, #16]
 8005cd0:	b2f6      	uxtb	r6, r6
 8005cd2:	1a98      	subs	r0, r3, r2
 8005cd4:	6963      	ldr	r3, [r4, #20]
 8005cd6:	4637      	mov	r7, r6
 8005cd8:	4283      	cmp	r3, r0
 8005cda:	dc04      	bgt.n	8005ce6 <__swbuf_r+0x3a>
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7ff ffbc 	bl	8005c5c <_fflush_r>
 8005ce4:	b9e0      	cbnz	r0, 8005d20 <__swbuf_r+0x74>
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	6022      	str	r2, [r4, #0]
 8005cf2:	701e      	strb	r6, [r3, #0]
 8005cf4:	6962      	ldr	r2, [r4, #20]
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d004      	beq.n	8005d06 <__swbuf_r+0x5a>
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	07db      	lsls	r3, r3, #31
 8005d00:	d506      	bpl.n	8005d10 <__swbuf_r+0x64>
 8005d02:	2e0a      	cmp	r6, #10
 8005d04:	d104      	bne.n	8005d10 <__swbuf_r+0x64>
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f7ff ffa7 	bl	8005c5c <_fflush_r>
 8005d0e:	b938      	cbnz	r0, 8005d20 <__swbuf_r+0x74>
 8005d10:	4638      	mov	r0, r7
 8005d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d14:	4621      	mov	r1, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 f806 	bl	8005d28 <__swsetup_r>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d0d5      	beq.n	8005ccc <__swbuf_r+0x20>
 8005d20:	f04f 37ff 	mov.w	r7, #4294967295
 8005d24:	e7f4      	b.n	8005d10 <__swbuf_r+0x64>
	...

08005d28 <__swsetup_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <__swsetup_r+0xac>)
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	460c      	mov	r4, r1
 8005d32:	b118      	cbz	r0, 8005d3c <__swsetup_r+0x14>
 8005d34:	6a03      	ldr	r3, [r0, #32]
 8005d36:	b90b      	cbnz	r3, 8005d3c <__swsetup_r+0x14>
 8005d38:	f7ff fa3c 	bl	80051b4 <__sinit>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d42:	0718      	lsls	r0, r3, #28
 8005d44:	d422      	bmi.n	8005d8c <__swsetup_r+0x64>
 8005d46:	06d9      	lsls	r1, r3, #27
 8005d48:	d407      	bmi.n	8005d5a <__swsetup_r+0x32>
 8005d4a:	2309      	movs	r3, #9
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d52:	f04f 30ff 	mov.w	r0, #4294967295
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	e034      	b.n	8005dc4 <__swsetup_r+0x9c>
 8005d5a:	0758      	lsls	r0, r3, #29
 8005d5c:	d512      	bpl.n	8005d84 <__swsetup_r+0x5c>
 8005d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d60:	b141      	cbz	r1, 8005d74 <__swsetup_r+0x4c>
 8005d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d66:	4299      	cmp	r1, r3
 8005d68:	d002      	beq.n	8005d70 <__swsetup_r+0x48>
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f7ff fb2a 	bl	80053c4 <_free_r>
 8005d70:	2300      	movs	r3, #0
 8005d72:	6363      	str	r3, [r4, #52]	; 0x34
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d7a:	81a3      	strh	r3, [r4, #12]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	6023      	str	r3, [r4, #0]
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	f043 0308 	orr.w	r3, r3, #8
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	b94b      	cbnz	r3, 8005da4 <__swsetup_r+0x7c>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9a:	d003      	beq.n	8005da4 <__swsetup_r+0x7c>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f85d 	bl	8005e5e <__smakebuf_r>
 8005da4:	89a0      	ldrh	r0, [r4, #12]
 8005da6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005daa:	f010 0301 	ands.w	r3, r0, #1
 8005dae:	d00a      	beq.n	8005dc6 <__swsetup_r+0x9e>
 8005db0:	2300      	movs	r3, #0
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	6963      	ldr	r3, [r4, #20]
 8005db6:	425b      	negs	r3, r3
 8005db8:	61a3      	str	r3, [r4, #24]
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	b943      	cbnz	r3, 8005dd0 <__swsetup_r+0xa8>
 8005dbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dc2:	d1c4      	bne.n	8005d4e <__swsetup_r+0x26>
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	0781      	lsls	r1, r0, #30
 8005dc8:	bf58      	it	pl
 8005dca:	6963      	ldrpl	r3, [r4, #20]
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	e7f4      	b.n	8005dba <__swsetup_r+0x92>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e7f7      	b.n	8005dc4 <__swsetup_r+0x9c>
 8005dd4:	20000064 	.word	0x20000064

08005dd8 <_sbrk_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d05      	ldr	r5, [pc, #20]	; (8005df4 <_sbrk_r+0x1c>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fb faf4 	bl	80013d0 <_sbrk>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_sbrk_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_sbrk_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200003c0 	.word	0x200003c0

08005df8 <memchr>:
 8005df8:	4603      	mov	r3, r0
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	b2c9      	uxtb	r1, r1
 8005dfe:	4402      	add	r2, r0
 8005e00:	4293      	cmp	r3, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	d101      	bne.n	8005e0a <memchr+0x12>
 8005e06:	2000      	movs	r0, #0
 8005e08:	e003      	b.n	8005e12 <memchr+0x1a>
 8005e0a:	7804      	ldrb	r4, [r0, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	428c      	cmp	r4, r1
 8005e10:	d1f6      	bne.n	8005e00 <memchr+0x8>
 8005e12:	bd10      	pop	{r4, pc}

08005e14 <__swhatbuf_r>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	460c      	mov	r4, r1
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	461e      	mov	r6, r3
 8005e22:	b096      	sub	sp, #88	; 0x58
 8005e24:	da0c      	bge.n	8005e40 <__swhatbuf_r+0x2c>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e2e:	bf0c      	ite	eq
 8005e30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e34:	2340      	movne	r3, #64	; 0x40
 8005e36:	2000      	movs	r0, #0
 8005e38:	6031      	str	r1, [r6, #0]
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	b016      	add	sp, #88	; 0x58
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	466a      	mov	r2, sp
 8005e42:	f000 f849 	bl	8005ed8 <_fstat_r>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	dbed      	blt.n	8005e26 <__swhatbuf_r+0x12>
 8005e4a:	9901      	ldr	r1, [sp, #4]
 8005e4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e54:	4259      	negs	r1, r3
 8005e56:	4159      	adcs	r1, r3
 8005e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5c:	e7eb      	b.n	8005e36 <__swhatbuf_r+0x22>

08005e5e <__smakebuf_r>:
 8005e5e:	898b      	ldrh	r3, [r1, #12]
 8005e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e62:	079d      	lsls	r5, r3, #30
 8005e64:	4606      	mov	r6, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	d507      	bpl.n	8005e7a <__smakebuf_r+0x1c>
 8005e6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	2301      	movs	r3, #1
 8005e74:	6163      	str	r3, [r4, #20]
 8005e76:	b002      	add	sp, #8
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
 8005e7a:	466a      	mov	r2, sp
 8005e7c:	ab01      	add	r3, sp, #4
 8005e7e:	f7ff ffc9 	bl	8005e14 <__swhatbuf_r>
 8005e82:	9900      	ldr	r1, [sp, #0]
 8005e84:	4605      	mov	r5, r0
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff fb04 	bl	8005494 <_malloc_r>
 8005e8c:	b948      	cbnz	r0, 8005ea2 <__smakebuf_r+0x44>
 8005e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e92:	059a      	lsls	r2, r3, #22
 8005e94:	d4ef      	bmi.n	8005e76 <__smakebuf_r+0x18>
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	f043 0302 	orr.w	r3, r3, #2
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	e7e3      	b.n	8005e6a <__smakebuf_r+0xc>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	6020      	str	r0, [r4, #0]
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	9b00      	ldr	r3, [sp, #0]
 8005eae:	6120      	str	r0, [r4, #16]
 8005eb0:	6163      	str	r3, [r4, #20]
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	b15b      	cbz	r3, 8005ece <__smakebuf_r+0x70>
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ebc:	f000 f81e 	bl	8005efc <_isatty_r>
 8005ec0:	b128      	cbz	r0, 8005ece <__smakebuf_r+0x70>
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	431d      	orrs	r5, r3
 8005ed2:	81a5      	strh	r5, [r4, #12]
 8005ed4:	e7cf      	b.n	8005e76 <__smakebuf_r+0x18>
	...

08005ed8 <_fstat_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	2300      	movs	r3, #0
 8005edc:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_fstat_r+0x20>)
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f7fb fa4d 	bl	8001384 <_fstat>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d102      	bne.n	8005ef4 <_fstat_r+0x1c>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b103      	cbz	r3, 8005ef4 <_fstat_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200003c0 	.word	0x200003c0

08005efc <_isatty_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	2300      	movs	r3, #0
 8005f00:	4d05      	ldr	r5, [pc, #20]	; (8005f18 <_isatty_r+0x1c>)
 8005f02:	4604      	mov	r4, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	f7fb fa4b 	bl	80013a2 <_isatty>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_isatty_r+0x1a>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_isatty_r+0x1a>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200003c0 	.word	0x200003c0

08005f1c <_init>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr

08005f28 <_fini>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr
>>>>>>> 40dd712608be1269cc2541e65bb556b40319ef47
